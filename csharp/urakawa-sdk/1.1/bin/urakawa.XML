<?xml version="1.0"?>
<doc>
    <assembly>
        <name>urakawa</name>
    </assembly>
    <members>
        <member name="T:urakawa.WithPresentation">
            <summary>
            Base class for classes that are associated with a <see cref="T:urakawa.Presentation"/>,
            extends <see cref="T:urakawa.xuk.XukAble"/> and is therefore also <see cref="T:urakawa.xuk.IXukAble"/>
            </summary>
        </member>
        <member name="T:urakawa.xuk.XukAble">
            <summary>
            Common base class for classes that implement <see cref="T:urakawa.xuk.IXukAble"/>
            </summary>
        </member>
        <member name="T:urakawa.xuk.IXukAble">
            <summary>
            The interface to implement for serializing the core model in a roundtrip safe format.
            </summary>
        </member>
        <member name="M:urakawa.xuk.IXukAble.xukIn(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            The implementation of XUKIn is expected to read and remove all tags
            up to and including the closing tag matching the element the reader was at when passed to it.
            The call is expected to be forwarded to any owned element, in effect making it a recursive read of the XUK file
            </summary>
            <param name="source">The XmlReader to read from</param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.xuk.IXukAble.xukOut(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            The implementation of xukOut is expected to write a tag for the object it is called on.
            The call should be forwarded to any owned object, making it in effect be a recursive write
            </summary>
            <param name="destination"></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.xuk.IXukAble.getXukLocalName">
            <summary>
            Gets the local localName part of the QName identifying the type of the instance
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.xuk.IXukAble.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName identifying the type of the instance
            </summary>
            <returns>The namespace uri</returns>
        </member>
        <member name="M:urakawa.xuk.XukAble.clear">
            <summary>
            Clears the <see cref="T:urakawa.xuk.XukAble"/> of any data - called at the beginning of <see cref="M:urakawa.xuk.XukAble.xukIn(System.Xml.XmlReader,urakawa.progress.ProgressHandler)"/>
            </summary>
        </member>
        <member name="M:urakawa.xuk.XukAble.xukIn(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            The implementation of XUKIn is expected to read and remove all tags
            up to and including the closing tag matching the element the reader was at when passed to it.
            The call is expected to be forwarded to any owned element, in effect making it a recursive read of the XUK file
            </summary>
            <param name="source">The XmlReader to read from</param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.xuk.XukAble.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a XukAble xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.xuk.XukAble.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a XukAble xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler of progress</param>
        </member>
        <member name="M:urakawa.xuk.XukAble.xukOut(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write a XukAble element to a XUK file representing the <see cref="T:urakawa.xuk.XukAble"/> instance
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.xuk.XukAble.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a XukAble element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.xuk.XukAble.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a XukAble element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.xuk.XukAble.getXukLocalName">
            <summary>
            Gets the local name part of the QName representing a <see cref="T:urakawa.xuk.XukAble"/> in Xuk
            </summary>
            <returns>The local name part</returns>
        </member>
        <member name="M:urakawa.xuk.XukAble.getXukNamespaceUri">
            <summary>
            Gets the namespace uri part of the QName representing a <see cref="T:urakawa.xuk.XukAble"/> in Xuk
            </summary>
            <returns>The namespace uri part</returns>
        </member>
        <member name="T:urakawa.IWithPresentation">
            <summary>
            Interface for classes of objects associated with a <see cref="T:urakawa.Presentation"/>
            </summary>
        </member>
        <member name="M:urakawa.IWithPresentation.getPresentation">
            <summary>
            Gets the associated presentation
            </summary>
            <returns>The presentation</returns>
        </member>
        <member name="M:urakawa.IWithPresentation.setPresentation(urakawa.Presentation)">
            <summary>
            Initializer - sets the associated presentation
            </summary>
            <param name="newPres">The presentation with which to associate</param>
        </member>
        <member name="M:urakawa.WithPresentation.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>
            </summary>
            <returns>The owning <see cref="T:urakawa.Presentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when no <see cref="T:urakawa.Presentation"/> has been associated with <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.WithPresentation.setPresentation(urakawa.Presentation)">
            <summary>
            Sets the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>. For internal use only!!!
            </summary>
            <param name="newPres">The Presentation with which to associate</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when <paramref name="newPres"/> is <c>null</c></exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.Presentation"/>
            </exception>
        </member>
        <member name="T:urakawa.command.CommandFactory">
            <summary>
            Factory for creating <see cref="T:urakawa.command.ICommand"/>s
            </summary>
        </member>
        <member name="M:urakawa.command.CommandFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.command.CommandFactory.createCommand(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.command.ICommand"/> matching a given Xuk QName
            </summary>
            <param name="xukLocalName">The local name part of the Xuk QName</param>
            <param name="xukNamespaceUri">The namespace uri part of the Xuk QName</param>
            <returns>The created command or <c>null</c> if the Xuk QName is not recognized</returns>
        </member>
        <member name="M:urakawa.command.CommandFactory.createCompositeCommand">
            <summary>
            Creates a <see cref="T:urakawa.command.CompositeCommand"/>
            </summary>
            <returns>The created composite command</returns>
        </member>
        <member name="T:urakawa.navigation.AbstractFilterNavigator">
            <summary>
            An abstract class providing the main functionality of a <see cref="T:urakawa.navigation.AbstractFilterNavigator"/>,
            that is a <see cref="T:urakawa.navigation.INavigator"/> navigating a forest of <see cref="T:urakawa.core.TreeNode"/> obtained by filtering
            an actual <see cref="T:urakawa.core.TreeNode"/> tree
            </summary>
        </member>
        <member name="T:urakawa.navigation.INavigator">
            <summary>
            Generic interface for a <see cref="T:urakawa.core.TreeNode"/> forest navigator providing methods for navigation 
            but not for manipulation of virtual trees in a virtual forest
            </summary>
        </member>
        <member name="M:urakawa.navigation.INavigator.getParent(urakawa.core.TreeNode)">
            <summary>
            Gets the parent <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/> in the virtual tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The parent <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.TreeNode"/> exists.</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getPreviousSibling(urakawa.core.TreeNode)">
            <summary>
            Gets the previous sibling of a given context <see cref="T:urakawa.core.TreeNode"/> in the virtual tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The previous sibling <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.TreeNode"/> exists.</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getNextSibling(urakawa.core.TreeNode)">
            <summary>
            Gets the next sibling of a given context <see cref="T:urakawa.core.TreeNode"/> in the virtual tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next sibling <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.TreeNode"/> exists.</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getChildCount(urakawa.core.TreeNode)">
            <summary>
            Gets the number of children of a given context <see cref="T:urakawa.core.TreeNode"/> in the virtual tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The number of children</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getChild(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Gets the child of a given context <see cref="T:urakawa.core.TreeNode"/> at a given index in the virtual tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.TreeNode"/> at the given index</returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getPrevious(urakawa.core.TreeNode)">
            <summary>
            Gets the previous <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            in depth first traversal order of the virtual forest
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The previous <see cref="T:urakawa.core.TreeNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getNext(urakawa.core.TreeNode)">
            <summary>
            Gets the next <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            in depth first traversal order of the virtual forest
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next <see cref="T:urakawa.core.TreeNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.INavigator.getSubForestIterator(urakawa.core.TreeNode)">
            <summary>
            Gets an enumerator enumerating the virtual sub-forest starting at a given start <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="startNode">The given</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.isIncluded(urakawa.core.TreeNode)">
            <summary>
            Determines if a given <see cref="T:urakawa.core.TreeNode"/> is included by the filter of the <see cref="T:urakawa.navigation.AbstractFilterNavigator"/> instance.
            Concrete classes must implement this method to determine the behaviour of the filter navigator
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if <paramref localName="node"/> is included by the filter of the
            <see cref="T:urakawa.navigation.AbstractFilterNavigator"/> instance</returns>
            <remarks>In derived concrete classes the implementation of this abstract method defines the filter</remarks>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getParent(urakawa.core.TreeNode)">
            <summary>
            Gets the parent <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/> in the filtered tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The parent <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.TreeNode"/> exists.</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getPreviousSibling(urakawa.core.TreeNode)">
            <summary>
            Gets the previous sibling of a given context <see cref="T:urakawa.core.TreeNode"/> in the filtered tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The previous sibling <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.TreeNode"/> exists.</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getLastChild(urakawa.core.TreeNode)">
            <summary>
            Finds the last child <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The last child or <c>null</c> if the context <see cref="T:urakawa.core.TreeNode"/> has no children</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getNextSibling(urakawa.core.TreeNode)">
            <summary>
            Gets the next sibling of a given context <see cref="T:urakawa.core.TreeNode"/> in the filtered tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next sibling <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if no such <see cref="T:urakawa.core.TreeNode"/> exists.</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getFirstChild(urakawa.core.TreeNode)">
            <summary>
            Finds the first
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getChildCount(urakawa.core.TreeNode)">
            <summary>
            Gets the number of children of a given context <see cref="T:urakawa.core.TreeNode"/> in the filtered tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The number of children</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.findChildren(urakawa.core.TreeNode,System.Collections.Generic.List{urakawa.core.TreeNode})">
            <summary>
            Recursively finds the children of a given context <see cref="T:urakawa.core.TreeNode"/> and adds 
            then to a given child list
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="childList">The given child <see cref="T:System.Collections.Generic.List`1"/></param>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.indexOf(urakawa.core.TreeNode)">
            <summary>
            Gets the index of a given context <see cref="T:urakawa.core.TreeNode"/> as a child of it's parent <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>
            The index or <c>-1</c> if <paramref name="context"/> does not have a parent
            </returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.findIndexOf(urakawa.core.TreeNode,urakawa.core.TreeNode,System.Int32@)">
            <summary>
            Finds the index of a given <see cref="T:urakawa.core.TreeNode"/> as the child of a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="childToFind">The given <see cref="T:urakawa.core.TreeNode"/> child</param>
            <param name="index">Reference holding the index</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the index was found,
            that is if the child <see cref="T:urakawa.core.TreeNode"/> is in fact a child 
            of the given context <see cref="T:urakawa.core.TreeNode"/>
            </returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.findChildAtIndex(urakawa.core.TreeNode,System.Int32,System.Int32@)">
            <summary>
            Recursively finds the child <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/> 
            at a given index
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="index">The given index</param>
            <param name="acumIndex">The accumulated index</param>
            <returns>The child <see cref="T:urakawa.core.TreeNode"/> at the given index 
            - <c>null</c> if there is no child at the given index</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getChild(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Gets the child of a given context <see cref="T:urakawa.core.TreeNode"/> at a given index in the filtered tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.TreeNode"/> at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getPrevious(urakawa.core.TreeNode)">
            <summary>
            Gets the previous <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            in depth first traversal order of the filtered forest
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The previous <see cref="T:urakawa.core.TreeNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getUnfilteredPrevious(urakawa.core.TreeNode)">
            <summary>
            Finds the previous <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            in the unfiltered source tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The previous <see cref="T:urakawa.core.TreeNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getNext(urakawa.core.TreeNode)">
            <summary>
            Gets the next <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            in depth first traversal order of the filtered forest
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next <see cref="T:urakawa.core.TreeNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="context"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getUnfilteredNext(urakawa.core.TreeNode)">
            <summary>
            Finds the next <see cref="T:urakawa.core.TreeNode"/> of a given context <see cref="T:urakawa.core.TreeNode"/>
            in the unfiltered source tree
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next <see cref="T:urakawa.core.TreeNode"/></returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.getSubForestIterator(urakawa.core.TreeNode)">
            <summary>
            Gets an enumerator enumerating the filtered sub-tree starting at a given start <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="startNode">The given</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:urakawa.navigation.AbstractFilterNavigator.generateSubtree(urakawa.core.TreeNode,System.Collections.Generic.List{urakawa.core.TreeNode})">
            <summary>
            Adds any included <see cref="T:urakawa.core.TreeNode"/>s of the subtree starting at a given context <see cref="T:urakawa.core.TreeNode"/>
            to a given <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <param name="context">The given context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="subtree">The given <see cref="T:System.Collections.Generic.List`1"/></param>
        </member>
        <member name="T:urakawa.property.IGenericPropertyFactory">
            <summary>
            Interface for factories creating <see cref="T:urakawa.property.Property"/>s
            </summary>
        </member>
        <member name="M:urakawa.property.IGenericPropertyFactory.createProperty(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.Property"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.property.Property"/> or <c>null</c> if the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.property.IGenericPropertyFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.Presentation"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the property factory has not been initialized with a presentation
            </exception>
        </member>
        <member name="M:urakawa.property.IGenericPropertyFactory.setPresentation(urakawa.Presentation)">
            <summary>
            Sets the <see cref="T:urakawa.Presentation"/> owns <see cref="T:urakawa.core.TreeNode"/>s created by 
            the <c>this</c>. This method should only be used during initialization
            </summary>
            <param name="pres">The <see cref="T:urakawa.Presentation"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="pres"/> is <c>null</c>
            </exception>
        </member>
        <member name="T:urakawa.media.data.utilities.CloseNotifyingStream">
            <summary>
            <see cref="T:System.IO.Stream"/> wrapper that has an event <see cref="E:urakawa.media.data.utilities.CloseNotifyingStream.StreamClosed"/>
            that is fired when the <see cref="T:urakawa.media.data.utilities.CloseNotifyingStream"/> has closed.
            Method calls are delegated to the base <see cref="T:System.IO.Stream"/> passed with the constructor.
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor specifying the base <see cref="T:System.IO.Stream"/> to be wrapped
            </summary>
            <param name="baseStm">The base <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device. 
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream 
            and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. 
            When this method returns, the buffer contains the specified byte array 
            with the values between <c><paramref name="offset"/></c> and <c>(<paramref name="offset"/> + <paramref name="count"/> - 1)</c> 
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> 
            at which to begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. 
            This can be less than the number of bytes requested if that many bytes are not currently available, 
            or zero (0) if the end of the stream has been reached. 
            </returns>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
            </param>
            <returns>The new position within the current stream. </returns>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            writes a sequence of bytes to the current stream 
            and advances the current position within this stream by the number of bytes written. 
            </summary>
            <param name="buffer">
            An array of bytes. 
            This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. 
            </param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.Close">
            <summary>
            Closes the current stream 
            and releases any resources (such as sockets and file handles) associated with the current stream. 
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte,
            or returns <c>-1</c> if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or <c>-1</c> if at the end of the stream. </returns>
        </member>
        <member name="M:urakawa.media.data.utilities.CloseNotifyingStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte. 
            </summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="E:urakawa.media.data.utilities.CloseNotifyingStream.StreamClosed">
            <summary>
            Fires when the <see cref="T:urakawa.media.data.utilities.CloseNotifyingStream"/> has closed
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.CloseNotifyingStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.CloseNotifyingStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.CloseNotifyingStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.CloseNotifyingStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.CloseNotifyingStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:urakawa.events.command.UnExecutedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.command.ICommand.unExecuted"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.command.CommandEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.command.ICommand"/> sourced events
            </summary>
        </member>
        <member name="T:urakawa.events.DataModelChangedEventArgs">
            <summary>
            Base class for arguments of all data model events
            </summary>
        </member>
        <member name="M:urakawa.events.DataModelChangedEventArgs.#ctor(System.Object)">
            <summary>
            Constructor setting the source object of the event
            </summary>
            <param name="src">The source</param>
        </member>
        <member name="F:urakawa.events.DataModelChangedEventArgs.SourceObject">
            <summary>
            The source object of the event
            </summary>
        </member>
        <member name="M:urakawa.events.DataModelChangedEventArgs.ToString">
            <summary>
            Gets a textual representation of the arguments
            </summary>
            <returns>The textual representation</returns>
        </member>
        <member name="M:urakawa.events.command.CommandEventArgs.#ctor(urakawa.command.ICommand)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.command.ICommand"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.command.ICommand"/> of the event</param>
        </member>
        <member name="F:urakawa.events.command.CommandEventArgs.SourceCommand">
            <summary>
            The source <see cref="T:urakawa.command.ICommand"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.command.UnExecutedEventArgs.#ctor(urakawa.command.ICommand)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.command.ICommand"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.command.ICommand"/> of the event</param>
        </member>
        <member name="T:urakawa.events.command.ExecutedEventArgs">
            <summary>
            Arguments for the <see cref="E:urakawa.command.ICommand.executed"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.command.ExecutedEventArgs.#ctor(urakawa.command.ICommand)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.command.ICommand"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.command.ICommand"/> of the event</param>
        </member>
        <member name="T:urakawa.events.core.ChildRemovedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.core.TreeNode.childRemoved"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.core.TreeNodeEventArgs">
            <summary>
            Base class for arguments for <see cref="T:urakawa.core.TreeNode"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.core.TreeNodeEventArgs.#ctor(urakawa.core.TreeNode)">
            <summary>
            Constructor setting source <see cref="T:urakawa.core.TreeNode"/> of the event
            </summary>
            <param name="src">The source <see cref="T:urakawa.core.TreeNode"/> of the event</param>
        </member>
        <member name="F:urakawa.events.core.TreeNodeEventArgs.SourceTreeNode">
            <summary>
            The source <see cref="T:urakawa.core.TreeNode"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.core.ChildRemovedEventArgs.#ctor(urakawa.core.TreeNode,urakawa.core.TreeNode,System.Int32)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.core.TreeNode"/> of the event,
            the <see cref="T:urakawa.core.TreeNode"/> that was removed as a child and the index of the child prior to the removal
            </summary>
            <param name="notfr">The source <see cref="T:urakawa.core.TreeNode"/> of the event</param>
            <param name="child"></param>
            <param name="pos"></param>
        </member>
        <member name="F:urakawa.events.core.ChildRemovedEventArgs.RemovedChild">
            <summary>
            The <see cref="T:urakawa.core.TreeNode"/> that was removed as a child
            </summary>
        </member>
        <member name="F:urakawa.events.core.ChildRemovedEventArgs.RemovedPosition">
            <summary>
            The index of the child prior to the removal
            </summary>
        </member>
        <member name="T:urakawa.events.metadata.ContentChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.metadata.Metadata.contentChanged"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.metadata.MetadataEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.metadata.Metadata"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.metadata.MetadataEventArgs.#ctor(urakawa.metadata.Metadata)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.metadata.Metadata"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.metadata.Metadata"/> of the event</param>
        </member>
        <member name="F:urakawa.events.metadata.MetadataEventArgs.SourceMetadata">
            <summary>
            The source <see cref="T:urakawa.metadata.Metadata"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.metadata.ContentChangedEventArgs.#ctor(urakawa.metadata.Metadata,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.metadata.Metadata"/> of the event
            and the new+previous content
            </summary>
            <param name="source">The source <see cref="T:urakawa.metadata.Metadata"/> of the event</param>
            <param name="newCntnt">The new content</param>
            <param name="prevContent">The content prior to the change</param>
        </member>
        <member name="F:urakawa.events.metadata.ContentChangedEventArgs.NewContent">
            <summary>
            The new content
            </summary>
        </member>
        <member name="F:urakawa.events.metadata.ContentChangedEventArgs.PreviousContent">
            <summary>
            The content prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.NodeAlreadyExistException">
            <summary>
            Exception thrown when a previous matching node exists in a child collection, where nodes are supposed to be exclusive
            </summary>
        </member>
        <member name="T:urakawa.exception.CheckedException">
            <summary>
            Summary description for CheckedException.
            Exceptions of this type must be caught.
            </summary>
        </member>
        <member name="M:urakawa.exception.CheckedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CheckedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:urakawa.exception.NodeAlreadyExistException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeAlreadyExistException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsAlreadyInitializedException">
            <summary>
            Exception thrown when trying to initialize an object that has already been initialized
            </summary>
        </member>
        <member name="M:urakawa.exception.IsAlreadyInitializedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsAlreadyInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.events.progress.CancellableEventArgs">
            <summary>
            Base class for events that are cancellable
            </summary>
        </member>
        <member name="M:urakawa.events.progress.CancellableEventArgs.Cancel">
            <summary>
            Cancels the event
            </summary>
        </member>
        <member name="P:urakawa.events.progress.CancellableEventArgs.IsCancelled">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if the event has been cancelled
            </summary>
        </member>
        <member name="T:urakawa.property.xml.XmlAttribute">
            <summary>
            Default implementation of <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.#ctor">
            <summary>
            Constructor setting the parent <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the parent is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.copy(urakawa.property.xml.XmlProperty)">
            <summary>
            Creates a copy of the <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
            <param name="newParent">The parent xml property of the copy</param>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown when the <see cref="T:urakawa.property.IGenericPropertyFactory"/> of the <see cref="T:urakawa.Presentation"/> 
            to which <c>this</c> belongs is not a subclass of <see cref="T:urakawa.property.xml.IXmlPropertyFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.export(urakawa.Presentation,urakawa.property.xml.XmlProperty)">
            <summary>
            Exports the xml attribute to a given destination presentation 
            with a given parent <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
            <param name="destPres">The given destination presentation</param>
            <param name="parent">The given parent xml property</param>
            <returns>The exported xml attribute</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.getValue">
            <summary>
            Gets the value of gthe <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.setValue(System.String)">
            <summary>
            Sets the value of the <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.getNamespaceUri">
            <summary>
            Gets the namespace of the <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
            <returns>The namespace</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.getLocalName">
            <summary>
            Gets the local localName of the <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.setQName(System.String,System.String)">
            <summary>
            Sets the QName of the <see cref="T:urakawa.property.xml.XmlAttribute"/> 
            </summary>
            <param name="newNamespaceUri">The namespace part of the new QName</param>
            <param name="newLocalName">The localName part of the new QName</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Throw when <paramref name="newNamespaceUri"/> or <paramref name="newLocalName"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown when <paramref name="newLocalName"/> is an <see cref="F:System.String.Empty"/>
            </exception>
            <remarks>
            If the <see cref="T:urakawa.property.xml.XmlAttribute"/> has already been set on a <see cref="T:urakawa.property.xml.XmlProperty"/>,
            setting the QName will overwrite any <see cref="T:urakawa.property.xml.XmlAttribute"/> of the owning <see cref="T:urakawa.property.xml.XmlProperty"/>
            with matching QName
            </remarks>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.property.xml.XmlProperty"/> of <c>this</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.setParent(urakawa.property.xml.XmlProperty)">
            <summary>
            Sets the parent <see cref="T:urakawa.property.xml.XmlProperty"/> of <c>this</c>. 
            Is intended for internal use by the owning <see cref="T:urakawa.property.xml.XmlProperty"/>,
            calling this method may lead to corruption of the data model
            </summary>
            <param name="newParent">The new parent</param>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.clear">
            <summary>
            Clears the <see cref="T:urakawa.property.xml.XmlAttribute"/> data
            </summary>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a XmlAttribute xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a XmlAttribute element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.property.xml.XmlAttribute.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> representation of the attribute
            </summary>
            <returns>The <see cref="T:System.String"/> representation</returns>
        </member>
        <member name="T:urakawa.media.IVideoMedia">
            <summary>
            Video media is both time-based and has a visual presence
            </summary>
        </member>
        <member name="T:urakawa.media.IMedia">
            <summary>
            This is the base interface for all media-related classes and interfaces.  
            Media is continuous (time-based) or discrete (static), and is of a specific type.
            </summary>
        </member>
        <member name="T:urakawa.IValueEquatable`1">
            <summary>
            Defines a generalized method that classes must implement to create type-specific method for 
            determining value equality of instances
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:urakawa.IValueEquatable`1.valueEquals(`0)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="T:urakawa.events.IChangeNotifier">
            <summary>
            Interface implemented by all classes that emits event notifications
            </summary>
        </member>
        <member name="E:urakawa.events.IChangeNotifier.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.events.IChangeNotifier"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="M:urakawa.media.IMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.IMedia.isContinuous">
            <summary>
            Determines if the <see cref="T:urakawa.media.IMedia"/> is continuous
            </summary>
            <returns><c>true</c> if the <see cref="T:urakawa.media.IMedia"/> is continuous, <c>false</c> else</returns>
        </member>
        <member name="M:urakawa.media.IMedia.isDiscrete">
            <summary>
            Convenience Equivalent to <c>!<see cref="M:urakawa.media.IMedia.isContinuous"/>()</c>
            </summary>
            <returns><c>!isContinuous</c></returns>
        </member>
        <member name="M:urakawa.media.IMedia.isSequence">
            <summary>
            tells you if the media object itself is a sequence
            does not tell you if your individual media object is part of a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.IMedia.copy">
            <summary>
            Gets a copy of the <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.IMedia.export(urakawa.Presentation)">
            <summary>
            Exports the media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported media</returns>
        </member>
        <member name="M:urakawa.media.IMedia.getLanguage">
            <summary>
            Gets the language of the media
            </summary>
            <returns>The language</returns>
        </member>
        <member name="M:urakawa.media.IMedia.setLanguage(System.String)">
            <summary>
            Sets the language of the media
            </summary>
            <param name="lang">The new language - can be null but not an empty string</param>
        </member>
        <member name="E:urakawa.media.IMedia.languageChanged">
            <summary>
            Event fired after the language of the <see cref="T:urakawa.media.IMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.media.ILocated">
            <summary>
            This interface associates a media object with its source location
            </summary>
        </member>
        <member name="M:urakawa.media.ILocated.getSrc">
            <summary>
            Get the src location of the external media
            </summary>
            <returns>The src location</returns>
        </member>
        <member name="M:urakawa.media.ILocated.setSrc(System.String)">
            <summary>
            Set the external media's src location.
            </summary>
            <param name="newSrc">The new src location</param>
        </member>
        <member name="M:urakawa.media.ILocated.getUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> of the <see cref="T:urakawa.media.ExternalMedia"/> 
            - uses <c>getMediaFactory().getPresentation().getRootUri()</c> as base <see cref="T:System.Uri"/>
            </summary>
            <returns>The <see cref="T:System.Uri"/></returns>
            <exception cref="T:urakawa.exception.InvalidUriException">
            Thrown when the value returned by <see cref="M:urakawa.media.ILocated.getSrc"/> is not a well-formed <see cref="T:System.Uri"/>
            </exception>
        </member>
        <member name="T:urakawa.media.IClipped">
            <summary>
            This interface is for referring to time-based segments of external media
            </summary>
        </member>
        <member name="T:urakawa.media.IContinuous">
            <summary>
            Interface for continuous time-based media
            </summary>
        </member>
        <member name="M:urakawa.media.IContinuous.getDuration">
            <summary>
            Gets the duration of the media
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.IContinuous.split(urakawa.media.timing.Time)">
            <summary>
            Splits the continuous media at a given split point, leaving the instance with the part before the split point
            and creating a new media with the part after
            </summary>
            <param name="splitPoint">The given split point - must be between <c>00:00:00.000</c> and <c>getDuration()</c></param>
            <returns>The media with the part of the media after the split point</returns>
        </member>
        <member name="M:urakawa.media.IClipped.getClipBegin">
            <summary>
            Get the begin <see cref="T:urakawa.media.timing.Time"/> for the clip.
            </summary>
            <returns>The begin <see cref="T:urakawa.media.timing.Time"/></returns>
        </member>
        <member name="M:urakawa.media.IClipped.getClipEnd">
            <summary>
            Get the end <see cref="T:urakawa.media.timing.Time"/> for the clip.
            </summary>
            <returns>The end <see cref="T:urakawa.media.timing.Time"/></returns>
        </member>
        <member name="M:urakawa.media.IClipped.setClipBegin(urakawa.media.timing.Time)">
            <summary>
            Set the begin <see cref="T:urakawa.media.timing.Time"/> for the clip.
            </summary>
            <param name="beginPoint">The new begin <see cref="T:urakawa.media.timing.Time"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <c><paramref localName="beginPoint"/></c>
            is not between <c>0 and <see cref="M:urakawa.media.IClipped.getClipEnd"/>()</c>
            </exception>
        </member>
        <member name="M:urakawa.media.IClipped.setClipEnd(urakawa.media.timing.Time)">
            <summary>
            Set the end <see cref="T:urakawa.media.timing.Time"/> for the clip.
            </summary>
            <param name="endPoint">The new end <see cref="T:urakawa.media.timing.Time"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <c><paramref localName="beginPoint"/>&gt;<see cref="M:urakawa.media.IClipped.getClipEnd"/>()</c>
            </exception>
        </member>
        <member name="E:urakawa.media.IClipped.clipChanged">
            <summary>
            Event fired after the clip (clip begin or clip end) of the <see cref="T:urakawa.media.IClipped"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.media.ISized">
            <summary>
            Summary description for ISized.
            </summary>
        </member>
        <member name="M:urakawa.media.ISized.getWidth">
            <summary>
            Get the width of the <see cref="T:urakawa.media.ISized"/> object.
            </summary>
            <returns>The width</returns>
        </member>
        <member name="M:urakawa.media.ISized.getHeight">
            <summary>
            Get the height of the <see cref="T:urakawa.media.ISized"/> object.
            </summary>
            <returns>The height</returns>
        </member>
        <member name="M:urakawa.media.ISized.setWidth(System.Int32)">
            <summary>
            Sets the width of the <see cref="T:urakawa.media.ISized"/> object.
            </summary>
            <param name="newHeight">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ISized.setHeight(System.Int32)">
            <summary>
            Sets the height of the <see cref="T:urakawa.media.ISized"/> object.
            </summary>
            <param name="newHeight">The new height</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ISized.setSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the <see cref="T:urakawa.media.ISized"/> object.
            </summary>
            <param name="newWidth">The new width</param>
            <param name="newHeight">The new height</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width or height is negative
            </exception>
        </member>
        <member name="E:urakawa.media.ISized.sizeChanged">
            <summary>
            Event fired after the size (height or width) of the <see cref="T:urakawa.media.ISized"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.property.channel.IChannelsPropertyFactory">
            <summary>
            <see cref="T:urakawa.property.PropertyFactory"/> that supports creation of <see cref="T:urakawa.property.channel.ChannelsProperty"/>s
            </summary>
        </member>
        <member name="M:urakawa.property.channel.IChannelsPropertyFactory.createChannelsProperty">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.ChannelsProperty"/> of default type
            </summary>
            <returns>The created <see cref="T:urakawa.property.channel.ChannelsProperty"/></returns>
        </member>
        <member name="T:urakawa.metadata.MetadataFactory">
            <summary>
            Default <see cref="T:urakawa.metadata.Metadata"/> factory - supports creation of <see cref="T:urakawa.metadata.Metadata"/> instances
            </summary>
        </member>
        <member name="M:urakawa.metadata.MetadataFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.metadata.MetadataFactory.createMetadata(System.String,System.String)">
            <summary>
            Creates an <see cref="T:urakawa.metadata.Metadata"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.metadata.Metadata"/> instance or <c>null</c> if the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.metadata.MetadataFactory.createMetadata">
            <summary>
            Creates an <see cref="T:urakawa.metadata.Metadata"/> instance
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="T:urakawa.media.data.FileDataProvider">
            <summary>
            Implementation of interface <see cref="T:urakawa.media.data.IDataProvider"/> using files as data storage.
            <remarks>
            Note that the <see cref="T:urakawa.media.data.IDataProviderManager"/> owning a <see cref="T:urakawa.media.data.FileDataProvider"/> 
            must be a <see cref="T:urakawa.media.data.FileDataProviderManager"/>. 
            Trying to initialize a <see cref="T:urakawa.media.data.FileDataProvider"/> with a non-<see cref="T:urakawa.media.data.FileDataProviderManager"/>
            implementation of <see cref="T:urakawa.media.data.IDataProviderManager"/> 
            will cause a <see cref="T:urakawa.exception.MethodParameterIsWrongTypeException"/>
            </remarks>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IDataProvider">
            <summary>
            Interface for a generic <see cref="T:urakawa.media.data.IDataProvider"/> providing access to data storage 
            via input and output <see cref="T:System.IO.Stream"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderManager"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.media.data.IDataProviderManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.setDataProviderManager(urakawa.media.data.IDataProviderManager)">
            <summary>
            Initializes the <see cref="T:urakawa.media.data.IDataProvider"/> with an owning <see cref="T:urakawa.media.data.IDataProviderManager"/>,
            adding it to the manager
            </summary>
            <param name="mngr">The owning manager</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="mngr"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IDataProvider"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getUid">
            <summary>
            Gets the UID of the data provider in the context of the manager. 
            Convenience for <c>getDataProviderManager().getUidOfDataProvider(this)</c>
            </summary>
            <returns>The UID</returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getInputStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to the data
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
            <exception cref="T:urakawa.exception.DataMissingException">
            Thrown if the data stored in the <see cref="T:urakawa.media.data.IDataProvider"/> is missing from the underlying storage mechanism
            </exception>
            <remarks>
            Make sure to close any <see cref="T:System.IO.Stream"/> returned by this method when it is no longer needed. 
            If there are any open input <see cref="T:System.IO.Stream"/>s, subsequent calls to methods
            <see cref="M:urakawa.media.data.IDataProvider.getOutputStream"/> and <see cref="M:urakawa.media.data.IDataProvider.delete"/> will cause <see cref="T:urakawa.exception.InputStreamsOpenException"/>s
            </remarks>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getOutputStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing write access to the data
            </summary>
            <returns>The output <see cref="T:System.IO.Stream"/></returns>
            <exception cref="T:urakawa.exception.DataMissingException">
            Thrown if the data stored in the <see cref="T:urakawa.media.data.IDataProvider"/> is missing from the underlying storage mechanism
            </exception>
            <exception cref="T:urakawa.exception.OutputStreamOpenException">
            Thrown if another output <see cref="T:System.IO.Stream"/> from the data provider is already/still open
            </exception>
            <remarks>
            Make sure to close any <see cref="T:System.IO.Stream"/> returned by this method when it is no longer needed. 
            If there are any open input <see cref="T:System.IO.Stream"/>s, subsequent calls to methods
            <see cref="M:urakawa.media.data.IDataProvider.getOutputStream"/> and <see cref="M:urakawa.media.data.IDataProvider.getInputStream"/> and <see cref="M:urakawa.media.data.IDataProvider.delete"/> 
            will cause <see cref="T:urakawa.exception.OutputStreamOpenException"/>s
            </remarks>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.delete">
            <summary>
            Deletes any resources associated with <c>this</c> permanently. Additionally removes the <see cref="T:urakawa.media.data.IDataProvider"/>
            from it's <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <exception cref="T:urakawa.exception.OutputStreamOpenException">
            Thrown if a output <see cref="T:System.IO.Stream"/> from the <see cref="T:urakawa.media.data.IDataProvider"/> is currently open
            </exception>
            <exception cref="T:urakawa.exception.InputStreamsOpenException">
            Thrown if one or more input <see cref="T:System.IO.Stream"/>s from the <see cref="T:urakawa.media.data.IDataProvider"/> are currently open
            </exception>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.copy">
            <summary>
            Creates a copy of <c>this</c> including a copy of the data
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.export(urakawa.Presentation)">
            <summary>
            Exports <c>this</c> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported <see cref="T:urakawa.media.data.IDataProvider"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProvider.getMimeType">
            <summary>
            Gets the MIME type of the media stored in the data provider
            </summary>
            <returns>The MIME type</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.#ctor(urakawa.media.data.FileDataProviderManager,System.String,System.String)">
            <summary>
            Constructs a new file data provider with a given manager and relative path
            </summary>
            <param name="mngr">The manager of the constructed instance</param>
            <param name="relPath">The relative path of the data file of the constructed instance</param>
            <param name="mimeType">The MIME type of the data to store in the constructed instance</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getDataFileRelativePath">
            <summary>
            Gets the path of the file storing the data of the instance, realtive to the path of data file directory
            of the owning <see cref="T:urakawa.media.data.FileDataProviderManager"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getDataFileFullPath">
            <summary>
            Gets the full path of the file storing the data the instance
            </summary>
            <returns>The full path</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getUid">
            <summary>
            Gets the UID of the data provider in the context of the manager. 
            Convenience for <c>getDataProviderManager().getUidOfDataProvider(this)</c>
            </summary>
            <returns>The UID</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getInputStream">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the <see cref="T:urakawa.media.data.FileDataProvider"/>
            </summary>
            <returns>The input stream</returns>
            <exception cref="T:urakawa.exception.DataMissingException">
            Thrown if the data stored in the <see cref="T:urakawa.media.data.IDataProvider"/> is missing from the underlying storage mechanism
            </exception>
            <exception cref="T:urakawa.exception.OutputStreamOpenException">
            Thrown if an output <see cref="T:System.IO.Stream"/> from the data provider is already/still open
            </exception>
            <exception cref="T:urakawa.exception.OperationNotValidException">
            Thrown if the underlying data file could not be opened in read-mode - see inner <see cref="T:System.Exception"/> for datails of cause
            </exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getOutputStream">
            <summary>
            Gets an output <see cref="T:System.IO.Stream"/> providing write access to the <see cref="T:urakawa.media.data.FileDataProvider"/>
            </summary>
            <returns>The ouput stream</returns>
            <exception cref="T:urakawa.exception.DataMissingException">
            Thrown if the data stored in the <see cref="T:urakawa.media.data.IDataProvider"/> is missing from the underlying storage mechanism
            </exception>
            <exception cref="T:urakawa.exception.InputStreamsOpenException">
            Thrown if another output <see cref="T:System.IO.Stream"/> from the data provider is already/still open
            </exception>
            <exception cref="T:urakawa.exception.OutputStreamOpenException">
            Thrown if another output <see cref="T:System.IO.Stream"/> from the data provider is already/still open
            </exception>
            <exception cref="T:urakawa.exception.OperationNotValidException">
            Thrown if the underlying data file could not be opened in write-mode - see inner <see cref="T:System.Exception"/> for datails of cause
            </exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.delete">
            <summary>
            Deletes the file data provider, including any existing data files. Also detaches it self 
            the owning data provider manager
            </summary>
            <exception cref="T:urakawa.exception.OutputStreamOpenException">
            Thrown if a output <see cref="T:System.IO.Stream"/> from the <see cref="T:urakawa.media.data.IDataProvider"/> is currently open
            </exception>
            <exception cref="T:urakawa.exception.InputStreamsOpenException">
            Thrown if one or more input <see cref="T:System.IO.Stream"/>s from the <see cref="T:urakawa.media.data.IDataProvider"/> are currently open
            </exception>
            <exception cref="T:urakawa.exception.OperationNotValidException">
            Thrown if an exception occurs while deleting the data file of <c>this</c>. 
            The occuring exception can be accessed as the inner exception of the thrown exception.
            </exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.copy">
            <summary>
            Copies the file data provider including the data 
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.FileDataProviderManager"/> managing <c>this</c>
            </summary>
            <returns>The manager</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.getMimeType">
            <summary>
            Gets the MIME type of the media stored in the data provider
            </summary>
            <returns>The MIME type</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.setDataProviderManager(urakawa.media.data.FileDataProviderManager)">
            <summary>
            Initializes the <see cref="T:urakawa.media.data.IDataProvider"/> with an owning <see cref="T:urakawa.media.data.IDataProviderManager"/>,
            adding it to the manager
            </summary>
            <param name="mngr">The owning manager</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="mngr"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when <c>this</c> has already been associated with a <see cref="T:urakawa.media.data.IDataProvider"/>
            </exception>
            <remarks>
            This method should only be called during construction, calling this method at a later stage will cause
            a <exception cref="T:urakawa.exception.IsAlreadyInitializedException"/>
            </remarks>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a FileDataProvider xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a FileDataProvider element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.valueEquals(urakawa.media.data.IDataProvider)">
            <summary>
            Determines if the 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProvider.export(urakawa.Presentation)">
            <summary>
            Exports <c>this</c> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported <see cref="T:urakawa.media.data.FileDataProvider"/></returns>
        </member>
        <member name="T:urakawa.events.undo.UnDoneEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.undo.UndoRedoManager.commandUnDone"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.undo.UndoRedoManagerEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.undo.UndoRedoManager"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.undo.UndoRedoManagerEventArgs.#ctor(urakawa.undo.UndoRedoManager)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event</param>
        </member>
        <member name="F:urakawa.events.undo.UndoRedoManagerEventArgs.SourceUndoRedoManager">
            <summary>
            The source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.undo.UnDoneEventArgs.#ctor(urakawa.undo.UndoRedoManager,urakawa.command.ICommand)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/> and <see cref="T:urakawa.command.ICommand"/> that was un-done
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event</param>
            <param name="unDoneCmd">The <see cref="T:urakawa.command.ICommand"/> that was un-done</param>
        </member>
        <member name="F:urakawa.events.undo.UnDoneEventArgs.UnDoneCommand">
            <summary>
            The <see cref="T:urakawa.command.ICommand"/> that was un-done
            </summary>
        </member>
        <member name="T:urakawa.events.presentation.PresentationEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.Presentation"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.presentation.PresentationEventArgs.#ctor(urakawa.Presentation)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Presentation"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.Presentation"/> of the event</param>
        </member>
        <member name="F:urakawa.events.presentation.PresentationEventArgs.SourcePresentation">
            <summary>
            The source <see cref="T:urakawa.Presentation"/> of the event
            </summary>
        </member>
        <member name="T:urakawa.exception.NodeIsAncestorException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeIsAncestorException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeIsAncestorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsNotManagerOfException">
            <summary>
            Thrown when a given <see cref="T:System.Object"/> is not managed by the manager
            </summary>
        </member>
        <member name="M:urakawa.exception.IsNotManagerOfException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsNotManagerOfException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.xuk.OpenXukAction">
            <summary>
              Action that opens a xuk file and loads it into a <see cref="T:urakawa.Project"/>
            </summary>
        </member>
        <member name="T:urakawa.progress.ProgressAction">
            <summary>
            An <see cref="T:urakawa.command.IAction"/> that also handles progress
            </summary>
        </member>
        <member name="T:urakawa.progress.ProgressHandler">
            <summary>
            Handles progress
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressHandler.notifyProgress">
            <summary>
            Notifies the handler of progress
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating if the progress was cancelled</returns>
        </member>
        <member name="M:urakawa.progress.ProgressHandler.notifyFinished">
            <summary>
            Notifies the handler that the progress is finished
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressHandler.notifyCancelled">
            <summary>
             Notofies the handler that the progress has been cancelled
            </summary>
        </member>
        <member name="E:urakawa.progress.ProgressHandler.progress">
            <summary>
            Event fired to indicate progress
            </summary>
        </member>
        <member name="E:urakawa.progress.ProgressHandler.finished">
            <summary>
            Event fired to indicate that the progress has finished
            </summary>
        </member>
        <member name="E:urakawa.progress.ProgressHandler.cancelled">
            <summary>
            Event fired to indicate that the progress has been cancelled
            </summary>
        </member>
        <member name="T:urakawa.command.IAction">
            <summary>
            Interface for a generic action, that can be executed and has descriptions
            </summary>
        </member>
        <member name="M:urakawa.command.IAction.canExecute">
            <summary>
            Gets a <c>bool</c> indicating if the <see cref="T:urakawa.command.IAction"/> can execute
            </summary>
            <returns>The <c>bool</c></returns>
        </member>
        <member name="M:urakawa.command.IAction.getLongDescription">
            <summary>
            Get a long uman-readable description of the command
            </summary>
        </member>
        <member name="M:urakawa.command.IAction.execute">
            <summary>
            Execute the command.
            </summary>
            <exception cref="T:urakawa.exception.CannotExecuteException">Thrown when the command cannot be reversed.</exception>
        </member>
        <member name="M:urakawa.command.IAction.getShortDescription">
            <summary>
            Gets a short humanly readable description of the command
            </summary>
        </member>
        <member name="F:urakawa.progress.ProgressAction.mHasCancelBeenRequested">
            <summary>
            Indicates if a request has been made to cancel the action
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressAction.RequestCancel">
            <summary>
            Request that the action be cancelled
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressAction.getCurrentProgress(System.Int64@,System.Int64@)">
            <summary>
            Gets the current and estimated total progress values
            </summary>
            <param name="cur">A <see cref="T:System.Int64"/> in which the current progress is returned</param>
            <param name="tot">A <see cref="T:System.Int64"/> in which the estimated total progress is returned</param>
        </member>
        <member name="M:urakawa.progress.ProgressAction.notifyProgress">
            <summary>
            Notifies the handler of progress
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating if the progress was cancelled</returns>
        </member>
        <member name="M:urakawa.progress.ProgressAction.notifyFinished">
            <summary>
            Notifies the handler that the progress is finished
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressAction.notifyCancelled">
            <summary>
             Notofies the handler that the progress has been cancelled
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressAction.canExecute">
            <summary>
            Gets a <c>bool</c> indicating if the <see cref="T:urakawa.command.IAction"/> can execute
            </summary>
            <returns>The <c>bool</c></returns>
        </member>
        <member name="M:urakawa.progress.ProgressAction.getLongDescription">
            <summary>
            Get a long uman-readable description of the command
            </summary>
        </member>
        <member name="M:urakawa.progress.ProgressAction.execute">
            <summary>
            Execute the command.
            </summary>
            <exception cref="T:urakawa.exception.CannotExecuteException">Thrown when the command cannot be reversed.</exception>
        </member>
        <member name="M:urakawa.progress.ProgressAction.getShortDescription">
            <summary>
            Gets a short humanly readable description of the command
            </summary>
        </member>
        <member name="P:urakawa.progress.ProgressAction.HasCancelBeenRequested">
            <summary>
             Gets a <see cref="T:System.Boolean"/> indicating if a request has been made to cancel the action
            </summary>
        </member>
        <member name="E:urakawa.progress.ProgressAction.progress">
            <summary>
            Event fired to indicate progress
            </summary>
        </member>
        <member name="E:urakawa.progress.ProgressAction.finished">
            <summary>
            Event fired to indicate that the progress has finished
            </summary>
        </member>
        <member name="E:urakawa.progress.ProgressAction.cancelled">
            <summary>
            Event fired to indicate that the progress has been cancelled
            </summary>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.#ctor(System.Uri,urakawa.Project,System.IO.Stream)">
            <summary>
            Constructor explicitly setting the source <see cref="T:System.Xml.XmlReader"/> and the destination <see cref="T:urakawa.Project"/>
            </summary>
            <param name="sourceUri">The <see cref="T:System.Uri"/> of the source file</param>
            <param name="destProj"></param>
            <param name="sourceStream">The source <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.#ctor(System.Uri,urakawa.Project)">
            <summary>
            Constructor explicitly setting the source of the read and the destination <see cref="T:urakawa.Project"/>
            </summary>
            <param name="sourceUri">The <see cref="T:System.Uri"/> of the source file</param>
            <param name="destProj"></param>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.getCurrentProgress(System.Int64@,System.Int64@)">
            <summary>
            Gets the current and estimated total progress values
            </summary>
            <param name="cur">A <see cref="T:System.Int64"/> in which the current progress is returned</param>
            <param name="tot">A <see cref="T:System.Int64"/> in which the estimated total progress is returned</param>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.canExecute">
            <summary>
            Gets a <c>bool</c> indicating if the <see cref="T:urakawa.command.IAction"/> can execute
            </summary>
            <returns>The <c>bool</c></returns>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.getLongDescription">
            <summary>
            Get a long uman-readable description of the command
            </summary>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.execute">
            <summary>
            Execute the command.
            </summary>
            <exception cref="T:urakawa.exception.CannotExecuteException">Thrown when the command cannot be reversed.</exception>
        </member>
        <member name="M:urakawa.xuk.OpenXukAction.getShortDescription">
            <summary>
            Gets a short humanly readable description of the command
            </summary>
        </member>
        <member name="T:urakawa.media.IMediaFactory">
            <summary>
            This is the interface to a factory which creates media objects.
            </summary>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createMedia(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.IMedia"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.media.IMedia"/> or <c>null</c> is the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createAudioMedia">
            <summary>
            Creates an <see cref="T:urakawa.media.IAudioMedia"/> of default type for the factory
            </summary>
            <returns>The created IAudioMeida</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createTextMedia">
            <summary>
            Creates an <see cref="T:urakawa.media.ITextMedia"/> of default type for the factory
            </summary>
            <returns>The created ITextMedia</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createImageMedia">
            <summary>
            Creates an <see cref="T:urakawa.media.IImageMedia"/> of default type for the factory
            </summary>
            <returns>The created IImageMedia</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createVideoMedia">
            <summary>
            Creates an <see cref="T:urakawa.media.IVideoMedia"/> of default type for the factory
            </summary>
            <returns>The created IVideoMedia</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.createSequenceMedia">
            <summary>
            Creates an <see cref="T:urakawa.media.SequenceMedia"/> of default type for the factory
            </summary>
            <returns>The created SequenceMedia</returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>
            </summary>
            <returns>The associated <see cref="T:urakawa.Presentation"/></returns>
        </member>
        <member name="M:urakawa.media.IMediaFactory.setPresentation(urakawa.Presentation)">
            <summary>
            Sets the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>
            </summary>
            <param name="pres">The associated <see cref="T:urakawa.Presentation"/></param>
        </member>
        <member name="T:urakawa.media.ExternalImageMedia">
            <summary>
            ImageMedia is the image object. 
            It has width, height, and an external source.
            </summary>
        </member>
        <member name="T:urakawa.media.ExternalMedia">
            <summary>
            Common abstract base class for external (ie. <see cref="T:urakawa.media.ILocated"/> <see cref="T:urakawa.media.IMedia"/>
            </summary>
        </member>
        <member name="T:urakawa.media.AbstractMedia">
            <summary>
            Abstract implementation of <see cref="T:urakawa.media.IMedia"/> - used as bvase of all <see cref="T:urakawa.media.IMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.media.AbstractMedia.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.media.AbstractMedia.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.media.AbstractMedia.notifyLanguageChanged(urakawa.media.AbstractMedia,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.media.AbstractMedia.languageChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.TextMedia"/> whoose language changed</param>
            <param name="newLang">The new value for the language</param>
            <param name="prevLang">The value for the language prior to the change</param>
        </member>
        <member name="M:urakawa.media.AbstractMedia.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.AbstractMedia.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> associated with the <see cref="T:urakawa.media.AbstractMedia"/> (via. the owning <see cref="T:urakawa.Presentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.isContinuous">
            <summary>
            Determines if the <see cref="T:urakawa.media.AbstractMedia"/> is continuous
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.media.AbstractMedia"/> is continuous</returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.isDiscrete">
            <summary>
            Determines if the <see cref="T:urakawa.media.AbstractMedia"/> is discrete
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.media.AbstractMedia"/> is discrete</returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.isSequence">
            <summary>
            Determines if the <see cref="T:urakawa.media.AbstractMedia"/> is a <see cref="T:urakawa.media.SequenceMedia"/>
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.media.AbstractMedia"/> is a <see cref="T:urakawa.media.SequenceMedia"/></returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.media.AbstractMedia"/>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.copyProtected">
            <summary>
            Creates a copy of the <see cref="T:urakawa.media.AbstractMedia"/>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.export(urakawa.Presentation)">
            <summary>
            Exports the <see cref="T:urakawa.media.AbstractMedia"/> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported <see cref="T:urakawa.media.AbstractMedia"/></returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the <see cref="T:urakawa.media.AbstractMedia"/> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported <see cref="T:urakawa.media.AbstractMedia"/></returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.setLanguage(System.String)">
            <summary>
            Sets the language of the <see cref="T:urakawa.media.AbstractMedia"/>
            </summary>
            <param name="lang">The new language, can be null but not an empty string</param>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown if the new language is an empty <see cref="T:System.String"/></exception>
        </member>
        <member name="M:urakawa.media.AbstractMedia.getLanguage">
            <summary>
            Gets the language of the <see cref="T:urakawa.media.AbstractMedia"/>
            </summary>
            <returns>The language</returns>
        </member>
        <member name="M:urakawa.media.AbstractMedia.clear">
            <summary>
            Clears the data of the <see cref="T:urakawa.media.AbstractMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.media.AbstractMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a AbstractMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.AbstractMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a AbstractMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.AbstractMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Compares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.media.AbstractMedia.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.media.TextMedia"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.media.AbstractMedia.languageChanged">
            <summary>
            Event fired after the language of the <see cref="T:urakawa.media.TextMedia"/> has changed
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalMedia.notifySrcChanged(urakawa.media.ExternalMedia,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.media.ExternalMedia.srcChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.ExternalMedia"/> whoose src value changed</param>
            <param name="newVal">The new src value</param>
            <param name="prevVal">The src value prior to the change</param>
        </member>
        <member name="M:urakawa.media.ExternalMedia.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.media.ExternalMedia"/>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.ExternalMedia.export(urakawa.Presentation)">
            <summary>
            Exports the <see cref="T:urakawa.media.ExternalMedia"/> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported <see cref="T:urakawa.media.ExternalMedia"/></returns>
            <remarks>The current instance is left untouched to the export</remarks>
        </member>
        <member name="M:urakawa.media.ExternalMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the <see cref="T:urakawa.media.ExternalMedia"/> to a given destination <see cref="T:urakawa.Presentation"/>
            - part of a technical solution to have the <see cref="M:urakawa.media.ExternalMedia.export(urakawa.Presentation)"/> method return the correct <see cref="T:System.Type"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported <see cref="T:urakawa.media.ExternalMedia"/></returns>
            <remarks>The current instance is left untouched to the export</remarks>
        </member>
        <member name="M:urakawa.media.ExternalMedia.clear">
            <summary>
            Clears to <see cref="T:urakawa.media.ExternalMedia"/>, resetting the src value
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a ExternalMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.ExternalMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a ExternalMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.ExternalMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Determines if the <see cref="T:urakawa.media.ExternalMedia"/> has the same value as a given other <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating value equality</returns>
        </member>
        <member name="M:urakawa.media.ExternalMedia.getSrc">
            <summary>
            Gets the src value. The default value is "."
            </summary>
            <returns>The src value</returns>
        </member>
        <member name="M:urakawa.media.ExternalMedia.setSrc(System.String)">
            <summary>
            Sets the src value.
            </summary>
            <param name="newSrc">The new src value, can not be <c>null</c> or <see cref="F:System.String.Empty"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newSrc"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown when <paramref name="newSrc"/> is <see cref="F:System.String.Empty"/>
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalMedia.getUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> of the <see cref="T:urakawa.media.ExternalMedia"/> 
            - uses <c>getMediaFactory().getPresentation().getRootUri()</c> as base <see cref="T:System.Uri"/>
            </summary>
            <returns>The <see cref="T:System.Uri"/></returns>
            <exception cref="T:urakawa.exception.InvalidUriException">
            Thrown when the value returned by <see cref="M:urakawa.media.ExternalMedia.getSrc"/> is not a well-formed <see cref="T:System.Uri"/>
            </exception>
        </member>
        <member name="E:urakawa.media.ExternalMedia.srcChanged">
            <summary>
            Event fired after the src has changed
            </summary>
        </member>
        <member name="T:urakawa.media.IImageMedia">
            <summary>
            Represents images which are external media and have a height and width
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.notifySizeChanged(urakawa.media.ExternalImageMedia,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fires the <see cref="E:urakawa.media.ExternalImageMedia.sizeChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.ExternalImageMedia"/> whoose size has changed</param>
            <param name="newHeight">The new height of the <see cref="T:urakawa.media.ExternalImageMedia"/></param>
            <param name="newWidth">The new width of the <see cref="T:urakawa.media.ExternalImageMedia"/></param>
            <param name="prevHeight">The height of the <see cref="T:urakawa.media.ExternalImageMedia"/> prior to the change</param>
            <param name="prevWidth">The width of the <see cref="T:urakawa.media.ExternalImageMedia"/> prior to the change</param>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.#ctor">
            <summary>
            Constructor initializing the <see cref="T:urakawa.media.ExternalImageMedia"/> with <see cref="T:urakawa.media.ISized"/> <c>(0,0)</c>, 
            an empty src <see cref="T:System.String"/> and a given <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.ToString">
            <summary>
            This override is useful while debugging
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the <see cref="T:urakawa.media.ExternalImageMedia"/></returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.isContinuous">
            <summary>
            This always returns <c>false</c>, because
            image media is never considered continuous
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.isDiscrete">
            <summary>
            This always returns <c>true</c>, because
            image media is always considered discrete
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.isSequence">
            <summary>
            This always returns <c>false</c>, because
            a single media object is never considered to be a sequence
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.copy">
            <summary>
            Creates a copy of the <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.export(urakawa.Presentation)">
            <summary>
            Exports <c>this</c> to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The export</returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the external image media to a destination <see cref="T:urakawa.Presentation"/>
            - part of a construct allowing the <see cref="M:urakawa.media.ExternalImageMedia.export(urakawa.Presentation)"/> method to return <see cref="T:urakawa.media.ExternalImageMedia"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external video media</returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.getWidth">
            <summary>
            Return the image width
            </summary>
            <returns>The width</returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.getHeight">
            <summary>
            Return the image height
            </summary>
            <returns>The height</returns>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.setWidth(System.Int32)">
            <summary>
            Sets the image width
            </summary>
            <param name="width">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.setHeight(System.Int32)">
            <summary>
            Sets the image height
            </summary>
            <param name="height">The new height</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.setSize(System.Int32,System.Int32)">
            <summary>
            Sets the image size
            </summary>
            <param name="height">The new height</param>
            <param name="width">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width or height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a ImageMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a ImageMedia xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a ImageMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.ExternalImageMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.media.ExternalImageMedia.sizeChanged">
            <summary>
            Event fired after the size (height or width) of the <see cref="T:urakawa.media.ExternalImageMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.metadata.Metadata">
            <summary>
            Default implementation of 
            </summary>
        </member>
        <member name="M:urakawa.metadata.Metadata.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.metadata.Metadata.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.metadata.Metadata.notifyNameChanged(System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.metadata.Metadata.nameChanged"/> event
            </summary>
            <param name="newName">The new name</param>
            <param name="prevName">The name prior to the change</param>
        </member>
        <member name="M:urakawa.metadata.Metadata.notifyContentChanged(System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.metadata.Metadata.contentChanged"/> event
            </summary>
            <param name="newContent">The new content</param>
            <param name="prevContent">The content prior to the change</param>
        </member>
        <member name="M:urakawa.metadata.Metadata.notifyOptionalAttributeChanged(System.String,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.metadata.Metadata.optionalAttributeChanged"/> event
            </summary>
            <param name="name">The name of the optional attribute</param>
            <param name="newVal">The new value of the optional attribute</param>
            <param name="prevValue">The value of the optional attribute prior to the change</param>
        </member>
        <member name="M:urakawa.metadata.Metadata.#ctor">
            <summary>
            Default constructor, Name, Content and Scheme are initialized to <see cref="F:System.String.Empty"/>
            </summary>
        </member>
        <member name="M:urakawa.metadata.Metadata.getName">
            <summary>
            Gets the name
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.setName(System.String)">
            <summary>
            Sets the name
            </summary>
            <param name="newName">The new name value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newLocalName"/> is null
            </exception>
        </member>
        <member name="M:urakawa.metadata.Metadata.getContent">
            <summary>
            Gets the content
            </summary>
            <returns>The content, or null if none has been set yet.</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.setContent(System.String)">
            <summary>
            Sets the content
            </summary>
            <param name="newContent">The  new content value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newContent"/> is null
            </exception>
        </member>
        <member name="M:urakawa.metadata.Metadata.getOptionalAttributeValue(System.String)">
            <summary>
            Gets the value of a named attribute
            </summary>
            <param name="name">The name of the attribute</param>
            <returns>The value of the attribute - <see cref="F:System.String.Empty"/> if the attribute does not exist</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.setOptionalAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of a named attribute
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="value">The new value for the attribute</param>
        </member>
        <member name="M:urakawa.metadata.Metadata.getOptionalAttributeNames">
            <summary>
            Gets the names of all attributes with non-empty names
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the attribute names</returns>
        </member>
        <member name="M:urakawa.metadata.Metadata.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a Metadata xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.metadata.Metadata.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a Metadata element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.metadata.Metadata.ValueEquals(urakawa.metadata.Metadata)">
            <summary>
            Determines if <c>this</c> is value equal to another given <see cref="T:urakawa.metadata.Metadata"/>
            </summary>
            <param name="other">The other <see cref="T:urakawa.metadata.Metadata"/></param>
            <returns>The result as a <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="E:urakawa.metadata.Metadata.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.metadata.Metadata"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.metadata.Metadata.nameChanged">
            <summary>
            Event fired after the name of the <see cref="T:urakawa.metadata.Metadata"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.metadata.Metadata.contentChanged">
            <summary>
            Event fired after the content of the <see cref="T:urakawa.metadata.Metadata"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.metadata.Metadata.optionalAttributeChanged">
            <summary>
            Event fired after the optional attribute of the <see cref="T:urakawa.metadata.Metadata"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.media.data.audio.PCMDataInfo">
            <summary>
            Represents information describing raw PCM data
            </summary>
        </member>
        <member name="T:urakawa.media.data.audio.PCMFormatInfo">
            <summary>
            Represents information describing a RAW PCM format
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.#ctor(urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">The PCMFormatInfo to copy</param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.#ctor(System.UInt16,System.UInt32,System.UInt16)">
            <summary>
            Constructor initializing the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> with given number of channels, sample rate and bit depth value
            </summary>
            <param name="noc">The given number of channels value</param>
            <param name="sr">The given sample rate value</param>
            <param name="bd">The given bit depth value</param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.copy">
            <summary>
            Create a copy of the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getNumberOfChannels">
            <summary>
            Gets the number of channels of audio
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.setNumberOfChannels(System.UInt16)">
            <summary>
            Sets the number of channels of audio
            </summary>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="newValue"/> is less than <c>1</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getSampleRate">
            <summary>
            Gets the sample rate in Hz of the audio
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.setSampleRate(System.UInt32)">
            <summary>
            Sets the sample rate in Hz of the audio
            </summary>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="newValue"/> is less than <c>1</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getBitDepth">
            <summary>
            Gets the depth in bits of the audio, ie. the size in bits of each sample of audio
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.setBitDepth(System.UInt16)">
            <summary>
            Sets the depth in bits of the audio, ie. the size in bits of each sample of audio
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getByteRate">
            <summary>
            Gets the byte rate of the raw PCM data
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getBlockAlign">
            <summary>
            Gets the size in bytes of a single block (i.e. a sample from each channel)
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.isCompatibleWith(urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Determines if the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> is compatible with a given other <see cref="T:urakawa.media.data.audio.PCMDataInfo"/>
            </summary>
            <param name="pcmInfo">The other PCMDataInfo</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the compatebility</returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getDuration(System.UInt32)">
            <summary>
            Gets the duration of PCM data in the format of a given length
            </summary>
            <param name="dataLen">The length</param>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.getDataLength(urakawa.media.timing.TimeDelta)">
            <summary>
            Gets the PCM data length corresponding to a given duration
            </summary>
            <param name="duration">The given duration</param>
            <returns>The PCM data length</returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a PCMFormatInfo xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a PCMFormatInfo element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMFormatInfo.valueEquals(urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Determines if <c>this</c> has the same value as a given other <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/>
            </summary>
            <param name="other">The given other PCMFormatInfo with which to compare</param>
            <returns>A <see cref="T:System.Boolean"/> indicating value equality</returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.#ctor(urakawa.media.data.audio.PCMDataInfo)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">The PCMDataInfo to copy</param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.#ctor(urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Copy constructor copying from a <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/>, using the default value for data length
            </summary>
            <param name="other">The PCMFormatInfo to copy from</param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.getDataLength">
            <summary>
            Gets the count in bytes of the raw PCM data
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.setDataLength(System.UInt32)">
            <summary>
            Sets the count in bytes of the raw PCM data
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.getDuration">
            <summary>
            Gets the duration of the RAW PCM data
            </summary>
            <returns>The duration as a <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.writeRiffWaveHeader(System.IO.Stream)">
            <summary>
            Writes a RIFF Wave PCM header to a given destination output <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="output">The destination output <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.parseRiffWaveHeader(System.IO.Stream)">
            <summary>
            Parses a RIFF WAVE PCM header of a given input <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            Upon succesful parsing the <paramref name="input"/> <see cref="T:System.IO.Stream"/> is positioned at the beginning of the actual PCM data,
            that is at the beginning of the data field of the data sub-chunk
            </remarks>
            <param name="input">The input <see cref="T:System.IO.Stream"/> - must be positioned at the start of the RIFF chunk</param>
            <returns>A <see cref="T:urakawa.media.data.audio.PCMDataInfo"/> containing the parsed data</returns>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when RIFF WAVE header is invalid or is not PCM data
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.compareStreamData(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Compares the data in two data streams for equality
            </summary>
            <param name="s1">The first </param>
            <param name="s2"></param>
            <param name="length">The length of the data to compare</param>
            <returns>A <see cref="T:System.Boolean"/> indicating data equality</returns>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a PCMDataInfo xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a PCMDataInfo element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.data.audio.PCMDataInfo.valueEquals(urakawa.media.data.audio.PCMDataInfo)">
            <summary>
            Determines if <c>this</c> has the same value as a given other <see cref="T:urakawa.media.data.audio.PCMDataInfo"/>
            </summary>
            <param name="other">The given other PCMDataInfo with which to compare</param>
            <returns>A <see cref="T:System.Boolean"/> indicating value equality</returns>
        </member>
        <member name="T:urakawa.events.undo.TransactionEndedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.undo.UndoRedoManager.transactionEnded"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.undo.TransactionEndedEventArgs.#ctor(urakawa.undo.UndoRedoManager)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/>
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/></param>
        </member>
        <member name="T:urakawa.events.command.CommandAddedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.command.CompositeCommand.commandAdded"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.command.CommandAddedEventArgs.#ctor(urakawa.command.CompositeCommand,urakawa.command.ICommand,System.Int32)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.command.CompositeCommand"/>, the addee <see cref="T:urakawa.command.ICommand"/> 
            and the index at which the addee was added
            </summary>
            <param name="source">The source <see cref="T:urakawa.command.CompositeCommand"/> of the evnent</param>
            <param name="addee">The <see cref="T:urakawa.command.ICommand"/> that was added</param>
            <param name="indx">The index at which the <see cref="T:urakawa.command.ICommand"/> was added</param>
        </member>
        <member name="F:urakawa.events.command.CommandAddedEventArgs.SourceCompositeCommand">
            <summary>
            The source <see cref="T:urakawa.command.CompositeCommand"/> of the evnent
            </summary>
        </member>
        <member name="F:urakawa.events.command.CommandAddedEventArgs.AddedCommand">
            <summary>
            The <see cref="T:urakawa.command.ICommand"/> that was added
            </summary>
        </member>
        <member name="F:urakawa.events.command.CommandAddedEventArgs.Index">
            <summary>
            The index at which the <see cref="T:urakawa.command.ICommand"/> was added
            </summary>
        </member>
        <member name="T:urakawa.events.property.xml.XmlPropertyEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.property.xml.XmlProperty"/> sourced events
            </summary>
        </member>
        <member name="T:urakawa.events.property.PropertyEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.property.Property"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.property.PropertyEventArgs.#ctor(urakawa.property.Property)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.property.Property"/> of the event
            </summary>
            <param name="src">The source <see cref="T:urakawa.property.Property"/> of the event</param>
        </member>
        <member name="F:urakawa.events.property.PropertyEventArgs.SourceProperty">
            <summary>
            The source <see cref="T:urakawa.property.Property"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.property.xml.XmlPropertyEventArgs.#ctor(urakawa.property.xml.XmlProperty)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event
            </summary>
            <param name="src">The source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event</param>
        </member>
        <member name="F:urakawa.events.property.xml.XmlPropertyEventArgs.SourceXmlProperty">
            <summary>
            The source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event
            </summary>
        </member>
        <member name="T:urakawa.events.presentation.RootUriChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.Presentation.rootUriChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.presentation.RootUriChangedEventArgs.#ctor(urakawa.Presentation,System.Uri,System.Uri)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Presentation"/> of the event
            and the new+previous root <see cref="T:System.Uri"/>
            </summary>
            <param name="source">The source <see cref="T:urakawa.Presentation"/> of the event</param>
            <param name="newUriVal">The new <see cref="T:System.Uri"/></param>
            <param name="prevUriVal">The <see cref="T:System.Uri"/> prior to the change</param>
        </member>
        <member name="F:urakawa.events.presentation.RootUriChangedEventArgs.NewUri">
            <summary>
            The new <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="F:urakawa.events.presentation.RootUriChangedEventArgs.PreviousUri">
            <summary>
            The <see cref="T:System.Uri"/> prior to the change
            </summary>
        </member>
        <member name="T:urakawa.events.property.xml.QNameChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.property.xml.XmlProperty.qNameChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.property.xml.QNameChangedEventArgs.#ctor(urakawa.property.xml.XmlProperty,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event
            and the previous+new QName 
            </summary>
            <param name="src">The source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event</param>
            <param name="newLN">The local name part of the new QName</param>
            <param name="newNS">The namespace uri part of the new QName</param>
            <param name="prevLN">The local name part of the QName prior to the change</param>
            <param name="prevNS">The namespace uri part of the QName prior to the change</param>
        </member>
        <member name="F:urakawa.events.property.xml.QNameChangedEventArgs.NewLocalName">
            <summary>
            The local name part of the new QName
            </summary>
        </member>
        <member name="F:urakawa.events.property.xml.QNameChangedEventArgs.NewNamespaceUri">
            <summary>
            The namespace uri part of the new QName
            </summary>
        </member>
        <member name="F:urakawa.events.property.xml.QNameChangedEventArgs.PreviousLocalName">
            <summary>
            The local name part of the QName prior to the change
            </summary>
        </member>
        <member name="F:urakawa.events.property.xml.QNameChangedEventArgs.PreviousNamespaceUri">
            <summary>
            The namespace uri part of the QName prior to the change
            </summary>
        </member>
        <member name="T:urakawa.events.media.data.audio.AudioDataRemovedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.data.audio.AudioMediaData.audioDataRemoved"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.media.data.audio.AudioMediaDataEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.media.data.audio.AudioMediaData"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.audio.AudioMediaDataEventArgs.#ctor(urakawa.media.data.audio.AudioMediaData)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event</param>
        </member>
        <member name="F:urakawa.events.media.data.audio.AudioMediaDataEventArgs.SourceAudioMediaData">
            <summary>
            The source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.audio.AudioDataRemovedEventArgs.#ctor(urakawa.media.data.audio.AudioMediaData,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event,
            the point from which the audio data was removed and the duration of the audio data that was removed
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event</param>
            <param name="fromPoint">The point from which the audio data was removed</param>
            <param name="dur">The duration of the audio data that was removed</param>
        </member>
        <member name="F:urakawa.events.media.data.audio.AudioDataRemovedEventArgs.RemovedFromPoint">
            <summary>
            The point from which the audio data was removed
            </summary>
        </member>
        <member name="F:urakawa.events.media.data.audio.AudioDataRemovedEventArgs.Duration">
            <summary>
            The duration of the audio data that was removed
            </summary>
        </member>
        <member name="T:urakawa.exception.NodeIsSelfException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeIsSelfException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeIsSelfException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsInvalidException">
            <summary>
            Abstract class to encapsulate errors related to wrong values for method parameters.
            This class cannot be instanciated and should be sub-classed.
            The aim is to avoid situations where values that are potentially
            detrimental to software integrity are silently ignored, or "swallowed".
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsInvalidException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.InputStreamsOpenException">
            <summary>
            Thrown when trying to open an output <see cref="T:System.IO.Stream"/>
            from a <see cref="T:urakawa.media.data.IDataProvider"/> 
            while one or more input <see cref="T:System.IO.Stream"/>s are open
            </summary>
        </member>
        <member name="M:urakawa.exception.InputStreamsOpenException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.InputStreamsOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.property.xml.XmlPropertyElementNameVisitor">
            <summary>
            Summary description for XmlPropertyElementNameVisitor.
            </summary>
        </member>
        <member name="T:urakawa.core.visitor.ITreeNodeVisitor">
            <summary>
            Interface for a visitor accepted by <see cref="T:urakawa.core.TreeNode"/>s
            </summary>
        </member>
        <member name="M:urakawa.core.visitor.ITreeNodeVisitor.preVisit(urakawa.core.TreeNode)">
            <summary>
            Called before visiting the child <see cref="T:urakawa.core.TreeNode"/>s
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> currently being visited</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the child <see cref="T:urakawa.core.TreeNode"/>s should be visited:
            If <c>true</c> is returned, the children are visited, 
            if <c>false</c> is returned, the children are not visited</returns>
        </member>
        <member name="M:urakawa.core.visitor.ITreeNodeVisitor.postVisit(urakawa.core.TreeNode)">
            <summary>
            Called after visiting the child <see cref="T:urakawa.core.TreeNode"/>s
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> currently being visited</param>
        </member>
        <member name="M:urakawa.property.xml.XmlPropertyElementNameVisitor.#ctor">
            <summary>
            The constructor
            </summary>
        </member>
        <member name="M:urakawa.property.xml.XmlPropertyElementNameVisitor.setXmlPropertyType(System.Type)">
            <summary>
            Sets the <see cref="T:System.Type"/> of the <see cref="T:urakawa.property.xml.XmlProperty"/> to inspect upon visitation
            </summary>
            <param name="newType">The <see cref="T:System.Type"/> - must implement <see cref="T:urakawa.property.xml.XmlProperty"/></param>
        </member>
        <member name="M:urakawa.property.xml.XmlPropertyElementNameVisitor.addElementName(System.String,System.String)">
            <summary>
            Add an element localName to the collection of search terms.  
            The search terms should be considered an "OR"-list.
            </summary>
            <param name="localName">The local localName part of the element localName</param>
            <param name="namespaceUri">The namespace uri part of the element localName</param>
        </member>
        <member name="M:urakawa.property.xml.XmlPropertyElementNameVisitor.getResults">
            <summary>
            Get the results of the tree visit to see if any nodes were found
            whose XML property matched the search request.
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlPropertyElementNameVisitor.preVisit(urakawa.core.TreeNode)">
            <summary>
            Look at the current node and see if it has an <see cref="T:urakawa.property.xml.XmlProperty"/> 
            that is interesting to us.  if so, add it to our internal list.
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> bwing visited</param>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.property.xml.XmlPropertyElementNameVisitor.postVisit(urakawa.core.TreeNode)">
            <summary>
            This visitor does nothing post-visit
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> being visited</param>
        </member>
        <member name="T:urakawa.media.SequenceMedia">
            <summary>
            SequenceMedia is a collection of same-type media objects
            The first object in the collection determines the collection's type.
            </summary>
        </member>
        <member name="M:urakawa.media.SequenceMedia.#ctor">
            <summary>
            Constructor setting the associated <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="fact"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getItem(System.Int32)">
            <summary>
            Get the item at the given index
            </summary>
            <param name="index">Index of the item to return</param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> item at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.insertItem(System.Int32,urakawa.media.IMedia)">
            <summary>
            Inserts a given <see cref="T:urakawa.media.IMedia"/> item at a given index
            </summary>
            <param name="index">The given index</param>
            <param name="newItem">The given <see cref="T:urakawa.media.IMedia"/> item</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given <see cref="T:urakawa.media.IMedia"/> to insert is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
            <exception cref="T:urakawa.exception.MediaNotAcceptable">
            Thrown if the <see cref="T:urakawa.media.SequenceMedia"/> can not accept the media
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.appendItem(urakawa.media.IMedia)">
            <summary>
            Appends a new <see cref="T:urakawa.media.IMedia"/> item to the end of the sequence
            </summary>
            <param name="newItem">The new item</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given <see cref="T:urakawa.media.IMedia"/> to insert is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MediaNotAcceptable">
            Thrown if the <see cref="T:urakawa.media.SequenceMedia"/> can not accept the media
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.removeItem(System.Int32)">
            <summary>
            Remove an item from the sequence.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed <see cref="T:urakawa.media.IMedia"/> item</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given index is out of bounds
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.removeItem(urakawa.media.IMedia)">
            <summary>
            Removes a given <see cref="T:urakawa.media.IMedia"/> item from the sequence
            </summary>
            <param name="item">The item</param>
            <exception cref="T:urakawa.exception.MediaNotInSequenceException">
            Thrown when the given item is not part of the sequence
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getCount">
            <summary>
            Return the number of items in the sequence.
            </summary>
            <returns>The number of items</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getListOfItems">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.IMedia"/> items in the sequence
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.getAllowMultipleTypes">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if multiple <see cref="T:urakawa.media.IMedia"/> types are allowed in the sequence
            </summary>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.setAllowMultipleTypes(System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> indicating if multiple <see cref="T:urakawa.media.IMedia"/> types are allowed in the sequence
            </summary>
            <param name="newValue">The new <see cref="T:System.Boolean"/> value</param>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isContinuous">
            <summary>
            Use the first item in the collection to determine if this sequence is continuous or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isDiscrete">
            <summary>
            Use the first item in the collection to determine if this 
            sequence is discrete or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.isSequence">
            <summary>
            This function always returns true, because this 
            object is always considered to be a sequence (even if it contains only one item).
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.copy">
            <summary>
            Make a copy of this media sequence
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.copyProtected">
            <summary>
            Make a copy of this media sequence
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.export(urakawa.Presentation)">
            <summary>
            Exports the sequence media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported sequence media</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the sequence media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported sequence media</returns>
        </member>
        <member name="M:urakawa.media.SequenceMedia.canAcceptMedia(urakawa.media.IMedia)">
            <summary>
            Test a new media object to see if it can belong to this collection 
            (optionally a sequence can allow only a single <see cref="T:System.Type"/> of <see cref="T:urakawa.media.IMedia"/>)
            </summary>
            <param name="proposedAddition">The media to test</param>
            <returns></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the proposed addition is null
            </exception>
        </member>
        <member name="M:urakawa.media.SequenceMedia.clear">
            <summary>
            Clears/resets the <see cref="T:urakawa.media.SequenceMedia"/> 
            </summary>
        </member>
        <member name="M:urakawa.media.SequenceMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a SequenceMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.SequenceMedia.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a SequenceMedia xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.SequenceMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a SequenceMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.SequenceMedia.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a SequenceMedia element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.SequenceMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="T:urakawa.ToolkitSettings">
            <summary>
            Provides a place holder for toolkit wide settings - class is not instanciable
            </summary>
        </member>
        <member name="F:urakawa.ToolkitSettings.XUK_NS">
            <summary>
            Default namespace of XUK files
            </summary>
        </member>
        <member name="F:urakawa.ToolkitSettings.XUK_XSD_PATH">
            <summary>
            Path of XUK Xml-Schema - leaving this member empty will produce XUK files with no schema location
            </summary>
        </member>
        <member name="T:urakawa.property.xml.IXmlPropertyFactory">
            <summary>
            <see cref="T:urakawa.property.PropertyFactory"/> that supports creation of <see cref="T:urakawa.property.xml.XmlProperty"/>s 
            and <see cref="T:urakawa.property.xml.XmlAttribute"/>s
            </summary>
        </member>
        <member name="M:urakawa.property.xml.IXmlPropertyFactory.createXmlProperty">
            <summary>
            Creates a <see cref="T:urakawa.property.xml.XmlProperty"/> of default type
            </summary>
            <returns>The created <see cref="T:urakawa.property.xml.XmlProperty"/></returns>
        </member>
        <member name="M:urakawa.property.xml.IXmlPropertyFactory.createXmlAttribute">
            <summary>
            Creates a <see cref="T:urakawa.property.xml.XmlAttribute"/> of default type
            with a given parent <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
            <returns>The created <see cref="T:urakawa.property.xml.XmlAttribute"/></returns>
        </member>
        <member name="M:urakawa.property.xml.IXmlPropertyFactory.createXmlAttribute(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.xml.XmlAttribute"/> of type matching a given QName 
            with a given parent <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
            <param name="localName">The local localName part of the given QName</param>
            <param name="namespaceUri">The namespace uri part of the given QName</param>
            <returns>The created <see cref="T:urakawa.property.xml.XmlAttribute"/>, <c>null</c> if the given QName is not recognized</returns>
        </member>
        <member name="T:urakawa.property.channel.ChannelsProperty">
            <summary>
            Default implementation of <see cref="T:urakawa.property.channel.ChannelsProperty"/>
            </summary>
        </member>
        <member name="T:urakawa.property.Property">
            <summary>
            Implementation of <see cref="T:urakawa.property.Property"/> that in it self does nothing. 
            This class is intended as a base class for built-in or custom implementations of <see cref="T:urakawa.property.Property"/>
            </summary>
        </member>
        <member name="M:urakawa.property.Property.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.property.Property.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.property.Property.#ctor">
            <summary>
            Default constructor - should only be used from subclass constructors or <see cref="T:urakawa.property.IGenericPropertyFactory"/>s
            </summary>
        </member>
        <member name="M:urakawa.property.Property.getPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.property.PropertyFactory"/> associated with the <see cref="T:urakawa.property.Property"/> (via. it's owning <see cref="T:urakawa.Presentation"/>
            </summary>
            <returns>The <see cref="T:urakawa.property.PropertyFactory"/></returns>
        </member>
        <member name="M:urakawa.property.Property.canBeAddedTo(urakawa.core.TreeNode)">
            <summary>
            Tests if a the <see cref="T:urakawa.property.Property"/> can be validly added to a given potential owning <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="potentialOwner">The potential new owner</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the property can be added</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="potentialOwner"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.property.Property.copy">
            <summary>
            Creates a copy of the property
            </summary>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown if the property has not been initialized with an owning <see cref="T:urakawa.core.TreeNode"/>
            </exception>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown if the <see cref="T:urakawa.property.IGenericPropertyFactory"/> associated with the property via. it's owning <see cref="T:urakawa.core.TreeNode"/>
            can not create an <see cref="T:urakawa.property.Property"/> mathcing the Xuk QName of <c>this</c>
            </exception>
            <remarks>
            In subclasses of <see cref="T:urakawa.property.Property"/> the implementor should override <see cref="M:urakawa.property.Property.copyProtected"/> and if the impelemntor
            wants the copy method of his subclass to have "correct" type he should create a new version of <see cref="M:urakawa.property.Property.copy"/> 
            that delegates the copy operation to <see cref="M:urakawa.property.Property.copyProtected"/> followed by type casting. 
            See <see cref="M:urakawa.property.xml.XmlProperty.copy"/>
            and <see cref="M:urakawa.property.xml.XmlProperty.copyProtected"/> for an example of this.
            </remarks>
        </member>
        <member name="M:urakawa.property.Property.copyProtected">
            <summary>
            Protected version of <see cref="M:urakawa.property.Property.copy"/>. Override this method in subclasses to copy additional data
            </summary>
            <returns>A copy of <c>this</c></returns>
        </member>
        <member name="M:urakawa.property.Property.export(urakawa.Presentation)">
            <summary>
            Gets a property with identical content to this but compatible with a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported property</returns>
        </member>
        <member name="M:urakawa.property.Property.exportProtected(urakawa.Presentation)">
            <summary>
            Gets a property with identical content to this but compatible with a given destination <see cref="T:urakawa.Presentation"/>.
            Override this method in subclasses to export additional data
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported property</returns>
        </member>
        <member name="M:urakawa.property.Property.getTreeNodeOwner">
            <summary>
            Gets the owner <see cref="T:urakawa.core.TreeNode"/> of the property
            </summary>
            <returns>The owner</returns>
        </member>
        <member name="M:urakawa.property.Property.setTreeNodeOwner(urakawa.core.TreeNode)">
            <summary>
            Sets the owner <see cref="T:urakawa.core.TreeNode"/> of the property - for internal use only
            </summary>
            <param name="newOwner">The new owner</param>
            <exception cref="T:urakawa.exception.PropertyAlreadyHasOwnerException">
            Thrown when the setting the new owner to a non-<c>null</c> value 
            and the property already has a different owning <see cref="T:urakawa.core.TreeNode"/>
            </exception>
        </member>
        <member name="M:urakawa.property.Property.valueEquals(urakawa.property.Property)">
            <summary>
            Determines if a given other <see cref="T:urakawa.property.Property"/> has the same value as <c>this</c>
            </summary>
            <param name="other">The other property</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the value equality</returns>
        </member>
        <member name="E:urakawa.property.Property.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.property.Property"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.notifyChannelMediaMapOccured(urakawa.property.channel.ChannelsProperty,urakawa.property.channel.Channel,urakawa.media.IMedia,urakawa.media.IMedia)">
            <summary>
            Fires the <see cref="E:urakawa.property.channel.ChannelsProperty.channelMediaMapOccured"/>
            </summary>
            <param name="src">The source, that is the <see cref="T:urakawa.property.channel.ChannelsProperty"/> at which the mapping occured</param>
            <param name="destChannel">The destination <see cref="T:urakawa.property.channel.Channel"/> of the mapping</param>
            <param name="mappedMedia">The <see cref="T:urakawa.media.IMedia"/> that is now mapped to the <see cref="T:urakawa.property.channel.Channel"/> - may be <c>null</c></param>
            <param name="prevMedia">The <see cref="T:urakawa.media.IMedia"/> was mapped to the <see cref="T:urakawa.property.channel.Channel"/> before - may be <c>null</c></param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.#ctor(System.Collections.Generic.IDictionary{urakawa.property.channel.Channel,urakawa.media.IMedia})">
            <summary>
            Constructor using a given <see cref="T:System.Collections.Generic.IDictionary`2"/> for channels to media mapping
            </summary>
            <param name="chToMediaMapper">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> used to map channels and media</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="potentialOwner"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.#ctor">
            <summary>
            Constructor using a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            for mapping channels to media
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.canBeAddedTo(urakawa.core.TreeNode)">
            <summary>
            Tests if the channels property can be added to a given potential owning <see cref="T:urakawa.core.TreeNode"/>, 
            which it can if the potential new owner does not already have a channels property
            </summary>
            <param name="potentialOwner">The potential new owner</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the property can be added</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="potentialOwner"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.getMedia(urakawa.property.channel.Channel)">
            <summary>
            Retrieves the <see cref="T:urakawa.media.IMedia"/> of a given <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <param name="channel">The given <see cref="T:urakawa.property.channel.Channel"/></param>
            <returns>The <see cref="T:urakawa.media.IMedia"/> associated with the given channel, 
            <c>null</c> if no <see cref="T:urakawa.media.IMedia"/> is associated</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not managed by the associated <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.setMedia(urakawa.property.channel.Channel,urakawa.media.IMedia)">
            <summary>
            Associates a given <see cref="T:urakawa.media.IMedia"/> with a given <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <param name="channel">The given <see cref="T:urakawa.property.channel.Channel"/></param>
            <param name="media">The given <see cref="T:urakawa.media.IMedia"/>, 
            pass <c>null</c> if you want to remove <see cref="T:urakawa.media.IMedia"/>
            from the given <see cref="T:urakawa.property.channel.Channel"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not managed by the associated <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </exception>
            <exception cref="T:urakawa.exception.MediaNotAcceptable">
            Thrown when <paramref localName="channel"/> does not accept the given <see cref="T:urakawa.media.IMedia"/>,
            see <see cref="M:urakawa.property.channel.Channel.canAccept(urakawa.media.IMedia)"/> for more information.
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.getListOfUsedChannels">
            <summary>
            Gets the list of <see cref="T:urakawa.property.channel.Channel"/>s used by this instance of <see cref="T:urakawa.property.channel.ChannelsProperty"/>
            </summary>
            <returns>The list of used <see cref="T:urakawa.property.channel.Channel"/>s</returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.copy">
            <summary>
            Creates a "deep" copy of the <see cref="T:urakawa.property.channel.ChannelsProperty"/> instance 
            - deep meaning that all associated <see cref="T:urakawa.media.IMedia"/> are copies and not just referenced
            </summary>
            <returns>The deep copy</returns>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown when the <see cref="T:urakawa.property.channel.IChannelsPropertyFactory"/> of the <see cref="T:urakawa.Presentation"/>
            associated with <see langword="this"/> can not create a <see cref="T:urakawa.property.channel.ChannelsProperty"/> or sub-type
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.copyProtected">
            <summary>
            Creates a "deep" copy of the <see cref="T:urakawa.property.channel.ChannelsProperty"/> instance 
            - deep meaning that all associated are copies and not just referenced
            </summary>
            <returns>The deep copy</returns>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown when the <see cref="T:urakawa.property.channel.IChannelsPropertyFactory"/> of the <see cref="T:urakawa.Presentation"/>
            associated with <c>this</c> can not create a <see cref="T:urakawa.property.channel.ChannelsProperty"/> or sub-type
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.export(urakawa.Presentation)">
            <summary>
            Exports the channels property to a given destination <see cref="T:urakawa.Presentation"/>, 
            including exports of any attachedx <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <param name="destPres">Thre destination presentation of the export</param>
            <returns>The exported channels property</returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the channels property to a given destination <see cref="T:urakawa.Presentation"/>, 
            including exports of any attachedx <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <param name="destPres">Thre destination presentation of the export</param>
            <returns>The exported channels property</returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a ChannelsProperty xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a ChannelsProperty xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the child was succefully read</returns>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.xukInChannelMappings(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Helper method to to Xuk in mChannelMappings element
            </summary>
            <param name="source"></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.xukInChannelMapping(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            helper method which is called once per mChannelMapping element
            </summary>
            <param name="source"></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a ChannelsProperty element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsProperty.valueEquals(urakawa.property.Property)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.property.Property"/> for value equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.property.Property"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.property.channel.ChannelsProperty.channelMediaMapOccured">
            <summary>
            Event fired after a <see cref="T:urakawa.media.IMedia"/> is mapped to a <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
        </member>
        <member name="T:urakawa.property.channel.ChannelsManager">
            <summary>
            Default implementation of <see cref="T:urakawa.property.channel.ChannelsManager"/>
            Can only manage channels that inherit <see cref="T:urakawa.property.channel.Channel"/>
            TODO: Check XUKIn/xukOut implementation
            </summary>
        </member>
        <member name="F:urakawa.property.channel.ChannelsManager.mChannels">
            <summary>
            A dictionary of the <see cref="T:urakawa.property.channel.Channel"/>s managed by the manager, sorted by their uid
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.getChannelFactory">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.ChannelsManager"/> associated with <c>this</c>.
            Convenience for <c>getPresentation().getChannelFactory()</c>
            </summary>
            <returns>The <see cref="T:urakawa.property.channel.ChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.addChannel(urakawa.property.channel.Channel)">
            <summary>
            Adds an existing  <see cref="T:urakawa.property.channel.Channel"/> to the list of <see cref="T:urakawa.property.channel.Channel"/>s 
            managed by the <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </summary>
            <param name="channel">The <see cref="T:urakawa.property.channel.Channel"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelAlreadyExistsException">
            Thrown when <paramref localName="channel"/> is already in the managers list of channels
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.addChannel(urakawa.property.channel.Channel,System.String)">
            <summary>
            Adds an existing  <see cref="T:urakawa.property.channel.Channel"/> to the list of <see cref="T:urakawa.property.channel.Channel"/>s 
            managed by the <see cref="T:urakawa.property.channel.ChannelsManager"/> with a given UID
            </summary>
            <param name="channel">The <see cref="T:urakawa.property.channel.Channel"/> to add</param>
            <param name="uid">The UID assigned to the added channel</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="channel"/> or <paramref name="uid"/> are <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown when <paramref name="uid"/> is an empty string</exception>
            <exception cref="T:urakawa.exception.ChannelAlreadyExistsException">
            Thrown when <paramref name="channel"/> is already in the managers list of channels
            or when another channel exists with the given uid.
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.removeChannel(urakawa.property.channel.Channel)">
            <summary>
            Removes an <see cref="T:urakawa.property.channel.Channel"/> from the manager
            </summary>
            <param name="channel">The <see cref="T:urakawa.property.channel.Channel"/> to remove</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="channel"/> is null
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="channel"/> is not in the managers list of channels
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.removeChannel(System.String)">
            <summary>
            Removes an <see cref="T:urakawa.property.channel.Channel"/> from the manager by uid
            </summary>
            <param name="uid">The uid of the <see cref="T:urakawa.property.channel.Channel"/> to remove</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="uid"/> is null
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown when <paramref localName="uid"/> is an empty string
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <paramref localName="uid"/> is the uid of any managed channel
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.getListOfChannels">
            <summary>
            Gets a lists of the <see cref="T:urakawa.property.channel.Channel"/>s managed by the <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.getListOfUids">
            <summary>
            Gets a list of the uids of <see cref="T:urakawa.property.channel.Channel"/>s managed by the <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.getChannel(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.Channel"/> with a given xuk uid
            </summary>
            <param name="uid">The given xuk uid</param>
            <returns>The <see cref="T:urakawa.property.channel.Channel"/> with the given xuk uid</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsEmptyStringException">
            Thrown when <paramref name="uid"/> is an empty string
            </exception>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when <c>this</c> does not manage a <see cref="T:urakawa.property.channel.Channel"/> with the given xuk uid
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.getUidOfChannel(urakawa.property.channel.Channel)">
            <summary>
            Gets the Xuk id of a given channel
            </summary>
            <param name="ch">The given channel</param>
            <returns>The Xuk uid of the given channel</returns>
            <exception cref="T:urakawa.exception.ChannelDoesNotExistException">
            Thrown when the given channel is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.clearChannels">
            <summary>
            Removes all <see cref="T:urakawa.property.channel.Channel"/>s from the manager
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.getListOfChannels(System.String)">
            <summary>
            this is a helper function for getting one or more channels by its localName
            </summary>
            <param name="channelName">The localName of the channel to get</param>
            <returns>An array of the </returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.isManagerOf(System.String)">
            <summary>
            Determines if the manager manages a <see cref="T:urakawa.property.channel.Channel"/> with a given uid
            </summary>
            <param name="uid">The given uid</param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the manager manages a <see cref="T:urakawa.property.channel.Channel"/> with the given uid
            </returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.clear">
            <summary>
            Clears the <see cref="T:urakawa.property.channel.ChannelsManager"/>, disassociating any <see cref="T:urakawa.property.channel.Channel"/>s
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a ChannelsManager xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a ChannelsManager element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.channel.ChannelsManager.valueEquals(urakawa.property.channel.ChannelsManager)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="T:urakawa.media.data.MediaDataManager">
            <summary>
            Default implementation of a <see cref="T:urakawa.media.data.MediaDataManager"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataFactory"/> associated with <c>this</c> 
            </summary>
            <returns>The <see cref="T:urakawa.media.data.MediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> associated with <c>this</c> 
            (via. the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>).
            Convenience for <c>getDataProviderManager().getDataProviderFactory()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getDefaultPCMFormat">
            <summary>
            Gets (copy of) the default <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> for <see cref="T:urakawa.media.data.audio.AudioMediaData"/> managed by the manager 
            </summary>
            <returns>The default PCM format</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setDefaultPCMFormat(urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Sets (the value of) the default <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> for <see cref="T:urakawa.media.data.audio.AudioMediaData"/> managed by the manager 
            </summary>
            <param name="newDefault">The new default <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newDefault"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the manager is enforcing single PCM format and a managed <see cref="T:urakawa.media.data.audio.AudioMediaData"/> has a different PCM format
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setDefaultNumberOfChannels(System.UInt16)">
            <summary>
            Sets the number of channels of the default <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> for <see cref="T:urakawa.media.data.audio.AudioMediaData"/> managed by the manager
            </summary>
            <param name="numberOfChannels">The new number of channels</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="numberOfChannels"/> is less than <c>1</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the manager is enforcing single PCM format and a managed <see cref="T:urakawa.media.data.audio.AudioMediaData"/> has a different number of channels
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setDefaultSampleRate(System.UInt32)">
            <summary>
            Sets the sample rate of the default <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> for <see cref="T:urakawa.media.data.audio.AudioMediaData"/> managed by the manager
            </summary>
            <param name="sampleRate">The new  sample rate</param>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the manager is enforcing single PCM format and a managed <see cref="T:urakawa.media.data.audio.AudioMediaData"/> has a different sample rate
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setDefaultBitDepth(System.UInt16)">
            <summary>
            Sets the number of channels of the default <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> for <see cref="T:urakawa.media.data.audio.AudioMediaData"/> managed by the manager
            </summary>
            <param name="bitDepth">The new bit depths</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="bitDepth"/> is less than <c>1</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the manager is enforcing single PCM format and a managed <see cref="T:urakawa.media.data.audio.AudioMediaData"/> has a different bit depth
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setDefaultPCMFormat(System.UInt16,System.UInt32,System.UInt16)">
            <summary>
            Sets the default PCM format by number of channels, sample rate and bit depth
            </summary>
            <param name="numberOfChannels">The number of channels</param>
            <param name="sampleRate">The sample rate</param>
            <param name="bitDepth">The bit depth</param>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getEnforceSinglePCMFormat">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if a single 
            PCMFormat is enforced for all managed <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setEnforceSinglePCMFormat(System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> indicating if a single 
            PCMFormat is enforced for all managed <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getMediaData(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaData"/> with a given UID
            </summary>
            <param name="uid">The given UID</param>
            <returns>The <see cref="T:urakawa.media.data.MediaData"/> with the given UID 
            or <c>null</c> if no such <see cref="T:urakawa.media.data.MediaData"/> exists</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getUidOfMediaData(urakawa.media.data.MediaData)">
            <summary>
            Gets the UID of a given <see cref="T:urakawa.media.data.MediaData"/>
            </summary>
            <param name="data">The given <see cref="T:urakawa.media.data.MediaData"/></param>
            <returns>The UID of <see cref="T:urakawa.media.data.MediaData"/> <paramref name="data"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when <c>this</c> is not the manager of <paramref name="data"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.addMediaData(urakawa.media.data.MediaData)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.MediaData"/> to the <see cref="T:urakawa.media.data.MediaDataManager"/>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.MediaData"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.addMediaData(urakawa.media.data.MediaData,System.String)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.MediaData"/> to the <see cref="T:urakawa.media.data.MediaDataManager"/>, assigning it a given uid
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.MediaData"/> to add</param>
            <param name="uid">The uid to assign to the added <see cref="T:urakawa.media.data.MediaData"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when another <see cref="T:urakawa.media.data.MediaData"/> has the same uid
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.setDataMediaDataUid(urakawa.media.data.MediaData,System.String)">
            <summary>
            Sets the uid of a given managed <see cref="T:urakawa.media.data.MediaData"/> to a given value
            </summary>
            <param name="data">The given <see cref="T:urakawa.media.data.MediaData"/></param>
            <param name="uid">The given uid value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> or <paramref name="uid"/> is <c>null</c> 
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when the manager instance does not manage <paramref name="data"/>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when <paramref name="uid"/> is already the uid of another <see cref="T:urakawa.media.data.MediaData"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.isManagerOf(System.String)">
            <summary>
            Determines if the manager manages a <see cref="T:urakawa.media.data.MediaData"/> with a given uid
            </summary>
            <param name="uid">The given uid</param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the manager manages a <see cref="T:urakawa.media.data.MediaData"/> with the given uid
            </returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.removeMediaData(urakawa.media.data.MediaData)">
            <summary>
            Removes a <see cref="T:urakawa.media.data.MediaData"/> from <c>this</c>
            </summary>
            <param name="data">The <see cref="T:urakawa.media.data.MediaData"/> to remove</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when <paramref name="data"/> is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.removeMediaData(System.String)">
            <summary>
            Removes a <see cref="T:urakawa.media.data.MediaData"/> from <c>this</c>
            </summary>
            <param name="uid">The uid of the <see cref="T:urakawa.media.data.MediaData"/> to remove</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when no managed <see cref="T:urakawa.media.data.MediaData"/> has the given uid
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.copyMediaData(urakawa.media.data.MediaData)">
            <summary>
            Creates a copy of a given media data
            </summary>
            <param name="data">The media data to copy</param>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when <paramref name="data"/> is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.copyMediaData(System.String)">
            <summary>
            Creates a copy of the media data with a given UID
            </summary>
            <param name="uid">The given UID</param>
            <returns>The copy</returns>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when <c>this</c> does not manage a media data with the given UID
            </exception>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getListOfMediaData">
            <summary>
            Gets a list of all <see cref="T:urakawa.media.data.MediaData"/> managed by <c>this</c>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.getListOfUids">
            <summary>
            Gets a list of the uids assigned to <see cref="T:urakawa.media.data.MediaData"/> by the manager
            </summary>
            <returns>The list of uids</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.clear">
            <summary>
            Clears the <see cref="T:urakawa.media.data.MediaDataManager"/> disassociating any linked <see cref="T:urakawa.media.data.MediaData"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a MediaDataManager xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a MediaDataManager xuk element. 
            More specifically the <see cref="T:urakawa.media.data.MediaData"/> managed by <c>this</c>
            is read from the mMediaData child.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a MediaDataManager element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a MediaDataManager element.
            Mode specifically the <see cref="T:urakawa.media.data.MediaData"/> of <c>this</c> is written to a mMediaData element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.data.MediaDataManager.valueEquals(urakawa.media.data.MediaDataManager)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="T:urakawa.media.data.MediaData">
            <summary>
            Abstract implementation of <see cref="T:urakawa.media.data.MediaData"/> that provides the common functionality 
            needed by any implementation of <see cref="T:urakawa.media.data.MediaData"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaData.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.media.data.MediaData.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.media.data.MediaData.notifyNameChanged(urakawa.media.data.MediaData,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.media.data.MediaData.nameChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.data.MediaData"/> whoose name has changed</param>
            <param name="newName">The new name</param>
            <param name="prevName">The name prior to the change</param>
        </member>
        <member name="M:urakawa.media.data.MediaData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaData.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataManager"/> associated with <c>this</c>
            </summary>
            <returns>The assicoated <see cref="T:urakawa.media.data.MediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.getUid">
            <summary>
            Gets the UID of <c>this</c>.
            Convenience for <c><see cref="M:urakawa.media.data.MediaData.getMediaDataManager"/>().<see cref="M:urakawa.media.data.MediaDataManager.getUidOfMediaData(urakawa.media.data.MediaData)"/>(this)</c>
            </summary>
            <returns>The UID</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.getName">
            <summary>
            Gets the name of <c>this</c>
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.setName(System.String)">
            <summary>
            Sets the name of <c>this</c>
            </summary>
            <param name="newName">The new name</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the new name is <c>null</c></exception>
        </member>
        <member name="M:urakawa.media.data.MediaData.getListOfUsedDataProviders">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of the <see cref="T:urakawa.media.data.IDataProvider"/>s used by <c>this</c>
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.delete">
            <summary>
            Deletes the <see cref="T:urakawa.media.data.MediaData"/>, detaching it from it's manager and releasing 
            any <see cref="T:urakawa.media.data.IDataProvider"/>s used
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaData.protectedCopy">
            <summary>
            Part of technical solution to make copy method return correct type. 
            In implementing classes this method should return a copy of the class instances
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.copy">
            <summary>
            Creates a copy of the media data
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.protectedExport(urakawa.Presentation)">
            <summary>
            Part of technical solution to make export method return correct type. 
            In implementing classes this method should return a export of the class instances
            </summary>
            <param name="destPres">The destination presentation of the export</param>
            <returns>The export</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.export(urakawa.Presentation)">
            <summary>
            Exports the media data to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The given destination presentation</param>
            <returns>The exported media data</returns>
        </member>
        <member name="M:urakawa.media.data.MediaData.valueEquals(urakawa.media.data.MediaData)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="E:urakawa.media.data.MediaData.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.media.data.MediaData"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.media.data.MediaData.nameChanged">
            <summary>
            Event fired after the name of the <see cref="T:urakawa.media.IMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.media.data.FileDataProviderFactory">
            <summary>
            Implementation of <see cref="T:urakawa.media.data.IDataProviderFactory"/> that supports the creation of <see cref="T:urakawa.media.data.FileDataProvider"/>s
            </summary>
        </member>
        <member name="T:urakawa.media.data.IDataProviderFactory">
            <summary>
            Interface for a factory creating <see cref="T:urakawa.media.data.IDataProvider"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProviderFactory.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderManager"/> associated with the <see cref="T:urakawa.media.data.IDataProviderFactory"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderFactory.createDataProvider(System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProvider"/> instance of default type for a given MIME type
            </summary>
            <param name="mimeType">The given MIME type</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderFactory.createDataProvider(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProvider"/> instance of type matching a given XUK QName
            for a given MIME type
            </summary>
            <param name="mimeType">The given MIME type</param>
            <param name="xukLocalName">The local name part of the given XUK QName</param>
            <param name="xukNamespaceUri">The namespace uri part of the given XUK QName</param>
            <returns>The created instance</returns>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.AUDIO_MP4_MIME_TYPE">
            <summary>
            MIME type for MPEG-4 AAC audio
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.AUDIO_MP3_MIME_TYPE">
            <summary>
            MIME type for MPEG-1/2 Layer III audio (MP3)
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.AUDIO_WAV_MIME_TYPE">
            <summary>
            MIME type for linear PCM RIFF WAVE format audio (wav)
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.IMAGE_JPG_MIME_TYPE">
            <summary>
            MIME type for JPEG images
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.IMAGE_PNG_MIME_TYPE">
            <summary>
            MIME type for PNG images
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.IMAGE_SVG_MIME_TYPE">
            <summary>
            MIME type for Scalable Vector Graphics (SVG) images
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.STYLE_CSS_MIME_TYPE">
            <summary>
            MIME type for Cascading Style Sheets (CSS)
            </summary>
        </member>
        <member name="F:urakawa.media.data.FileDataProviderFactory.TEXT_PLAIN_MIME_TYPE">
            <summary>
            MIME type for plain text
            </summary>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderFactory.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.FileDataProviderManager"/> that owns the factory 
            and manages the data providers created by the factory
            </summary>
            <returns>The manager</returns>
            <exception cref="T:urakawa.exception.IncompatibleManagerOrFactoryException">
            Thrown when <c>getPresentation().getDataProviderManager()</c> is not a <see cref="T:urakawa.media.data.FileDataProviderManager"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderFactory.getExtensionFromMimeType(System.String)">
            <summary>
            Gets the file extension for a given MIME type
            </summary>
            <param name="mimeType"></param>
            <returns>The extension</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderFactory.createDataProvider(System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.FileDataProvider"/> for the given MIME type
            </summary>
            <param name="mimeType">The given MIME type</param>
            <returns>The created data provider</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderFactory.createFileDataProvider(System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.FileDataProvider"/> for the given MIME type
            </summary>
            <param name="mimeType">The given MIME type</param>
            <returns>The created data provider</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderFactory.createDataProvider(System.String,System.String,System.String)">
            <summary>
            Creates a data provider for the given mime type of type mathcing the given xuk QName
            </summary>
            <param name="mimeType">The given MIME type</param>
            <param name="xukLocalName">The local name part of the given xuk QName</param>
            <param name="xukNamespaceUri">The namespace uri part of the given xuk QName</param>
            <returns>The created data provider</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="xukLocalName"/> or <paramref name="xukNamespaceUri"/> is <c>null</c>
            </exception>
        </member>
        <member name="T:urakawa.property.channel.TextChannel">
            <summary>
            A <see cref="T:urakawa.property.channel.Channel"/> that only accepts <see cref="T:urakawa.media.ITextMedia"/>
            </summary>
        </member>
        <member name="T:urakawa.property.channel.Channel">
            <summary>
            A <see cref="T:urakawa.property.channel.Channel"/> is used to associate <see cref="T:urakawa.media.IMedia"/> 
            with <see cref="T:urakawa.core.TreeNode"/>s via <see cref="T:urakawa.property.channel.ChannelsProperty"/>
            </summary>
        </member>
        <member name="M:urakawa.property.channel.Channel.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.ChannelsManager"/> managing the <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <returns>The <see cref="T:urakawa.property.channel.ChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.isEquivalentTo(urakawa.property.channel.Channel)">
            <summary>
            Determines if the channel is equivalent to a given other channel, 
            possibly from another <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="otherChannel">The given other channel</param>
            <returns>A <see cref="T:System.Boolean"/> indicating equivalence</returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.export(urakawa.Presentation)">
            <summary>
            Exports the channel to a destination <see cref="T:urakawa.Presentation"/>.
            The exported channels has the same name
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported channel</returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the channel to a destination <see cref="T:urakawa.Presentation"/>.
            The exported channels has the same name.
            (protected virtual method, called by public <see cref="M:urakawa.property.channel.Channel.export(urakawa.Presentation)"/> method)
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported channel</returns>
            <remarks>
            In derived classes, this method should be overridden. 
            If one wants the copy method to return the correct sub-type,
            override <see cref="M:urakawa.property.channel.Channel.export(urakawa.Presentation)"/> with the <c>new</c> keyword, making it return <see cref="M:urakawa.property.channel.Channel.exportProtected(urakawa.Presentation)"/>
            </remarks>
        </member>
        <member name="M:urakawa.property.channel.Channel.setName(System.String)">
            <summary>
            Sets the human-readable name of the <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <param name="name">The new human-readable name</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="name"/> is null
            </exception>
        </member>
        <member name="M:urakawa.property.channel.Channel.setLanguage(System.String)">
            <summary>
            Gets the language of the channel
            </summary>
            <param name="lang"></param>
        </member>
        <member name="M:urakawa.property.channel.Channel.getName">
            <summary>
            Gets the human-readable name of the <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <returns>The human-readable name</returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.getLanguage">
            <summary>
            Gets the language of the channel
            </summary>
            <returns>The language</returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.canAccept(urakawa.media.IMedia)">
            <summary>
            Checks of a given <see cref="T:urakawa.media.IMedia"/> is accepted by the channel
            </summary>
            <param name="m">The <see cref="T:urakawa.media.IMedia"/></param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.media.IMedia"/> is accpetable
            </returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.getUid">
            <summary>
            Gets the uid of the <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <returns>The Xuk Uid as calculated by 
            <c>this.getChannelsManager.getUidOfChannel(this)</c></returns>
        </member>
        <member name="M:urakawa.property.channel.Channel.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a Channel xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.property.channel.Channel.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a Channel element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.property.channel.Channel.valueEquals(urakawa.property.channel.Channel)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="M:urakawa.property.channel.TextChannel.canAccept(urakawa.media.IMedia)">
            <summary>
            Determines if a given <see cref="T:urakawa.media.IMedia"/> can be accepted by the channel,
            which it can if it implements interface <see cref="T:urakawa.media.ITextMedia"/>
            </summary>
            <param name="m">The given media</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the given media can be accepted</returns>
        </member>
        <member name="T:urakawa.property.channel.AudioChannel">
            <summary>
            A <see cref="T:urakawa.property.channel.Channel"/> that only accepts <see cref="T:urakawa.media.IAudioMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.property.channel.AudioChannel.canAccept(urakawa.media.IMedia)">
            <summary>
            Determines if a given <see cref="T:urakawa.media.IMedia"/> can be accepted by the channel,
            which it can if it implements interface <see cref="T:urakawa.media.IAudioMedia"/>
            </summary>
            <param name="m">The given media</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the given media can be accepted</returns>
        </member>
        <member name="T:urakawa.events.project.PresentationAddedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.Project.presentationAdded"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.project.ProjectEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.Project"/> sourced event
            </summary>
        </member>
        <member name="M:urakawa.events.project.ProjectEventArgs.#ctor(urakawa.Project)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Project"/> of the evnet
            </summary>
            <param name="source">The source <see cref="T:urakawa.Project"/> of the event</param>
        </member>
        <member name="F:urakawa.events.project.ProjectEventArgs.SourceProject">
            <summary>
            The source <see cref="T:urakawa.Project"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.project.PresentationAddedEventArgs.#ctor(urakawa.Project,urakawa.Presentation)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Project"/> of the event
            and the added <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="source">The source <see cref="T:urakawa.Project"/> of the event</param>
            <param name="addee">The added <see cref="T:urakawa.Presentation"/></param>
        </member>
        <member name="F:urakawa.events.project.PresentationAddedEventArgs.AddedPresentation">
            <summary>
            The added <see cref="T:urakawa.Presentation"/>
            </summary>
        </member>
        <member name="T:urakawa.events.media.data.audio.PCMFormatChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.data.audio.AudioMediaData.pcmFormatChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.audio.PCMFormatChangedEventArgs.#ctor(urakawa.media.data.audio.AudioMediaData,urakawa.media.data.audio.PCMFormatInfo,urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event
            and the previous+new PCMFormat
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event</param>
            <param name="newFormat">The new PCMFormat</param>
            <param name="prevFormat">The PCMFormat prior to the change</param>
        </member>
        <member name="F:urakawa.events.media.data.audio.PCMFormatChangedEventArgs.NewPCMFormat">
            <summary>
            The new PCMFormat
            </summary>
        </member>
        <member name="F:urakawa.events.media.data.audio.PCMFormatChangedEventArgs.PreviousPCMFormat">
            <summary>
            The PCMFormat prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.MediaNotInSequenceException">
            <summary>
            Thrown when an <see cref="T:urakawa.media.IMedia"/> is not part of an <see cref="T:urakawa.media.SequenceMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.exception.MediaNotInSequenceException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MediaNotInSequenceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.events.progress.ProgressEventArgs">
            <summary>
             Arguments for progress events
            </summary>
        </member>
        <member name="M:urakawa.events.progress.ProgressEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
             Constructor initializing the <see cref="F:urakawa.events.progress.ProgressEventArgs.Current"/> and <see cref="F:urakawa.events.progress.ProgressEventArgs.Total"/> field values
            </summary>
            <param name="c">The value for <see cref="F:urakawa.events.progress.ProgressEventArgs.Current"/></param>
            <param name="t">The value for <see cref="F:urakawa.events.progress.ProgressEventArgs.Total"/></param>
        </member>
        <member name="F:urakawa.events.progress.ProgressEventArgs.Current">
            <summary>
            The current progress value
            </summary>
        </member>
        <member name="F:urakawa.events.progress.ProgressEventArgs.Total">
            <summary>
            The estimated total progress value
            </summary>
        </member>
        <member name="T:urakawa.events.progress.FinishedEventArgs">
            <summary>
            mfds
            </summary>
        </member>
        <member name="T:urakawa.media.timing.Time">
            <summary>
            The Time object represents a timestamp.  
            </summary>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor">
            <summary>
            Default constructor initializing the instance to 0
            </summary>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.Int64)">
            <summary>
            Constructor initializing the instance with a given number of milliseconds
            </summary>
            <param name="val">The given number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.Double)">
            <summary>
            Constructor initializing the instance with a given number of milliseconds
            </summary>
            <param name="val">The given number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.TimeSpan)">
            <summary>
            Constructor initializing the instance with a given <see cref="T:System.TimeSpan"/>
            value
            </summary>
            <param name="val">The given <see cref="T:System.TimeSpan"/> value</param>
        </member>
        <member name="M:urakawa.media.timing.Time.#ctor(System.String)">
            <summary>
            Constructor initializing the instance with a given <see cref="T:System.String"/>
            representation of time.
            <see cref="M:urakawa.media.timing.Time.ToString"/> member method of a description of the format 
            of the string representation.
            </summary>
            <param name="val">The <see cref="T:System.String"/> representation</param>
        </member>
        <member name="M:urakawa.media.timing.Time.getTime">
            <summary>
            Returns the <see cref="T:System.TimeSpan"/> equivalent of the instance
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/> equivalent</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.ToString">
            <summary>
            Gets a string representation of the <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <returns>The string representation</returns>
            <remarks>
            The format of the string representation [-][d.]hh:mm:ss[.f],
            where d is a number of days, hh is two-digit hours between 00 and 23,
            mm is two-digit minutes between 00 and 59, 
            ss is two-digit seconds between 00 and 59 
            and where f is the second fraction with between 1 and 7 digits
            </remarks>
        </member>
        <member name="M:urakawa.media.timing.Time.Parse(System.String)">
            <summary>
            Parses a string representation of a <see cref="T:urakawa.media.timing.Time"/>. 
            See <see cref="M:urakawa.media.timing.Time.ToString"/> for a description of the format of the string representation
            </summary>
            <param name="stringRepresentation">The string representation</param>
            <returns>The parsed <see cref="T:urakawa.media.timing.Time"/></returns>
            <exception cref="T:urakawa.exception.TimeStringRepresentationIsInvalidException">
            Thrown then the given string representation is not valid
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isNegativeTimeOffset">
            <summary>
            Determines if the instance represents a negative time value
            </summary>
            <returns><c>true</c> if negative, <c>false</c> else</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.media.timing.Time"/> instance
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeDelta(urakawa.media.timing.Time)">
            <summary>
            Gets the (absolute) <see cref="T:urakawa.media.timing.TimeDelta"/> between a given <see cref="T:urakawa.media.timing.Time"/> and <c>this</c>,
            that is <c>this-<paramref localName="t"/></c>
            </summary>
            <param name="t">The given <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>
            The difference as an <see cref="T:urakawa.media.timing.TimeDelta"/>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="t"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeAsMilliseconds">
            <summary>
            Gets the best approximation of the <see cref="T:urakawa.media.timing.Time"/> in whole milliseconds
            </summary>
            <returns>The number of milliseconds</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeAsMillisecondFloat">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.Time"/> as a floating point millisecond value
            </summary>
            <returns>The foaling point millisecond value</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.getTimeAsTimeSpan">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> equivalent of the <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/> equavalent</returns>
        </member>
        <member name="M:urakawa.media.timing.Time.setTime(System.Int64)">
            <summary>
            Sets the time to a given number of milliseconds
            </summary>
            <param name="newTime">The number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.setTime(System.Double)">
            <summary>
            Sets the time to a given number of milliseconds
            </summary>
            <param name="newTime">The number of milliseconds</param>
        </member>
        <member name="M:urakawa.media.timing.Time.setTime(System.TimeSpan)">
            <summary>
            Sets the time to a given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="newTime">The <see cref="T:System.TimeSpan"/> value</param>
        </member>
        <member name="M:urakawa.media.timing.Time.addTime(urakawa.media.timing.Time)">
            <summary>
            Adds another <see cref="T:urakawa.media.timing.Time"/> to the current <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.timing.Time"/></param>
        </member>
        <member name="M:urakawa.media.timing.Time.addTimeDelta(urakawa.media.timing.TimeDelta)">
            <summary>
            Adds a <see cref="T:urakawa.media.timing.TimeDelta"/> to the current <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="other">The <see cref="T:urakawa.media.timing.TimeDelta"/> to add</param>
        </member>
        <member name="M:urakawa.media.timing.Time.subtractTime(urakawa.media.timing.Time)">
            <summary>
            Subtracts a <see cref="T:urakawa.media.timing.Time"/> from the current <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="other">The <see cref="T:urakawa.media.timing.Time"/> to add</param>
        </member>
        <member name="M:urakawa.media.timing.Time.subtractTimeDelta(urakawa.media.timing.TimeDelta)">
            <summary>
            Subtracts a <see cref="T:urakawa.media.timing.TimeDelta"/> from the current <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="other">The <see cref="T:urakawa.media.timing.TimeDelta"/> to add</param>
        </member>
        <member name="M:urakawa.media.timing.Time.isGreaterThan(urakawa.media.timing.Time)">
            <summary>
            Determines <c>this</c> is greater than a given other <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="otherTime">The other <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isLessThan(urakawa.media.timing.Time)">
            <summary>
            Determines <c>this</c> is less than a given other <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="otherTime">The other <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isEqualTo(urakawa.media.timing.Time)">
            <summary>
            Determines <c>this</c> is equal to a given other <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="otherTime">The other <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isGreaterThanOrEqualTo(urakawa.media.timing.Time)">
            <summary>
            Determines <c>this</c> is greater than or equal to a given other <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="otherTime">The other <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.Time.isLessThanOrEqualTo(urakawa.media.timing.Time)">
            <summary>
            Determines <c>this</c> is less than or equal to a given other <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="otherTime">The other <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="otherTime"/> is <c>null</c>
            </exception>
        </member>
        <member name="P:urakawa.media.timing.Time.Zero">
            <summary>
            Gets a <see cref="T:urakawa.media.timing.Time"/> representing 00:00:00.000
            </summary>
        </member>
        <member name="P:urakawa.media.timing.Time.MaxValue">
            <summary>
            Gets the largest possible value for <see cref="T:urakawa.media.timing.Time"/>
            </summary>
        </member>
        <member name="P:urakawa.media.timing.Time.MinValue">
            <summary>
            Gets the smallest possible value for <see cref="T:urakawa.media.timing.Time"/>
            </summary>
        </member>
        <member name="T:urakawa.core.ITreeNodeWriteOnlyMethods">
            <summary>
            Provides the write-only tree methods of a <see cref="T:urakawa.core.TreeNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.insert(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Inserts a <see cref="T:urakawa.core.TreeNode"/> child at a given index. 
            The index of any children at or after the given index are increased by one
            </summary>
            <param name="node">The new child <see cref="T:urakawa.core.TreeNode"/> to insert,
            must be between 0 and the number of children as returned by member method 
            <see cref="M:urakawa.core.ITreeNodeReadOnlyMethods.getChildCount"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is null</exception>
            <param name="insertIndex">The index at which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="insertIndex"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.ITreeNodeReadOnlyMethods.getChildCount"/>()</c></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.detach">
            <summary>
            Detaches the instance <see cref="T:urakawa.core.TreeNode"/> from it's parent's children
            </summary>
            <returns>The detached <see cref="T:urakawa.core.TreeNode"/> (i.e. <c>this</c>)</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.removeChild(System.Int32)">
            <summary>
            Removes the child at a given index. 
            </summary>
            <param name="index">The given index</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not the index of a child 
            (child indexes range from 0 to <c><see cref="M:urakawa.core.ITreeNodeReadOnlyMethods.getChildCount"/>()-1</c>)
            </exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.removeChild(urakawa.core.TreeNode)">
            <summary>
            Removes a given <see cref="T:urakawa.core.TreeNode"/> child. 
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> child to remove</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.insertBefore(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.TreeNode"/> child before the given child.
            </summary>
            <param name="newChild">The new <see cref="T:urakawa.core.TreeNode"/> child node</param>
            <param name="anchorNode">The child before which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="newChild"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.insertAfter(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.TreeNode"/> child after the given child.
            </summary>
            <param name="newNode">The new <see cref="T:urakawa.core.TreeNode"/> child node</param>
            <param name="anchorNode">The child after which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="newNode"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.replaceChild(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Replaces the child <see cref="T:urakawa.core.TreeNode"/> at a given index with a new <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="node">The new <see cref="T:urakawa.core.TreeNode"/> with which to replace</param>
            <param name="index">The index of the child <see cref="T:urakawa.core.TreeNode"/> to replace</param>
            <returns>The replaced child <see cref="T:urakawa.core.TreeNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when index is out if range, 
            that is when <paramref localName="index"/> is not between 0 
            and <c><see cref="M:urakawa.core.ITreeNodeReadOnlyMethods.getChildCount"/>()-1</c>c&gt;</exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.replaceChild(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Replaces an existing child <see cref="T:urakawa.core.TreeNode"/> with i new one
            </summary>
            <param name="node">The new child with which to replace</param>
            <param name="oldNode">The existing child node to replace</param>
            <returns>The replaced <see cref="T:urakawa.core.TreeNode"/> child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="oldNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="oldNode"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.appendChild(urakawa.core.TreeNode)">
            <summary>
            Appends a child <see cref="T:urakawa.core.TreeNode"/> to the end of the list of children
            </summary>
            <param name="node">The new child to append</param>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.appendChildrenOf(urakawa.core.TreeNode)">
            <summary>
            Appends the children of a given <see cref="T:urakawa.core.TreeNode"/> to <c>this</c>, 
            leaving the given <see cref="T:urakawa.core.TreeNode"/> without children
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.Presentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.swapWith(urakawa.core.TreeNode)">
            <summary>
            Swaps <c>this</c> with a given <see cref="T:urakawa.core.TreeNode"/> 
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.Presentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.splitChildren(System.Int32,System.Boolean)">
            <summary>
            Splits <c>this</c> at the child at a given <paramref localName="index"/>, 
            producing a new <see cref="T:urakawa.core.TreeNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and leaving <c>this</c> with the children at indexes <c>0</c> to <paramref localName="index"/>-1
            </summary>
            <param name="index">The index of the child at which to split</param>
            <param name="copyProperties">
            A <see cref="T:System.Boolean"/> indicating the <see cref="T:urakawa.property.Property"/>s of <c>this</c> 
            should be copied to the new <see cref="T:urakawa.core.TreeNode"/>
            </param>
            <returns>
            The new <see cref="T:urakawa.core.TreeNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and optionally with a copy of the <see cref="T:urakawa.property.Property"/>s
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not between <c>0</c> and <c>getChildCount()-1</c>
            </exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.swapWithPreviousSibling">
            <summary>
            Swaps <c>this</c> with the previous sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no previous sibling).
            </returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeWriteOnlyMethods.swapWithNextSibling">
            <summary>
            Swaps <c>this</c> with the next sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no next sibling).
            </returns>
        </member>
        <member name="T:urakawa.navigation.TypeFilterNavigator`1">
            <summary>
            The <see cref="T:urakawa.navigation.TypeFilterNavigator`1"/> is an concrete implementation of the <see cref="T:urakawa.navigation.AbstractFilterNavigator"/>
            that navigates a virtual forest of trees obtained from a <see cref="T:urakawa.core.TreeNode"/> tree by fintering
            on the basis of <see cref="T:System.Type"/>, more specifically on sub-type of <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <typeparam name="T">The <see cref="T:urakawa.core.TreeNode"/> subclass by which to filter</typeparam>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.isIncluded(urakawa.core.TreeNode)">
            <summary>
            Determines if a given <see cref="T:urakawa.core.TreeNode"/> is included by the filter of the <see cref="T:urakawa.navigation.TypeFilterNavigator`1"/>,
            that is if the given <see cref="T:urakawa.core.TreeNode"/> is a <typeparamref name="T"/>
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> to test</param>
            <returns><c>true</c> if <paramref name="node"/> is a <typeparamref name="T"/>, otherwise <c>false</c></returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getNext(urakawa.core.TreeNode)">
            <summary>
            Gets the next <see cref="T:urakawa.core.TreeNode"/> (or rather <typeparamref name="T"/>) of the filtered forest of trees
            in depth first order, following a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next <typeparamref name="T"/> node or null if no next <typeparamref name="T"/> node exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getPrevious(urakawa.core.TreeNode)">
            <summary>
            Gets the previous <see cref="T:urakawa.core.TreeNode"/> (or rather <typeparamref name="T"/>) of the filtered forest of trees
            in depth first order, preceding a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The previuos <typeparamref name="T"/> node or null if no previous <typeparamref name="T"/> node exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getChild(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Gets the child <see cref="T:urakawa.core.TreeNode"/> (or rather <typeparamref name="T"/>) of the filtered forest of tree
            at a given index of a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <param name="index">The given index</param>
            <returns>
            The child <typeparamref name="T"/> node of <paramref name="context"/> at index <paramref name="i ndex"/>,
            or <c>null</c> if no such child exists
            </returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getNextSibling(urakawa.core.TreeNode)">
            <summary>
            Gets the next sibling <see cref="T:urakawa.core.TreeNode"/> (or rather <typeparamref name="T"/>) in the filtered forest of trees
            of a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next sibling <typeparamref name="T"/> node or <c>null</c> if no next sibling <typeparamref name="T"/> exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getPreviousSibling(urakawa.core.TreeNode)">
            <summary>
            Gets the previous sibling <see cref="T:urakawa.core.TreeNode"/> (or rather <typeparamref name="T"/>) in the filtered forest of trees
            of a given context <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The context <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The next sibling <typeparamref name="T"/> node or <c>null</c> if no next sibling <typeparamref name="T"/> exists</returns>
        </member>
        <member name="M:urakawa.navigation.TypeFilterNavigator`1.getSubForestIterator(urakawa.core.TreeNode)">
            <summary>
            Gets an enumerator enumerating the filtered sub-tree starting at a given start <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="context">The given</param>
            <returns>The enumerator</returns>
        </member>
        <member name="T:urakawa.events.undo.TransactionStartedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.undo.UndoRedoManager.transactionStarted"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.undo.TransactionStartedEventArgs.#ctor(urakawa.undo.UndoRedoManager)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event</param>
        </member>
        <member name="T:urakawa.events.media.ClipChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.IClipped.clipChanged"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.media.MediaEventArgs">
            <summary>
            Base class for arguments for <see cref="T:urakawa.media.IMedia"/> related events
            </summary>
        </member>
        <member name="M:urakawa.events.media.MediaEventArgs.#ctor(urakawa.media.IMedia)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <param name="src">The source</param>
        </member>
        <member name="F:urakawa.events.media.MediaEventArgs.SourceMedia">
            <summary>
            The source <see cref="T:urakawa.media.IMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.events.media.ClipChangedEventArgs.#ctor(urakawa.media.IMedia,urakawa.media.timing.Time,urakawa.media.timing.Time,urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.IMedia"/> of the event and the new+previous clip begin+end <see cref="T:urakawa.media.timing.Time"/>s
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.IMedia"/> of the event</param>
            <param name="newCB">The new clip begin value</param>
            <param name="newCE">The new clip end value</param>
            <param name="prevCB">The clip begin value prior to the change</param>
            <param name="prevCE">The clip end value prior to the change</param>
        </member>
        <member name="F:urakawa.events.media.ClipChangedEventArgs.NewClipBegin">
            <summary>
            The new clip begin value
            </summary>
        </member>
        <member name="F:urakawa.events.media.ClipChangedEventArgs.NewClipEnd">
            <summary>
            The new clip end value
            </summary>
        </member>
        <member name="F:urakawa.events.media.ClipChangedEventArgs.PreviousClipBegin">
            <summary>
            The clip begin value prior to the change
            </summary>
        </member>
        <member name="F:urakawa.events.media.ClipChangedEventArgs.PreviousClipEnd">
            <summary>
            The clip end value prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.XmlAttributeDoesNotExistsException">
            <summary>
            Thrown when trying to remove an <see cref="T:urakawa.property.xml.XmlAttribute"/>
            that does not exists on a <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
        </member>
        <member name="M:urakawa.exception.XmlAttributeDoesNotExistsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.XmlAttributeDoesNotExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.UndoRedoTransactionIsNotStartedException">
            <summary>
            Thrown when an operation is not valid because no undo/redo transaction has been started
            </summary>
        </member>
        <member name="M:urakawa.exception.UndoRedoTransactionIsNotStartedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.UndoRedoTransactionIsNotStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.OperationNotValidException">
            <summary>
            (from the design docs)
            This exception should be thrown/raised when trying to
            call an operation (aka class method) on an object that does not
            allow a specific modification of the state in the current context.
            ...
            Wherever a "canDoXXX()" method can be found, the corresponding operation "doXXX()"
            should use this exception/error to let the user-agent of the API/Toolkit
            know about the non-permitted operation for which there was an attempt to execute.
            </summary>
        </member>
        <member name="T:urakawa.exception.UncheckedException">
            <summary>
            Unchecked exceptions do not require catching and handling
            </summary>
        </member>
        <member name="M:urakawa.exception.UncheckedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.UncheckedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:urakawa.exception.OperationNotValidException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.OperationNotValidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.CannotRedoException">
            <summary>
            Thrown when an operation cannot be redone.
            </summary>
        </member>
        <member name="M:urakawa.exception.CannotRedoException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CannotRedoException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.media.ExternalAudioMedia">
            <summary>
            AudioMedia is the audio object.
            It is time-based and comes from an external source.
            </summary>
        </member>
        <member name="T:urakawa.media.IAudioMedia">
            <summary>
            Interface for audio <see cref="T:urakawa.media.IMedia"/> which is <see cref="T:urakawa.media.IContinuous"/>
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.notifyClipChanged(urakawa.media.ExternalAudioMedia,urakawa.media.timing.Time,urakawa.media.timing.Time,urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Fires the <see cref="E:urakawa.media.ExternalAudioMedia.clipChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.ExternalAudioMedia"/> whoose clip has changed</param>
            <param name="newCB">The new clip begin value</param>
            <param name="newCE">The new clip begin value</param>
            <param name="prevCB">The clip begin value prior to the change</param>
            <param name="prevCE">The clip end value prior to the change</param>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.#ctor">
            <summary>
            Constructor setting the associated <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.isContinuous">
            <summary>
            This always returns true, because
            audio media is always considered continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.isDiscrete">
            <summary>
            This always returns false, because
            audio media is never considered discrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.isSequence">
            <summary>
            This always returns false, because
            a single media object is never considered to be a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.copy">
            <summary>
            Copy function which returns an <see cref="T:urakawa.media.IAudioMedia"/> object
            </summary>
            <returns>A copy of this</returns>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown when the <see cref="T:urakawa.media.IMediaFactory"/> associated with this 
            can not create an <see cref="T:urakawa.media.ExternalAudioMedia"/> matching the QName of <see cref="T:urakawa.media.ExternalAudioMedia"/>
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.export(urakawa.Presentation)">
            <summary>
            Exports the external audio media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external audio media</returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the external audio media to a destination <see cref="T:urakawa.Presentation"/>
            - part of technical construct to have <see cref="M:urakawa.media.ExternalAudioMedia.export(urakawa.Presentation)"/> return <see cref="T:urakawa.media.ExternalAudioMedia"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external audio media</returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a ExternalAudioMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a ExternalAudioMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.xukOutChildren(System.Xml.XmlWriter)">
            <summary>
            Write the child elements of a ExternalAudioMedia element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.getDuration">
            <summary>
            Gets the duration of <c>this</c>
            </summary>
            <returns>A <see cref="T:urakawa.media.timing.TimeDelta"/> representing the duration</returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.getClipBegin">
            <summary>
            Gets the clip begin <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>Clip begin</returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.getClipEnd">
            <summary>
            Gets the clip end <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>Clip end</returns>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.setClipBegin(urakawa.media.timing.Time)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="beginPoint">The new clip begin <see cref="T:urakawa.media.timing.Time"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="beginPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="beginPoint"/> is beyond clip end of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.setClipEnd(urakawa.media.timing.Time)">
            <summary>
            Sets the clip end <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="endPoint">The new clip end <see cref="T:urakawa.media.timing.Time"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="endPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="endPoint"/> is before clip begin of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.split(urakawa.media.timing.Time)">
            <summary>
            Splits <c>this</c> at a given <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="splitPoint">The <see cref="T:urakawa.media.timing.Time"/> at which to split - 
            must be between clip begin and clip end <see cref="T:urakawa.media.timing.Time"/>s</param>
            <returns>
            A newly created <see cref="T:urakawa.media.IAudioMedia"/> containing the audio after,
            <c>this</c> retains the audio before <paramref localName="splitPoint"/>.
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="splitPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="splitPoint"/> is not between clip begin and clip end
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalAudioMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.media.ExternalAudioMedia.clipChanged">
            <summary>
            Event fired after the clip (clip begin or clip end) of the <see cref="T:urakawa.media.ExternalAudioMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.exception.PropertyTypeIsIllegalException">
            <summary>
            This exception should be raised when trying to use a PropertyType that is not legal in the current context.
            </summary>
        </member>
        <member name="M:urakawa.exception.PropertyTypeIsIllegalException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.PropertyTypeIsIllegalException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.PropertyCanNotBeAddedException">
            <summary>
            Thrown when trying to add a <see cref="T:urakawa.property.Property"/> to a <see cref="T:urakawa.core.TreeNode"/>
            that is can not be added to
            </summary>
        </member>
        <member name="M:urakawa.exception.PropertyCanNotBeAddedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.PropertyCanNotBeAddedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.InvalidDataFormatException">
            <summary>
            Thrown when data does not conform to an expected data format,
            eg. when encountering an invalid WAVE header
            </summary>
        </member>
        <member name="M:urakawa.exception.InvalidDataFormatException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.InvalidDataFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.ChannelAlreadyExistsException">
            <summary>
            This exception should be thrown when trying to add a Channel
            whose localName is already used in the list of current channels.
            </summary>
        </member>
        <member name="M:urakawa.exception.ChannelAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.ChannelAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.XmlAttributeDoesNotBelongException">
            <summary>
            Thrown when trying to remove a <see cref="T:urakawa.property.xml.XmlAttribute"/> instance 
            that does not belong to the <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
        </member>
        <member name="M:urakawa.exception.XmlAttributeDoesNotBelongException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.XmlAttributeDoesNotBelongException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.events.media.SrcChangedEventArgs">
            <summary>
            Arguments for event occuring when the <c>src</c> of a <see cref="T:urakawa.media.ExternalMedia"/> has changed
            </summary>
        </member>
        <member name="M:urakawa.events.media.SrcChangedEventArgs.#ctor(urakawa.media.ExternalMedia,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.ExternalMedia"/> and previous+new <c>src</c> values
            </summary>
            <param name="source">The source</param>
            <param name="newSrcVal">The new src value</param>
            <param name="prevSrcVal">The previous src value</param>
        </member>
        <member name="F:urakawa.events.media.SrcChangedEventArgs.SourceExternalMedia">
            <summary>
            The source media
            </summary>
        </member>
        <member name="F:urakawa.events.media.SrcChangedEventArgs.NewSrc">
            <summary>
            The new value of <c>src</c>
            </summary>
        </member>
        <member name="F:urakawa.events.media.SrcChangedEventArgs.PreviousSrc">
            <summary>
            The value of <c>src</c> before the change
            </summary>
        </member>
        <member name="T:urakawa.exception.UndoRedoTransactionHasNotEndedException">
            <summary>
            Thrown when an operation is invalid because is undo/redo transaction is currently active (i.e has not ended)
            </summary>
        </member>
        <member name="M:urakawa.exception.UndoRedoTransactionHasNotEndedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.UndoRedoTransactionHasNotEndedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.TimeOffsetIsNegativeException">
            <summary>
            This exception should be raised when trying to use a time offset that is not allowed to be negative.
            </summary>
        </member>
        <member name="M:urakawa.exception.TimeOffsetIsNegativeException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.TimeOffsetIsNegativeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsWrongTypeException">
            <summary>
            Some methods have stricter type rules than specified by the method signature.
            This exception should be raised when such type rules are broken.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsWrongTypeException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsWrongTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsEmptyStringException">
            <summary>
            Some methods forbid passing empty String values.
             This exception should be thrown when empty String values are passed.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsEmptyStringException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsEmptyStringException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.DataMissingException">
            <summary>
            Thrown when a data file used by an object unexpectedly does not exist
            </summary>
        </member>
        <member name="M:urakawa.exception.DataMissingException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.DataMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.CannotUndoException">
            <summary>
            Thrown when an operation cannot be undone.
            </summary>
        </member>
        <member name="M:urakawa.exception.CannotUndoException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CannotUndoException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.xuk.SaveXukAction">
            <summary>
              Action that opens a xuk file and loads it into a <see cref="T:urakawa.Project"/>
            </summary>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.#ctor(System.Uri,urakawa.Project,System.IO.Stream)">
            <summary>
            Constructor explicitly setting the source <see cref="T:System.Xml.XmlReader"/> and the destination <see cref="T:urakawa.Project"/>
            </summary>
            <param name="destUri">The <see cref="T:System.Uri"/> of the source file</param>
            <param name="sourceProj"></param>
            <param name="destStream">The source <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.#ctor(System.Uri,urakawa.Project)">
            <summary>
            Constructor explicitly setting the source of the read and the destination <see cref="T:urakawa.Project"/>
            </summary>
            <param name="destUri">The <see cref="T:System.Uri"/> of the source file</param>
            <param name="sourceProj"></param>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.getCurrentProgress(System.Int64@,System.Int64@)">
            <summary>
            Gets the current and estimated total progress values
            </summary>
            <param name="cur">A <see cref="T:System.Int64"/> in which the current progress is returned</param>
            <param name="tot">A <see cref="T:System.Int64"/> in which the estimated total progress is returned</param>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.canExecute">
            <summary>
            Gets a <c>bool</c> indicating if the <see cref="T:urakawa.command.IAction"/> can execute
            </summary>
            <returns>The <c>bool</c></returns>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.getLongDescription">
            <summary>
            Get a long uman-readable description of the command
            </summary>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.execute">
            <summary>
            Execute the command.
            </summary>
            <exception cref="T:urakawa.exception.CannotExecuteException">Thrown when the command cannot be reversed.</exception>
        </member>
        <member name="M:urakawa.xuk.SaveXukAction.getShortDescription">
            <summary>
            Gets a short humanly readable description of the command
            </summary>
        </member>
        <member name="T:urakawa.media.timing.TimeDelta">
            <summary>
            TimeDelta is the difference between two timestamps (<see cref="T:urakawa.media.timing.Time"/>s)
            </summary>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor">
            <summary>
            Default constructor, initializes the difference to 0
            </summary>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(urakawa.media.timing.TimeDelta)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.copy">
            <summary>
            Creates a copy of the <see cref="T:urakawa.media.timing.TimeDelta"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(System.Int64)">
            <summary>
            Constructor setting the difference to a given number of milliseconds
            </summary>
            <param name="val">The given number of milliseconds, 
            must not be negative</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(System.Double)">
            <summary>
            Constructor setting the difference to a given millisecond value
            </summary>
            <param name="val">The millisecond valud</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.#ctor(System.TimeSpan)">
            <summary>
            Constructor setting the difference to a given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="val">The given <see cref="T:System.TimeSpan"/> value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.getTimeDeltaAsMilliseconds">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.TimeDelta"/> in milliseconds
            </summary>
            <returns>The number of milliseconds equivalent to the <see cref="T:urakawa.media.timing.TimeDelta"/>
            </returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.getTimeDeltaAsTimeSpan">
            <summary>
            Gets the <see cref="T:urakawa.media.timing.TimeDelta"/> as a <see cref="T:System.TimeSpan"/>
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.setTimeDelta(System.TimeSpan)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.TimeDelta"/> to a given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="newTimeDelta">The given <see cref="T:System.TimeSpan"/> value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.setTimeDelta(System.Double)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.TimeDelta"/> to a given millisecond value
            </summary>
            <param name="timeDeltaAsMSF">The millisecond value</param>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.setTimeDelta(System.Int64)">
            <summary>
            Sets the <see cref="T:urakawa.media.timing.TimeDelta"/> to a given number of milliseconds
            </summary>
            <param name="val">The given number of milliseconds</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown if <paramref localName="val"/> is negative
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.getTimeDeltaAsMillisecondFloat">
            <summary>
            Gets <c>this</c> as a millisecond floating point value
            /// </summary>
            <returns>The millisecond value</returns>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.addTimeDelta(urakawa.media.timing.TimeDelta)">
            <summary>
            Adds another <see cref="T:urakawa.media.timing.TimeDelta"/> to <c>this</c>
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.timing.TimeDelta"/></param>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.isLessThan(urakawa.media.timing.TimeDelta)">
            <summary>
            Determines is <c>this</c> is less than a given other <see cref="T:urakawa.media.timing.TimeDelta"/>.
            </summary>
            <param name="other">The other TimeDelta</param>
            <returns>
            <c>true</c> if <c>this</c> is less than <paramref localName="other"/>, otherwise <c>false</c>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="other"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.isGreaterThan(urakawa.media.timing.TimeDelta)">
            <summary>
            Determines is <c>this</c> is greater than a given other <see cref="T:urakawa.media.timing.TimeDelta"/>.
            </summary>
            <param name="other">The other TimeDelta</param>
            <returns>
            <c>true</c> if <c>this</c> is greater than <paramref localName="other"/>, otherwise <c>false</c>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="other"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.isEqualTo(urakawa.media.timing.TimeDelta)">
            <summary>
            Determines is <c>this</c> is equal to a given other <see cref="T:urakawa.media.timing.TimeDelta"/>.
            </summary>
            <param name="other">The other TimeDelta</param>
            <returns>
            <c>true</c> if <c>this</c> is equal to <paramref localName="other"/>, otherwise <c>false</c>
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="other"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.timing.TimeDelta.ToString">
            <summary>
            Gets a textual representation of the <see cref="T:urakawa.media.timing.TimeDelta"/>
            </summary>
            <returns>The testual representation</returns>
        </member>
        <member name="P:urakawa.media.timing.TimeDelta.Zero">
            <summary>
            Gets a <see cref="T:urakawa.media.timing.TimeDelta"/> representing zero (00:00:00.000000)
            </summary>
        </member>
        <member name="P:urakawa.media.timing.TimeDelta.MaxValue">
            <summary>
            Gets the largest possible value of <see cref="T:urakawa.media.timing.TimeDelta"/>
            </summary>
        </member>
        <member name="T:urakawa.publish.AbstractPublishManagedAudioVisitor">
            <summary>
            An abstract <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/> that publishes <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> 
            from a source <see cref="T:urakawa.property.channel.Channel"/> to a destination <see cref="T:urakawa.property.channel.Channel"/> as <see cref="T:urakawa.media.ExternalAudioMedia"/>.
            In concrete implementations of the abstract visitor, 
            methods <see cref="M:urakawa.publish.AbstractPublishManagedAudioVisitor.treeNodeTriggersNewAudioFile(urakawa.core.TreeNode)"/> and <see cref="M:urakawa.publish.AbstractPublishManagedAudioVisitor.treeNodeMustBeSkipped(urakawa.core.TreeNode)"/> 
            must be implemented to control which <see cref="T:urakawa.core.TreeNode"/>s trigger the generation of a new audio file
            and which <see cref="T:urakawa.core.TreeNode"/>s are skipped.
            After visitation the <see cref="M:urakawa.publish.AbstractPublishManagedAudioVisitor.writeCurrentAudioFile"/> method must be called to ensure that
            the current audio file is written to disk.
            </summary>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.getSourceChannel">
            <summary>
            Gets the source <see cref="T:urakawa.property.channel.Channel"/> from which the <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> to publish is retrieved
            </summary>
            <returns>The source channel</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.setSourceChannel(urakawa.property.channel.Channel)">
            <summary>
            Sets the source <see cref="T:urakawa.property.channel.Channel"/> from which the <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> to publish is retrieved
            </summary>
            <param name="ch">The new source <see cref="T:urakawa.property.channel.Channel"/></param>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.getDestinationChannel">
            <summary>
            Gets the destination <see cref="T:urakawa.property.channel.Channel"/> to which the published audio is added as <see cref="T:urakawa.media.ExternalAudioMedia"/>
            </summary>
            <returns>The destination channel</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.setDestinationChannel(urakawa.property.channel.Channel)">
            <summary>
            Sets the destination <see cref="T:urakawa.property.channel.Channel"/> to which the published audio is added as <see cref="T:urakawa.media.ExternalAudioMedia"/>
            </summary>
            <param name="ch">The new destination <see cref="T:urakawa.property.channel.Channel"/></param>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.getDestinationDirectory">
            <summary>
            Gets the <see cref="T:System.Uri"/> of the destination directory in which the published audio files are created
            </summary>
            <returns>The destination directory <see cref="T:System.Uri"/></returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.setDestinationDirectory(System.Uri)">
            <summary>
            Sets the <see cref="T:System.Uri"/> of the destination directory in which the published audio files are created
            </summary>
            <param name="destDir">The <see cref="T:System.Uri"/> of the new destination directory</param>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.getAudioFileNameFormat">
            <summary>
            Gets the format of the name of the published audio files - format parameter 0 is the number of the audio file (1, 2, ...)
            </summary>
            <returns>The audio file name format</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.getCurrentAudioFileNumber">
            <summary>
            Gets the number of the current audio file
            </summary>
            <returns>The current audio file number</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.resetAudioFileNumbering">
            <summary>
            Resets the audio file numbering, setting the current audio file number to 0. 
            </summary>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.treeNodeTriggersNewAudioFile(urakawa.core.TreeNode)">
            <summary>
            Controls when new audio files are created. In concrete implementations,
            if this method returns <c>true</c> for a given <see cref="T:urakawa.core.TreeNode"/>, 
            this <see cref="T:urakawa.core.TreeNode"/> triggers the creation of a new audio file
            </summary>
            <param name="node">The given node</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the given node triggers a new audio file</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.treeNodeMustBeSkipped(urakawa.core.TreeNode)">
            <summary>
            Controls what <see cref="T:urakawa.core.TreeNode"/> are skipped during publish visitation
            </summary>
            <param name="node">A <see cref="T:urakawa.core.TreeNode"/> to test</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.core.TreeNode"/> should be skipped</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.writeCurrentAudioFile">
            <summary>
            Writes the curently active audio file to disk.
            </summary>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.preVisit(urakawa.core.TreeNode)">
            <summary>
            The pre-visit method does the business logic of publishing the managed audio 
            from the source to the destination <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
            <param name="node">The node being visited</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the children of <paramref name="node"/> should be visited as well</returns>
        </member>
        <member name="M:urakawa.publish.AbstractPublishManagedAudioVisitor.postVisit(urakawa.core.TreeNode)">
            <summary>
            Nothing is done in in post-visit
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="T:urakawa.property.channel.ClearChannelTreeNodeVisitor">
            <summary>
            <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/> for clearing all media within a <see cref="T:urakawa.property.channel.Channel"/>
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ClearChannelTreeNodeVisitor.#ctor(urakawa.property.channel.Channel)">
            <summary>
            Constructor setting the <see cref="T:urakawa.property.channel.Channel"/> to clear
            </summary>
            <param name="chToClear"></param>
        </member>
        <member name="M:urakawa.property.channel.ClearChannelTreeNodeVisitor.preVisit(urakawa.core.TreeNode)">
            <summary>
            Pre-visit action: If <see cref="T:urakawa.media.IMedia"/> is present in <see cref="T:urakawa.property.channel.Channel"/> <see cref="P:urakawa.property.channel.ClearChannelTreeNodeVisitor.ChannelToClear"/>,
            this is removed and the child <see cref="T:urakawa.core.TreeNode"/>s are not visited
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> to visit</param>
            <returns>
            <c>false</c> if <see cref="T:urakawa.media.IMedia"/> is found if <see cref="T:urakawa.property.channel.Channel"/> <see cref="P:urakawa.property.channel.ClearChannelTreeNodeVisitor.ChannelToClear"/>,
            <c>false</c> else
            </returns>
        </member>
        <member name="M:urakawa.property.channel.ClearChannelTreeNodeVisitor.postVisit(urakawa.core.TreeNode)">
            <summary>
            Post-visit action: Nothing is done here
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> to visit</param>
        </member>
        <member name="P:urakawa.property.channel.ClearChannelTreeNodeVisitor.ChannelToClear">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.Channel"/> within which to 
            clear <see cref="T:urakawa.media.IMedia"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.audio.ManagedAudioMedia">
            <summary>
            Managed implementation of <see cref="T:urakawa.media.IAudioMedia"/>, that uses <see cref="T:urakawa.media.data.audio.AudioMediaData"/> to store audio data
            </summary>
        </member>
        <member name="T:urakawa.media.data.IManagedMedia">
            <summary>
            Common interface for <see cref="T:urakawa.media.IMedia"/> that use <see cref="T:urakawa.media.data.MediaData"/> to store their content
            </summary>
        </member>
        <member name="M:urakawa.media.data.IManagedMedia.getMediaData">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaData"/> storing the content
            </summary>
            <returns>The media data</returns>
        </member>
        <member name="M:urakawa.media.data.IManagedMedia.setMediaData(urakawa.media.data.MediaData)">
            <summary>
            Sets the <see cref="T:urakawa.media.data.MediaData"/> storing the content
            </summary>
            <param name="data">The new media data</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="data"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IManagedMedia.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataFactory"/> creating the <see cref="T:urakawa.media.data.MediaData"/>
            used by the <see cref="T:urakawa.media.data.IManagedMedia"/>.
            Convenience for <c>getMediaData().getMediaDataManager().getMediaDataFactory()</c>
            </summary>
            <returns>The media data factory</returns>
        </member>
        <member name="E:urakawa.media.data.IManagedMedia.mediaDataChanged">
            <summary>
            Event fired after the <see cref="T:urakawa.media.data.MediaData"/> of the <see cref="T:urakawa.media.data.IManagedMedia"/> has changed
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.notifyMediaDataChanged(urakawa.media.data.audio.ManagedAudioMedia,urakawa.media.data.audio.AudioMediaData,urakawa.media.data.audio.AudioMediaData)">
            <summary>
            Fires the <see cref="E:urakawa.media.data.audio.ManagedAudioMedia.mediaDataChanged"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> whoose <see cref="T:urakawa.media.data.audio.AudioMediaData"/> has changed
            </param>
            <param name="newData">The new <see cref="T:urakawa.media.data.audio.AudioMediaData"/></param>
            <param name="prevData">The <see cref="T:urakawa.media.data.audio.AudioMediaData"/> prior to the change</param>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.isContinuous">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if <c>this</c> is a continuous <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.isDiscrete">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if <c>this</c> is a discrete <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.isSequence">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if <c>this</c> is a sequence <see cref="T:urakawa.media.IMedia"/>
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.copy">
            <summary>
            Gets a copy of <c>this</c>. 
            The copy is deep in the sense that the underlying <see cref="T:urakawa.media.data.audio.AudioMediaData"/> is also copied
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.copyProtected">
            <summary>
            Gets a copy of <c>this</c>. 
            The copy is deep in the sense that the underlying <see cref="T:urakawa.media.data.audio.AudioMediaData"/> is also copied
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.export(urakawa.Presentation)">
            <summary>
            Exports the external audio media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external audio media</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the external audio media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external audio media</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.copy(urakawa.media.timing.Time)">
            <summary>
            Gets a 'copy' of <c>this</c>, including only the audio after the given clip begin time
            </summary>
            <param name="clipBegin">The given clip begin time</param>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.copy(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Gets a 'copy' of <c>this</c>, including only the audio between the given clip begin and end times
            </summary>
            <param name="clipBegin">The given clip begin time</param>
            <param name="clipEnd">The given clip end time</param>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.clear">
            <summary>
            Clears the <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> setting the underlying <see cref="T:urakawa.media.data.audio.AudioMediaData"/> to <c>null</c>
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a ManagedAudioMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a ManagedAudioMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>		
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.getDuration">
            <summary>
            Gets the duration of <c>this</c>, that is the duration of the underlying <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.split(urakawa.media.timing.Time)">
            <summary>
            Splits the managed audio media at a given split point in time,
            <c>this</c> retaining the audio before the split point,
            creating a new <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> containing the audio after the split point
            </summary>
            <param name="splitPoint">The given split point</param>
            <returns>A managed audio media containing the audio after the split point</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given split point is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given split point is negative or is beyond the duration of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.getMediaData">
            <summary>
            Gets the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> storing the audio of <c>this</c>
            </summary>
            <returns>The audio media data</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.setMediaData(urakawa.media.data.MediaData)">
            <summary>
            Sets the <see cref="T:urakawa.media.data.MediaData"/> of the managed audio media
            </summary>
            <param name="data">The new media data, must be a <see cref="T:urakawa.media.data.audio.AudioMediaData"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsWrongTypeException">
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataFactory"/> creating the <see cref="T:urakawa.media.data.MediaData"/>
            used by <c>this</c>.
            Convenience for <c>getMediaData().getMediaDataManager().getMediaDataFactory()</c>
            </summary>
            <returns>The media data factory</returns>
        </member>
        <member name="M:urakawa.media.data.audio.ManagedAudioMedia.mergeWith(urakawa.media.data.audio.ManagedAudioMedia)">
            <summary>
            Merges <c>this</c> with a given other <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/>,
            appending the audio data of the other <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> to <c>this</c>,
            leaving the other <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> without audio data
            </summary>
            <param name="other">The given other managed audio media</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="other"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the PCM format of <c>this</c> is not compatible with that of <paramref name="other"/>
            </exception>
        </member>
        <member name="E:urakawa.media.data.audio.ManagedAudioMedia.mediaDataChanged">
            <summary>
            Event fired after the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.events.undo.DoneEventArgs">
            <summary>
            Arguments for the <see cref="E:urakawa.undo.UndoRedoManager.commandDone"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.undo.DoneEventArgs.#ctor(urakawa.undo.UndoRedoManager,urakawa.command.ICommand)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/> and the <see cref="T:urakawa.command.ICommand"/> that was done
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/> of the event</param>
            <param name="doneCmd">The <see cref="T:urakawa.command.ICommand"/> that was done</param>
        </member>
        <member name="F:urakawa.events.undo.DoneEventArgs.DoneCommand">
            <summary>
            The <see cref="T:urakawa.command.ICommand"/> that was done
            </summary>
        </member>
        <member name="T:urakawa.events.presentation.MetadataDeletedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.Presentation.metadataDeleted"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.presentation.MetadataDeletedEventArgs.#ctor(urakawa.Presentation,urakawa.metadata.Metadata)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Presentation"/>
            and the <see cref="T:urakawa.metadata.Metadata"/> that was deleted
            </summary>
            <param name="source">The source <see cref="T:urakawa.Presentation"/></param>
            <param name="deletee">The <see cref="T:urakawa.metadata.Metadata"/> that was deleted</param>
        </member>
        <member name="F:urakawa.events.presentation.MetadataDeletedEventArgs.DeletedMetadata">
            <summary>
            The <see cref="T:urakawa.metadata.Metadata"/> that was deleted
            </summary>
        </member>
        <member name="T:urakawa.exception.NodeHasParentException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeHasParentException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeHasParentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeHasNoParentException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeHasNoParentException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeHasNoParentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.CannotReadFromExternalFileException">
            <summary>
            Thrown when an external file can not be read from
            </summary>
        </member>
        <member name="M:urakawa.exception.CannotReadFromExternalFileException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CannotReadFromExternalFileException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.command.ICommand">
            <summary>
            Classes realizing this interface must store the state of the object(s) affected by the command
            execution (including exception/redo). Implementations may choose various techniques suitable in terms
            of performance and memory usage (storage of the transition or the full object snapshot.)
            </summary>
        </member>
        <member name="M:urakawa.command.ICommand.unExecute">
            <summary>
            Execute the reverse command.
            </summary>
            <exception cref="T:urakawa.exception.CannotUndoException">Thrown when the command cannot be reversed.</exception>
        </member>
        <member name="M:urakawa.command.ICommand.canUnExecute">
            <summary>
            True if the command is reversible.
            </summary>
        </member>
        <member name="M:urakawa.command.ICommand.getListOfUsedMediaData">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.data.MediaData"/> used by the Command
            </summary>
            <returns></returns>
        </member>
        <member name="E:urakawa.command.ICommand.executed">
            <summary>
            Event fired after the <see cref="T:urakawa.command.ICommand"/> has been executed
            </summary>
        </member>
        <member name="E:urakawa.command.ICommand.unExecuted">
            <summary>
            Event fired after the <see cref="T:urakawa.command.ICommand"/> has been un-executed
            </summary>
        </member>
        <member name="T:urakawa.core.TreeNodeFactory">
            <summary>
            Default implementation of <see cref="T:urakawa.core.TreeNodeFactory"/>.
            Creates <see cref="T:urakawa.core.TreeNode"/>s belonging to a specific <see cref="T:urakawa.Presentation"/>
            </summary>
            <remarks>
            A <see cref="T:urakawa.core.TreeNodeFactory"/> can not create <see cref="T:urakawa.core.TreeNode"/>s
            until it has been associated with a <see cref="T:urakawa.Presentation"/> using the
            <see cref="M:urakawa.WithPresentation.setPresentation(urakawa.Presentation)"/> method
            </remarks>
        </member>
        <member name="M:urakawa.core.TreeNodeFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.core.TreeNodeFactory.createNode">
            <summary>
            Creates a new <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <returns>The new <see cref="T:urakawa.core.TreeNode"/></returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> of the 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNodeFactory.createNode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:urakawa.core.TreeNode"/> instance of <see cref="T:System.Type"/> matching a given QName
            </summary>
            <param name="localName">The local localName part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.core.TreeNode"/> or <c>null</c> if the QN</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when one of the parameters <paramref localName="localName"/> <paramref name="namespaceUri"/> and  is <c>null</c>
            </exception>
        </member>
        <member name="T:urakawa.events.undo.ReDoneEventArgs">
            <summary>
            Arguments for the <see cref="E:urakawa.undo.UndoRedoManager.commandReDone"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.undo.ReDoneEventArgs.#ctor(urakawa.undo.UndoRedoManager,urakawa.command.ICommand)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/> and the <see cref="T:urakawa.command.ICommand"/> that was re-done
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/></param>
            <param name="reDoneCmd">The <see cref="T:urakawa.command.ICommand"/> that was re-done</param>
        </member>
        <member name="F:urakawa.events.undo.ReDoneEventArgs.ReDoneCommand">
            <summary>
            The <see cref="T:urakawa.command.ICommand"/> that was re-done
            </summary>
        </member>
        <member name="T:urakawa.events.property.channel.ChannelMediaMapEventArgs">
            <summary>
            Arguments for the <see cref="E:urakawa.property.channel.ChannelsProperty.channelMediaMapOccured"/> event
            </summary>
        </member>
        <member name="T:urakawa.events.property.channel.ChannelsPropertyEventArgs">
            <summary>
            Base class arguments of <see cref="T:urakawa.property.channel.ChannelsProperty"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.property.channel.ChannelsPropertyEventArgs.#ctor(urakawa.property.channel.ChannelsProperty)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.property.channel.ChannelsProperty"/> of the event
            </summary>
            <param name="src">The source <see cref="T:urakawa.property.channel.ChannelsProperty"/> of the event</param>
        </member>
        <member name="F:urakawa.events.property.channel.ChannelsPropertyEventArgs.SourceChannelsProperty">
            <summary>
            The source <see cref="T:urakawa.property.channel.ChannelsProperty"/> of the event
            </summary>
        </member>
        <member name="M:urakawa.events.property.channel.ChannelMediaMapEventArgs.#ctor(urakawa.property.channel.ChannelsProperty,urakawa.property.channel.Channel,urakawa.media.IMedia,urakawa.media.IMedia)">
            <summary>
            Constructor setting the fields of the event
            </summary>
            <param name="src">The source of the event</param>
            <param name="destCh">The destination <see cref="T:urakawa.property.channel.Channel"/> of the mapping</param>
            <param name="mapdMedia">The <see cref="T:urakawa.media.IMedia"/> being mapped</param>
            <param name="prevMedia">The <see cref="T:urakawa.media.IMedia"/> previously mapped to the destination <see cref="T:urakawa.property.channel.Channel"/></param>
        </member>
        <member name="F:urakawa.events.property.channel.ChannelMediaMapEventArgs.DestinationChannel">
            <summary>
            The destination <see cref="T:urakawa.property.channel.Channel"/> of the mapping
            </summary>
        </member>
        <member name="F:urakawa.events.property.channel.ChannelMediaMapEventArgs.MappedMedia">
            <summary>
            The <see cref="T:urakawa.media.IMedia"/> being mapped
            - may be <c>null</c>
            </summary>
        </member>
        <member name="F:urakawa.events.property.channel.ChannelMediaMapEventArgs.PreviousMedia">
            <summary>
            The <see cref="T:urakawa.media.IMedia"/> previously mapped to the destination <see cref="T:urakawa.property.channel.Channel"/> 
            - may be <c>null</c>
            </summary>
        </member>
        <member name="T:urakawa.events.media.data.MediaDataEventArgs">
            <summary>
            Base class for arguments of <see cref="T:urakawa.media.data.MediaData"/> sourced events
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.MediaDataEventArgs.#ctor(urakawa.media.data.MediaData)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.MediaData"/> of the event
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.MediaData"/> of the event</param>
        </member>
        <member name="F:urakawa.events.media.data.MediaDataEventArgs.SourceMediaData">
            <summary>
            The source <see cref="T:urakawa.media.data.MediaData"/> of the event
            </summary>
        </member>
        <member name="T:urakawa.exception.TimeStringRepresentationIsInvalidException">
            <summary>
            This exception should be raised when trying to parse an invalid time string representation
            </summary>
        </member>
        <member name="M:urakawa.exception.TimeStringRepresentationIsInvalidException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.TimeStringRepresentationIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeNotDetachedException">
            <summary>
            Exception thrown when trying to insert a node that is not detached
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeNotDetachedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeNotDetachedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MediaNotAcceptable">
            <summary>
            This exception should be raised when trying to use a MediaType that is not legal in the current context.
            </summary>
        </member>
        <member name="M:urakawa.exception.MediaNotAcceptable.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MediaNotAcceptable.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.CannotWriteToExternalFileException">
            <summary>
            Thrown when an external file could not be written to
            </summary>
        </member>
        <member name="M:urakawa.exception.CannotWriteToExternalFileException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CannotWriteToExternalFileException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.media.data.utilities.Clip">
            <summary>
            Represents a generic media clip
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.getClipBegin">
            <summary>
            Gets (a copy of) the clip begin <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>
            The clip begin <see cref="T:urakawa.media.timing.Time"/> - can not be <c>null</c>
            </returns>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.setClipBegin(urakawa.media.timing.Time)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <param name="newClipBegin">The new clip begin <see cref="T:urakawa.media.timing.Time"/> - can not be <c>null</c></param>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.getClipEnd">
            <summary>
            Gets (a copy of) the clip end <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>The clip end <see cref="T:urakawa.media.timing.Time"/></returns>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.setClipEnd(urakawa.media.timing.Time)">
            <summary>
            Sets the clip end <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <param name="newClipEnd">
            The new clip end <see cref="T:urakawa.media.timing.Time"/> 
            - a <c>null</c> ties the clip end to the end of the underlying wave audio
            </param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new clip end <see cref="T:urakawa.media.timing.Time"/> is less that the current clip begin <see cref="T:urakawa.media.timing.Time"/>
            </exception>
            <remarks>
            There is not check to see if the new clip end <see cref="T:urakawa.media.timing.Time"/> 
            is beyond the end of the underlyind wave audio
            </remarks>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.isClipEndTiedToEOM">
            <summary>
            Determines if clip end is tied to the end of the underlying media
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if clip end is tied to the end of the underlying media
            </returns>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.getDuration">
            <summary>
            Gets the duration of the clip
            </summary>
            <returns>The duration of as a <see cref="T:urakawa.media.timing.TimeDelta"/></returns>
        </member>
        <member name="M:urakawa.media.data.utilities.Clip.getMediaDuration">
            <summary>
            Gets the duration of the underlying media
            </summary>
            <returns>The duration of the underlying media</returns>
        </member>
        <member name="T:urakawa.media.data.FileDataProviderManager">
            <summary>
            Default implementation of <see cref="T:urakawa.media.data.IDataProviderManager"/> and <see cref="T:urakawa.media.data.IDataProviderFactory"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.IDataProviderManager">
            <summary>
            Interface for a <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getPresentation">
            <summary>
            Gets the <see cref="T:urakawa.Presentation"/> that owns the manager
            </summary>
            <returns>The <see cref="T:urakawa.Presentation"/> that owns <c>this</c></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.setPresentation(urakawa.Presentation)">
            <summary>
            Initializes the <see cref="T:urakawa.media.data.IDataProviderManager"/> with 
            a owning the <see cref="T:urakawa.Presentation"/>.
            </summary>
            <param name="ownerPres">The <see cref="T:urakawa.Presentation"/> that owns <c>this</c></param>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> of the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getUidOfDataProvider(urakawa.media.data.IDataProvider)">
            <summary>
            Gets the UID of a given <see cref="T:urakawa.media.data.IDataProvider"/>
            </summary>
            <param name="provider">The given data provider</param>
            <returns>The UID of <paramref name="provider"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="provider"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when data provider <paramref name="provider"/> is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getDataProvider(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProvider"/> with a given UID
            </summary>
            <param name="uid">The given UID</param>
            <returns>The data provider with the given UID</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            When no data providers managed by <c>this</c> has the given UID
            </exception>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.isManagerOf(System.String)">
            <summary>
            Determines if the manager manages a <see cref="T:urakawa.media.data.IDataProvider"/> with a given uid
            </summary>
            <param name="uid">The given uid</param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the manager manages a <see cref="T:urakawa.media.data.IDataProvider"/> with the given uid
            </returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.removeDataProvider(urakawa.media.data.IDataProvider,System.Boolean)">
            <summary>
            Removes one of the <see cref="T:urakawa.media.data.IDataProvider"/>s managed by the manager
            </summary>
            <param name="provider">The <see cref="T:urakawa.media.data.IDataProvider"/> to remove</param>
            <param name="delete">A <see cref="T:System.Boolean"/> indicating if the removed data provider should be deleted as well</param>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.removeDataProvider(System.String,System.Boolean)">
            <summary>
            Removes the <see cref="T:urakawa.media.data.IDataProvider"/> with a given UID from the manager
            </summary>
            <param name="uid">The uid of the provider to remove</param>
            <param name="delete">A <see cref="T:System.Boolean"/> indicating if the removed data provider should be deleted as well</param>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.addDataProvider(urakawa.media.data.IDataProvider)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.IDataProvider"/> to the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <param name="provider">The <see cref="T:urakawa.media.data.IDataProvider"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="provider"/> or <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when the data provider is already added tothe manager 
            or if the manager already manages another data provider with the given uid
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">Thrown if the data provides does not have <c>this</c> as manager</exception>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.setDataProviderUid(urakawa.media.data.IDataProvider,System.String)">
            <summary>
            Sets the uid of a given managed <see cref="T:urakawa.media.data.IDataProvider"/> to a given value
            </summary>
            <param name="provider">The given <see cref="T:urakawa.media.data.IDataProvider"/></param>
            <param name="uid">The given uid value</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="provider"/> or <paramref name="uid"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when the manager instance does not manage <paramref name="provider"/>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when <paramref name="uid"/> is already the uid of another <see cref="T:urakawa.media.data.IDataProvider"/></exception>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.getListOfDataProviders">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.data.IDataProvider"/>s that is managed by the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> conatining the managed <see cref="T:urakawa.media.data.IDataProvider"/>s</returns>
        </member>
        <member name="M:urakawa.media.data.IDataProviderManager.removeUnusedDataProviders(System.Boolean)">
            <summary>
            Removes any <see cref="T:urakawa.media.data.IDataProvider"/>s "not used", 
            that is all <see cref="T:urakawa.media.data.IDataProvider"/>s that are not used by a <see cref="T:urakawa.media.data.MediaData"/> of the <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="delete">A <see cref="T:System.Boolean"/> indicating if the removed data providers should be deleted</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.setPresentation(urakawa.Presentation)">
            <summary>
            Initializes the manager with a <see cref="T:urakawa.Presentation"/>, 
            also wires up the <see cref="E:urakawa.Presentation.rootUriChanged"/> event
            </summary>
            <param name="newPres">The new presentation</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.appendDataToProvider(System.IO.Stream,System.Int32,urakawa.media.data.IDataProvider)">
            <summary>
            Appends data from a given input <see cref="T:System.IO.Stream"/> to a given <see cref="T:urakawa.media.data.IDataProvider"/>
            </summary>
            <param name="data">The given input stream</param>
            <param name="count">The number of bytes to append</param>
            <param name="provider">The given data provider</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.compareDataProviderContent(urakawa.media.data.IDataProvider,urakawa.media.data.IDataProvider)">
            <summary>
            Compares the data content of two data providers to check for value equality
            </summary>
            <param name="dp1">Data provider 1</param>
            <param name="dp2">Data provider 2</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the data content is identical</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getDataFileDirectory">
            <summary>
            Gets the path of the data file directory used by <see cref="T:urakawa.media.data.FileDataProvider"/>s
            managed by <c>this</c>, relative to the base uri of the <see cref="T:urakawa.Presentation"/>
            owning the file data provider manager.
            </summary>
            <returns>The path</returns>
            <remarks>
            The DataFileDirectory is initialized lazily:
            If the DataFileDirectory has not been explicitly initialized using the <see cref="M:urakawa.media.data.FileDataProviderManager.setDataFileDirectory(System.String)"/> method,
            calling <see cref="M:urakawa.media.data.FileDataProviderManager.getDataFileDirectory"/> will assing it the default value "Data"</remarks>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.setDataFileDirectory(System.String)">
            <summary>
            Initializes the <see cref="T:urakawa.media.data.FileDataProvider"/> with a DataFileDirectory
            </summary>
            <param name="dataDir">The new DataFileDirectory - must be a relative uri</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.moveDataFiles(System.String,System.Boolean,System.Boolean)">
            <summary>
            Moves the data file directory of the manager
            </summary>
            <param name="newDataFileDir">The new data file direcotry</param>
            <param name="deleteSource">A <see cref="T:System.Boolean"/> indicating if the source/old data files shlould be deleted</param>
            <param name="overwriteDestDir">A <see cref="T:System.Boolean"/> indicating if the new data directory should be overwritten</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getDataFileDirectoryFullPath">
            <summary>
            Gets the full path of the data file directory. 
            Convenience for <c>Path.Combine(getBasePath(), getDataFileDirectory())</c>
            </summary>
            <returns>The full path</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.setDataFileDirectoryPath(System.String)">
            <summary>
            Initializer that sets the path of the data file directory
            used by <see cref="T:urakawa.media.data.FileDataProvider"/>s managed by <c>this</c>
            </summary>
            <param name="newPath"></param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getNewDataFileRelPath(System.String)">
            <summary>
            Gets a new data file path relative to the path of the data file directory of the manager
            </summary>
            <param name="extension">The entension of the new data file path</param>
            <returns>The relative path</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getListOfManagedFileDataProviders">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.data.FileDataProvider"/>s managed by the manager
            </summary>
            <returns>The list of file data providers</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.FileDataProviderFactory"/> of the <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.removeDataProvider(urakawa.media.data.IDataProvider,System.Boolean)">
            <summary>
            Detaches one of the <see cref="T:urakawa.media.data.IDataProvider"/>s managed by the manager
            </summary>
            <param name="provider">The <see cref="T:urakawa.media.data.IDataProvider"/> to delete</param>
            <param name="delete">A <see cref="T:System.Boolean"/> indicating if the removed data provider should be deleted</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.removeDataProvider(System.String,System.Boolean)">
            <summary>
            Detaches the <see cref="T:urakawa.media.data.IDataProvider"/> with a given UID from the manager
            </summary>
            <param name="uid">The given UID</param>
            <param name="delete">A <see cref="T:System.Boolean"/> indicating if the removed data provider should be deleted</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getUidOfDataProvider(urakawa.media.data.IDataProvider)">
            <summary>
            Gets the UID of a given <see cref="T:urakawa.media.data.IDataProvider"/>
            </summary>
            <param name="provider">The given data provider</param>
            <returns>The UID of <paramref name="provider"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="provider"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when data provider <paramref name="provider"/> is not managed by <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getDataProvider(System.String)">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProvider"/> with a given UID
            </summary>
            <param name="uid">The given UID</param>
            <returns>The data provider with the given UID</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            When no data providers managed by <c>this</c> has the given UID
            </exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.addDataProvider(urakawa.media.data.IDataProvider,System.String)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.IDataProvider"/> to the manager with a given uid
            </summary>
            <param name="provider">The data provider to add</param>
            <param name="uid">The uid to assign to the added data provider</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="provider"/> or <paramref name="uid"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when the data provider is already added tothe manager 
            or if the manager already manages another data provider with the given uid
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">Thrown if the data provides does not have <c>this</c> as manager</exception>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.addDataProvider(urakawa.media.data.IDataProvider)">
            <summary>
            Adds a <see cref="T:urakawa.media.data.IDataProvider"/> to be managed by the manager
            </summary>
            <param name="provider">The data provider</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="provider"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when <paramref name="provider"/> is already managed by <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            Thrown when <paramref name="provider"/> does not return <c>this</c> as owning manager
            </exception>
            <seealso cref="M:urakawa.media.data.IDataProvider.getDataProviderManager"/>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.isManagerOf(System.String)">
            <summary>
            Determines if the manager manages a <see cref="T:urakawa.media.data.IDataProvider"/> with a given uid
            </summary>
            <param name="uid">The given uid</param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the manager manages a <see cref="T:urakawa.media.data.IDataProvider"/> with the given uid
            </returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.setDataProviderUid(urakawa.media.data.IDataProvider,System.String)">
            <summary>
            Sets the uid of a given <see cref="T:urakawa.media.data.IDataProvider"/> to a given value
            </summary>
            <param name="provider">The given data provider</param>
            <param name="uid">The given uid</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.getListOfDataProviders">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.data.IDataProvider"/>s managed by the manager
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.removeUnusedDataProviders(System.Boolean)">
            <summary>
            Remove all <see cref="T:urakawa.media.data.IDataProvider"/> that are managed by the manager, 
            but are not used by any <see cref="T:urakawa.media.data.MediaData"/>
            </summary>
            <param name="delete">A <see cref="T:System.Boolean"/> indicating if the removed data providers should be deleted</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.clear">
            <summary>
            Clears the <see cref="T:urakawa.media.data.FileDataProviderManager"/>, clearing any links to <see cref="T:urakawa.media.data.IDataProvider"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a FileDataProviderManager xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a FileDataProviderManager xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a FileDataProviderManager element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a FileDataProviderManager element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.data.FileDataProviderManager.valueEquals(urakawa.media.data.IDataProviderManager)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
            <remarks>The base path of the <see cref="T:urakawa.media.data.FileDataProviderManager"/>s are not compared</remarks>
        </member>
        <member name="T:urakawa.events.property.xml.XmlAttributeSetEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.property.xml.XmlProperty.xmlAttributeSet"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.property.xml.XmlAttributeSetEventArgs.#ctor(urakawa.property.xml.XmlProperty,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event,
            the QName of the attribute and the previous+new value
            </summary>
            <param name="src">The source <see cref="T:urakawa.property.xml.XmlProperty"/> of the event</param>
            <param name="attrLN">The local name part of the OName of the attribute that was set</param>
            <param name="attrNS">The namespace uri part of the OName of the attribute that was set</param>
            <param name="newVal">The new value of the attribute</param>
            <param name="prevVal">The value of the attribute prior to being set</param>
        </member>
        <member name="F:urakawa.events.property.xml.XmlAttributeSetEventArgs.AttributeLocalName">
            <summary>
            The local name part of the OName of the attribute that was set
            </summary>
        </member>
        <member name="F:urakawa.events.property.xml.XmlAttributeSetEventArgs.AttributeNamespaceUri">
            <summary>
            The namespace uri part of the OName of the attribute that was set
            </summary>
        </member>
        <member name="F:urakawa.events.property.xml.XmlAttributeSetEventArgs.NewValue">
            <summary>
            The new value of the attribute
            </summary>
        </member>
        <member name="F:urakawa.events.property.xml.XmlAttributeSetEventArgs.PreviousValue">
            <summary>
            The value of the attribute prior to being set
            </summary>
        </member>
        <member name="T:urakawa.events.media.SizeChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.ISized.sizeChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.media.SizeChangedEventArgs.#ctor(urakawa.media.IMedia,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.IMedia"/> of the event
            and the new+previous hight+width
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.IMedia"/> of the event</param>
            <param name="newH">The new height</param>
            <param name="newW">The new width</param>
            <param name="prevH">The height prior to the change</param>
            <param name="prevW">The width prior to the change</param>
        </member>
        <member name="F:urakawa.events.media.SizeChangedEventArgs.NewHeight">
            <summary>
            The new height
            </summary>
        </member>
        <member name="F:urakawa.events.media.SizeChangedEventArgs.NewWidth">
            <summary>
            The new width
            </summary>
        </member>
        <member name="F:urakawa.events.media.SizeChangedEventArgs.PreviousHeight">
            <summary>
            The height prior to the change
            </summary>
        </member>
        <member name="F:urakawa.events.media.SizeChangedEventArgs.PreviousWidth">
            <summary>
            The width prior to the change
            </summary>
        </member>
        <member name="T:urakawa.events.core.PropertyAddedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.core.TreeNode.propertyAdded"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.core.PropertyAddedEventArgs.#ctor(urakawa.core.TreeNode,urakawa.property.Property)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.core.TreeNode"/> of the event
            and the <see cref="T:urakawa.property.Property"/> that was added
            </summary>
            <param name="src">The source <see cref="T:urakawa.core.TreeNode"/> of the event</param>
            <param name="addee">The <see cref="T:urakawa.property.Property"/> that was added</param>
        </member>
        <member name="F:urakawa.events.core.PropertyAddedEventArgs.AddedProperty">
            <summary>
            The <see cref="T:urakawa.property.Property"/> that was added
            </summary>
        </member>
        <member name="T:urakawa.events.presentation.MetadataAddedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.Presentation.metadataAdded"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.presentation.MetadataAddedEventArgs.#ctor(urakawa.Presentation,urakawa.metadata.Metadata)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Presentation"/> of the event and the <see cref="T:urakawa.metadata.Metadata"/> that was added
            </summary>
            <param name="source">The source <see cref="T:urakawa.Presentation"/> of the event</param>
            <param name="addee">The <see cref="T:urakawa.metadata.Metadata"/> that was added</param>
        </member>
        <member name="F:urakawa.events.presentation.MetadataAddedEventArgs.AddedMetadata">
            <summary>
            The <see cref="T:urakawa.metadata.Metadata"/> that was added
            </summary>
        </member>
        <member name="T:urakawa.events.media.data.audio.AudioDataInsertedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.data.audio.AudioMediaData.audioDataInserted"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.audio.AudioDataInsertedEventArgs.#ctor(urakawa.media.data.audio.AudioMediaData,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event,
            the insertion point and the duration of the audio data that was inserted
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of the event</param>
            <param name="insPoint">The insertion point at which the audio data was inserted</param>
            <param name="dur">The duration of the data that was inserted</param>
        </member>
        <member name="F:urakawa.events.media.data.audio.AudioDataInsertedEventArgs.InsertPoint">
            <summary>
            The insertion point at which the audio data was inserted
            </summary>
        </member>
        <member name="F:urakawa.events.media.data.audio.AudioDataInsertedEventArgs.Duration">
            <summary>
            The duration of the data that was inserted
            </summary>
        </member>
        <member name="T:urakawa.exception.MethodParameterHasNoItemsException">
            <summary>
            Thrown when a collection/enumeration of items passed as a parameter unexpectedly contains no items
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterHasNoItemsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterHasNoItemsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.publish.PublishManagedAudioVisitor">
            <summary>
            Concrete implementation of the <see cref="T:urakawa.publish.AbstractPublishManagedAudioVisitor"/>
            where <see cref="T:urakawa.publish.TreeNodeTestDelegate"/>s are used to determine
            </summary>
        </member>
        <member name="M:urakawa.publish.PublishManagedAudioVisitor.#ctor(urakawa.publish.TreeNodeTestDelegate,urakawa.publish.TreeNodeTestDelegate)">
            <summary>
            Constructor setting the <see cref="T:urakawa.publish.TreeNodeTestDelegate"/> determining when to create new audio files
            and when to 
            </summary>
            <param name="treeNodeTriggersNewAudioFileDelegate">
            The <see cref="T:urakawa.publish.TreeNodeTestDelegate"/> determining which <see cref="T:urakawa.core.TreeNode"/>s trigger new audio files,
            if <c>null</c> then no <see cref="T:urakawa.core.TreeNode"/>s trigger new audio files
            </param>
            <param name="treeNodeMustBeSkippedDelegate">
            The <see cref="T:urakawa.publish.TreeNodeTestDelegate"/> determining which <see cref="T:urakawa.core.TreeNode"/>s should be skipped,
            if <c>null</c> then no <see cref="T:urakawa.core.TreeNode"/>s are skipped
            </param>
        </member>
        <member name="M:urakawa.publish.PublishManagedAudioVisitor.treeNodeTriggersNewAudioFile(urakawa.core.TreeNode)">
            <summary>
            Determines if the given <see cref="T:urakawa.core.TreeNode"/> should trigger a new audio file,
            based on the <see cref="T:urakawa.publish.TreeNodeTestDelegate"/> passed with the constructor.
            If the delegate passed with the constructor was <c>null</c>, the method returns <c>false</c>
            </summary>
            <param name="node">The given node</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the given node triggers a new audio file</returns>
        </member>
        <member name="M:urakawa.publish.PublishManagedAudioVisitor.treeNodeMustBeSkipped(urakawa.core.TreeNode)">
            <summary>
            Determines if the given <see cref="T:urakawa.core.TreeNode"/> should be skipped during publish visitation,
            based on the <see cref="T:urakawa.publish.TreeNodeTestDelegate"/> passed with the constructor.
            If the delegate passed with the constructor was <c>null</c>, the method returns <c>false</c>
            </summary>
            <param name="node">The given node</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the <see cref="T:urakawa.core.TreeNode"/> should be skipped</returns>
        </member>
        <member name="T:urakawa.publish.TreeNodeTestDelegate">
            <summary>
            Delegate to perform a boolean test on a <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> on which to perform the test</param>
            <returns>The boolean result of the test</returns>
        </member>
        <member name="T:urakawa.property.PropertyFactory">
            <summary>
            Factory for creating <see cref="T:urakawa.property.Property"/>s
            </summary>
        </member>
        <member name="T:urakawa.property.GenericPropertyFactory">
            <summary>
            Default implementation of <see cref="T:urakawa.property.IGenericPropertyFactory"/> can not create any property.
            Use the built-in sub-class of <see cref="T:urakawa.property.PropertyFactory"/> that support creation of 
            <see cref="T:urakawa.property.channel.ChannelsProperty"/>s 
            and <see cref="T:urakawa.property.xml.XmlProperty"/>s.
            Alternatively the user should create their own sub-class of GenericPropertyFactory.
            </summary>
        </member>
        <member name="M:urakawa.property.GenericPropertyFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.property.GenericPropertyFactory.createProperty(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.Property"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.property.Property"/> or <c>null</c> if the given QName is not supported
            (which is always hte case)
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="localName"/> or <paramref name="namespaceUri"/> are <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.property.PropertyFactory.#ctor">
            <summary>
            Defautl constructor
            </summary>
        </member>
        <member name="M:urakawa.property.PropertyFactory.createChannelsProperty">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.ChannelsProperty"/>
            </summary>
            <returns>The created <see cref="T:urakawa.property.channel.ChannelsProperty"/></returns>
        </member>
        <member name="M:urakawa.property.PropertyFactory.createProperty(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.Property"/> of type matching a given QName
            </summary>
            <param name="localName">The local localName part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.property.Property"/> or <c>null</c> is the given QName is not recognized</returns>
        </member>
        <member name="M:urakawa.property.PropertyFactory.createXmlProperty">
            <summary>
            Creates an <see cref="T:urakawa.property.xml.XmlProperty"/> instance
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="M:urakawa.property.PropertyFactory.createXmlAttribute">
            <summary>
            Creates an <see cref="T:urakawa.property.xml.XmlAttribute"/> instance 
            with a given <see cref="T:urakawa.property.xml.XmlProperty"/> parent
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="M:urakawa.property.PropertyFactory.createXmlAttribute(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.xml.XmlAttribute"/> of type 
            matching a given QName with a given parent <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
            <param name="localName">The local localName part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created instance or <c>null</c> if the QName is not recognized</returns>
        </member>
        <member name="T:urakawa.media.TextMedia">
            <summary>
            TextMedia represents a text string
            </summary>
        </member>
        <member name="T:urakawa.media.ITextMedia">
            <summary>
            Interface for <see cref="T:urakawa.media.IMedia"/> of textual type. 
            </summary>
        </member>
        <member name="M:urakawa.media.ITextMedia.getText">
            <summary>
            Get the text string for the TextMedia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ITextMedia.setText(System.String)">
            <summary>
            Set the text string for the TextMedia.
            Throws <see cref="T:urakawa.exception.MethodParameterIsNullException"/>, 
            <see cref="T:urakawa.exception.MethodParameterIsEmptyStringException"/>
            </summary>
            <param name="text">The new text string.</param>
        </member>
        <member name="E:urakawa.media.ITextMedia.textChanged">
            <summary>
            Event fired after the text of the <see cref="T:urakawa.media.ITextMedia"/> has changed
            </summary>
        </member>
        <member name="M:urakawa.media.TextMedia.notifyTextChanged(urakawa.media.TextMedia,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.media.TextMedia.textChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.TextMedia"/> whoose text was changed</param>
            <param name="newText">The new text value</param>
            <param name="prevText">Thye text value prior to the change</param>
        </member>
        <member name="M:urakawa.media.TextMedia.#ctor">
            <summary>
            Constructor setting the associated <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="fact"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.media.TextMedia.ToString">
            <summary>
            This override is useful while debugging
            </summary>
            <returns>The textual content of the <see cref="T:urakawa.media.ITextMedia"/></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.getText">
            <summary>
            Return the text string
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.setText(System.String)">
            <summary>
            Set the text string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:urakawa.media.TextMedia.isContinuous">
            <summary>
            This always returns false, because
            text media is never considered continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.isDiscrete">
            <summary>
            This always returns true, because
            text media is always considered discrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.isSequence">
            <summary>
            This always returns false, because
            a single media object is never considered to be a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.TextMedia.copy">
            <summary>
            Make a copy of this text object
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.copyProtected">
            <summary>
            Make a copy of this text object
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.export(urakawa.Presentation)">
            <summary>
            Exports the text media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external text media</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the text media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external text media</returns>
        </member>
        <member name="M:urakawa.media.TextMedia.clear">
            <summary>
            Clears the <see cref="T:urakawa.media.TextMedia"/> setting the text to <c>""</c>
            </summary>
        </member>
        <member name="M:urakawa.media.TextMedia.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a TextMedia xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.TextMedia.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a TextMedia element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.TextMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Compares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.media.TextMedia.textChanged">
            <summary>
            Event fired after the text of the <see cref="T:urakawa.media.TextMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.events.metadata.OptionalAttributeChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.metadata.Metadata.optionalAttributeChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.metadata.OptionalAttributeChangedEventArgs.#ctor(urakawa.metadata.Metadata,System.String,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.metadata.Metadata"/> of the event,
            the name of the optional attribute that changed
            and previous+new value of the optional attribute
            </summary>
            <param name="source">The source <see cref="T:urakawa.metadata.Metadata"/> of the event</param>
            <param name="nm">The name of the optional attribute that changed</param>
            <param name="newVal">The new value of the optional attribute</param>
            <param name="prevValue">The value of the optional attribute prior to the change</param>
        </member>
        <member name="F:urakawa.events.metadata.OptionalAttributeChangedEventArgs.Name">
            <summary>
            The name of the optional attribute that changed
            </summary>
        </member>
        <member name="F:urakawa.events.metadata.OptionalAttributeChangedEventArgs.NewValue">
            <summary>
            The new value of the optional attribute
            </summary>
        </member>
        <member name="F:urakawa.events.metadata.OptionalAttributeChangedEventArgs.PreviousValue">
            <summary>
            The value of the optional attribute prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.NodeInDifferentPresentationException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeInDifferentPresentationException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeInDifferentPresentationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.FactoryCannotCreateTypeException">
            <summary>
            Exception thrown when a factory unexpectedly can not create an object of the desired type
            </summary>
        </member>
        <member name="M:urakawa.exception.FactoryCannotCreateTypeException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.FactoryCannotCreateTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.property.xml.XmlProperty">
            <summary>
            Default implementation of <see cref="T:urakawa.property.xml.XmlProperty"/> interface
            </summary>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.notifyQNameChanged(urakawa.property.xml.XmlProperty,System.String,System.String,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.property.xml.XmlProperty.qNameChanged"/> event
            </summary>
            <param name="src">The source, that is the <see cref="T:urakawa.property.xml.XmlProperty"/> whoose QName changed</param>
            <param name="newLocalName">The local name part of the new QName</param>
            <param name="newNamespaceUri">The namespace uri part of the new QName</param>
            <param name="prevLocalName">The local name part of the QName before the change</param>
            <param name="prevNamespaceUri">The namespace uri part of the QName before the change</param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.notifyXmlAttributeSet(urakawa.property.xml.XmlProperty,System.String,System.String,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.property.xml.XmlProperty.xmlAttributeSet"/> event
            </summary>
            <param name="src">The source, that is the <see cref="T:urakawa.property.xml.XmlProperty"/> on which an attribute was set</param>
            <param name="attrLN">The local name part of the QName of the attribute that was set</param>
            <param name="attrNS">The namespace uri part of the QName of the attribute that was set</param>
            <param name="newVal">The new value of the attribute - may be <c>null</c></param>
            <param name="prevVal">The previous value of the attribute - may be <c>null</c></param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.#ctor">
            <summary>
            Defayult constructor
            </summary>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.getLocalName">
            <summary>
            Gets the local localName of <c>this</c>
            </summary>
            <returns>The local localName</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.getNamespaceUri">
            <summary>
            Gets the namespace uri of <c>this</c>
            </summary>
            <returns>The namespace uri</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.setQName(System.String,System.String)">
            <summary>
            Sets the QName of <c>this</c> (i.e. the local localName and namespace uri)
            </summary>
            <param name="newLocalName">
            The local localName part of the new QName
            - must not be <c>null</c> or <see cref="F:System.String.Empty"/>
            </param>
            <param name="newNamespaceUri">
            The namespace uri part of the new QName - must not be <c>null</c>
            </param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.getListOfAttributes">
            <summary>
            Gets a list of the <see cref="T:urakawa.property.xml.XmlAttribute"/>s of <c>this</c>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.setAttribute(urakawa.property.xml.XmlAttribute)">
            <summary>
            Sets an <see cref="T:urakawa.property.xml.XmlAttribute"/>, possibly overwriting an existing one
            </summary>
            <param name="newAttribute">The <see cref="T:urakawa.property.xml.XmlAttribute"/> to set</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if an existing <see cref="T:urakawa.property.xml.XmlAttribute"/> was overwritten</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the <see cref="T:urakawa.property.xml.XmlAttribute"/> to set is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.removeAttribute(System.String,System.String)">
            <summary>
            Removes an <see cref="T:urakawa.property.xml.XmlAttribute"/> by QName
            </summary>
            <param name="localName">The localName part of the QName of the <see cref="T:urakawa.property.xml.XmlAttribute"/> to remove</param>
            <param name="namespaceUri">The namespaceUri part of the QName of the <see cref="T:urakawa.property.xml.XmlAttribute"/> to remove</param>
            <returns>The removes <see cref="T:urakawa.property.xml.XmlAttribute"/></returns>
            <exception cref="T:urakawa.exception.XmlAttributeDoesNotExistsException">
            Thrown when the <see cref="T:urakawa.property.xml.XmlProperty"/> does not have an event with the given QName</exception>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.removeAttribute(urakawa.property.xml.XmlAttribute)">
            <summary>
            Removes a given <see cref="T:urakawa.property.xml.XmlAttribute"/>
            </summary>
            <param name="attrToRemove">The <see cref="T:urakawa.property.xml.XmlAttribute"/> to remove</param>
            <exception cref="T:urakawa.exception.XmlAttributeDoesNotBelongException">
            Thrown when the given <see cref="T:urakawa.property.xml.XmlAttribute"/> instance does not belong to the <see cref="T:urakawa.property.xml.XmlProperty"/>
            </exception>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.setAttribute(System.String,System.String,System.String)">
            <summary>
            Sets an <see cref="T:urakawa.property.xml.XmlAttribute"/>, possibly overwriting an existing one
            </summary>
            <param name="localName">The local localName of the new attribute</param>
            <param name="namespaceUri">The namespace uri part of the new attribute</param>
            <param name="value">The value of the new attribute</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if an existing <see cref="T:urakawa.property.xml.XmlAttribute"/> was overwritten</returns>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            <see cref="M:urakawa.property.Property.getPropertyFactory"/> for information on when this <see cref="T:System.Exception"/> is thrown
            </exception>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.getAttribute(System.String,System.String)">
            <summary>
            Gets the <see cref="T:urakawa.property.xml.XmlAttribute"/> with a given QName
            </summary>
            <param name="localName">The local localName part of the given QName</param>
            <param name="namespaceUri">The namespce uri part of the given QName</param>
            <returns>The <see cref="T:urakawa.property.xml.XmlAttribute"/> if found, otherwise <c>null</c></returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.copy">
            <summary>
            Gets a copy of <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.copyProtected">
            <summary>
            Creates a copy of <c>this</c> including copies of any <see cref="T:urakawa.property.xml.XmlAttribute"/>s
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.export(urakawa.Presentation)">
            <summary>
            Creates an export of <c>this</c> for a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The given destination presentaton</param>
            <returns>The exported xml property</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.exportProtected(urakawa.Presentation)">
            <summary>
            Creates an export of <c>this</c> for a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The given destination presentaton</param>
            <returns>The exported xml property</returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.clear">
            <summary>
            Clears the <see cref="T:urakawa.property.xml.XmlAttribute"/> of QName and <see cref="T:urakawa.property.xml.XmlAttribute"/>s
            </summary>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a XmlProperty xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a XmlProperty xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a XmlProperty element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a XmlProperty element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.valueEquals(urakawa.property.Property)">
            <summary>
            Compares <c>this</c> with another <see cref="T:urakawa.property.Property"/> for equality.
            </summary>
            <param name="other">The other <see cref="T:urakawa.property.Property"/></param>
            <returns><c>true</c> if the <see cref="T:urakawa.property.Property"/>s are equal, otherwise <c>false</c></returns>
        </member>
        <member name="M:urakawa.property.xml.XmlProperty.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> representation of the <see cref="T:urakawa.property.xml.XmlProperty"/>
            </summary>
            <returns>The <see cref="T:System.String"/> representation</returns>
        </member>
        <member name="E:urakawa.property.xml.XmlProperty.qNameChanged">
            <summary>
            Event fired after the QName of the <see cref="T:urakawa.property.xml.XmlProperty"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.property.xml.XmlProperty.xmlAttributeSet">
            <summary>
            Event fired after an attribute of an <see cref="T:urakawa.property.xml.XmlProperty"/> has been set
            </summary>
        </member>
        <member name="T:urakawa.media.data.utilities.SubStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> that implements reading a sub-chunk of a source <see cref="T:System.IO.Stream"/>.
            The source <see cref="T:System.IO.Stream"/> must support seeking
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Constructor setting the source <see cref="T:System.IO.Stream"/> as well as the start position and count
            of the sub-chunk specifying the <see cref="T:urakawa.media.data.utilities.SubStream"/>
            </summary>
            <param name="source">The source <see cref="T:System.IO.Stream"/></param>
            <param name="start">The start position of the sub-chunk</param>
            <param name="len">The count of the sub-chunk</param>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.Flush">
            <summary>
            Does nothing since a <see cref="T:urakawa.media.data.utilities.SubStream"/> is read-only
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current <see cref="T:urakawa.media.data.utilities.SubStream"/> and 
            advances the position within the stream by the number of bytes read
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between 
            <c><paramref name="offset"/></c> and <c>(<paramref name="offset"/> + <paramref name="count"/> - 1)</c> 
            replaced by the bytes read from the current <see cref="T:urakawa.media.data.utilities.SubStream"/>.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> 
            at which to begin storing the data read from the current <see cref="T:urakawa.media.data.utilities.SubStream"/>.
            </param>
            <param name="count">The maximum number of bytes to be read from the current <see cref="T:urakawa.media.data.utilities.SubStream"/>.</param>
            <returns>The number of <see cref="T:System.Byte"/>s read</returns>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utilities.SubStream.Position"/> within the current stream.
            </summary>
            <param name="offset">
            A byte <paramref name="offset"/> relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>The new <see cref="P:urakawa.media.data.utilities.SubStream.Position"/> within the current stream.</returns>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.SetLength(System.Int64)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utilities.SubStream.Length"/> of the <see cref="T:urakawa.media.data.utilities.SubStream"/>.
            Since a <see cref="T:urakawa.media.data.utilities.SubStream"/> is read-only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">The new <see cref="P:urakawa.media.data.utilities.SubStream.Length"/> </param>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            Since a <see cref="T:urakawa.media.data.utilities.SubStream"/> is read only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="buffer">
            An array of <see cref="T:System.Byte"/>s. 
            This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin copying <see cref="T:System.Byte"/>s 
            to the current stream.
            </param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to be written to the current stream.</param>
        </member>
        <member name="M:urakawa.media.data.utilities.SubStream.Close">
            <summary>
            Closes the <see cref="T:urakawa.media.data.utilities.SubStream"/> and it's underlying source <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SubStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SubStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SubStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing - always returns <c>false</c>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SubStream.Length">
            <summary>
            Gets the count in bytes of the <see cref="T:urakawa.media.data.utilities.SubStream"/>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SubStream.Position">
            <summary>
            Gets or sets the position within the <see cref="T:urakawa.media.data.utilities.SubStream"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.utilities.CollectManagedMediaTreeNodeVisitor">
            <summary>
            Visitor that collects all <see cref="T:urakawa.media.data.MediaData"/> used by the visited <see cref="T:urakawa.core.TreeNode"/>s.
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.CollectManagedMediaTreeNodeVisitor.getListOfCollectedMedia">
            <summary>
            Gets the list of collected <see cref="T:urakawa.media.data.IManagedMedia"/>
            </summary>
            <returns>The list</returns>
            <remarks>
            The returned list is a reference to the list in the <see cref="T:urakawa.media.data.utilities.CollectManagedMediaTreeNodeVisitor"/> instance, 
            any changes made to the returned list will reflect in 
            the <see cref="T:urakawa.media.data.utilities.CollectManagedMediaTreeNodeVisitor"/> instance
            </remarks>
        </member>
        <member name="M:urakawa.media.data.utilities.CollectManagedMediaTreeNodeVisitor.preVisit(urakawa.core.TreeNode)">
            <summary>
            Any <see cref="T:urakawa.media.data.IManagedMedia"/> used by the 
            </summary>
            <param name="node">The node being visited</param>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.data.utilities.CollectManagedMediaTreeNodeVisitor.postVisit(urakawa.core.TreeNode)">
            <summary>
            Nothing is done in post visit
            </summary>
            <param name="node">The node being visited</param>
        </member>
        <member name="T:urakawa.events.progress.CancelledEventArgs">
            <summary>
            sdfsf
            </summary>
        </member>
        <member name="T:urakawa.media.MediaFactory">
            <summary>
            The media factory will create any media object of MediaType.xxx
            </summary>
        </member>
        <member name="M:urakawa.media.MediaFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:urakawa.media.MediaFactory.createMedia(System.String,System.String)">
            <summary>
            Creates an <see cref="T:urakawa.media.IMedia"/> matching a given QName
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The creates <see cref="T:urakawa.media.IMedia"/> or <c>null</c> is the given QName is not supported</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createAudioMedia">
            <summary>
            Creates a <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/> which is the default <see cref="T:urakawa.media.IAudioMedia"/> of the factory
            </summary>
            <returns>The creation</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createTextMedia">
            <summary>
            Creates a <see cref="T:urakawa.media.TextMedia"/> which is the default <see cref="T:urakawa.media.ITextMedia"/> of the factory
            </summary>
            <returns>The creation</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createImageMedia">
            <summary>
            Creates a <see cref="T:urakawa.media.ExternalImageMedia"/> which is the default <see cref="T:urakawa.media.IImageMedia"/> of the factory
            </summary>
            <returns>The creation</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createVideoMedia">
            <summary>
            Creates a <see cref="T:urakawa.media.ExternalVideoMedia"/> which is the default <see cref="T:urakawa.media.IVideoMedia"/> of the factory
            </summary>
            <returns>The creation</returns>
        </member>
        <member name="M:urakawa.media.MediaFactory.createSequenceMedia">
            <summary>
            Creates a <see cref="T:urakawa.media.SequenceMedia"/> which is the default <see cref="T:urakawa.media.SequenceMedia"/> of the factory
            </summary>
            <returns>The creation</returns>
        </member>
        <member name="T:urakawa.core.TreeNode">
            <summary>
            A node in the core tree of the SDK
            </summary>
        </member>
        <member name="T:urakawa.core.ITreeNodeReadOnlyMethods">
            <summary>
            Provides the read-only tree methods of a <see cref="T:urakawa.core.TreeNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.getChild(System.Int32)">
            <summary>
            Gets the child <see cref="T:urakawa.core.TreeNode"/> at a given index
            </summary>
            <param name="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.TreeNode"/> at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.ITreeNodeReadOnlyMethods.getChildCount"/>()-1</c></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.indexOf(urakawa.core.TreeNode)">
            <summary>
            Gets the index of a given child <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="node">The given child <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The index of the given child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.core.TreeNode"/> of the instance,
            null if the instance is detached from a tree or is the root node of a tree
            </summary>
            <returns>The parent</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.getChildCount">
            <summary>
            Gets the number of children
            </summary>
            <returns>The number of children</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.copy(System.Boolean,System.Boolean)">
            <summary>
            Make a copy of the node
            </summary>
            <param name="deep">If true, then include the node's entire subtree.  
            Otherwise, just copy the node itself.</param>
            <param name="copyProperties">If true, then include the node's property.</param>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.copy(System.Boolean)">
            <summary>
            Make a copy of the node
            </summary>
            <param name="deep">If true, then include the node's entire subtree.  
            Otherwise, just copy the node itself.</param>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.copy">
            <summary>
            Make a deep copy of the node including property
            </summary>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.getNextSibling">
            <summary>
            Gets the next sibling of <c>this</c>
            </summary>
            <returns>The next sibling of <c>this</c> or <c>null</c> if no next sibling exists</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.getPreviousSibling">
            <summary>
            Gets the previous sibling of <c>this</c>
            </summary>
            <returns>The previous sibling of <c>this</c> or <c>null</c> if no previous sibling exists</returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.isSiblingOf(urakawa.core.TreeNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.TreeNode"/> is a sibling of <c>this</c>
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a sibling of <c>this</c>, 
            otherwise<c>false</c></returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.isAncestorOf(urakawa.core.TreeNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.TreeNode"/> is an ancestor of <c>this</c>
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is an ancestor of <c>this</c>, 
            otherwise<c>false</c></returns>
        </member>
        <member name="M:urakawa.core.ITreeNodeReadOnlyMethods.isDescendantOf(urakawa.core.TreeNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.TreeNode"/> is a descendant of <c>this</c>
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a descendant of <c>this</c>, 
            otherwise<c>false</c></returns>
        </member>
        <member name="T:urakawa.core.visitor.IVisitableTreeNode">
            <summary>
            Provides methods for accepting <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/>s
            </summary>
        </member>
        <member name="M:urakawa.core.visitor.IVisitableTreeNode.acceptDepthFirst(urakawa.core.visitor.ITreeNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/> in depth first mode
            </summary>
            <param name="visitor">The <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/></param>
        </member>
        <member name="M:urakawa.core.visitor.IVisitableTreeNode.acceptBreadthFirst(urakawa.core.visitor.ITreeNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/> in breadth first mode
            </summary>
            <param name="visitor">The <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/></param>
        </member>
        <member name="M:urakawa.core.visitor.IVisitableTreeNode.acceptDepthFirst(urakawa.core.visitor.PreVisitDelegate,urakawa.core.visitor.PostVisitDelegate)">
            <summary>
            Visits the <see cref="T:urakawa.core.visitor.IVisitableTreeNode"/> depth first
            </summary>
            <param name="preVisit">The pre-visit delegate</param>
            <param name="postVisit">The post visit delegate</param>
        </member>
        <member name="M:urakawa.core.TreeNode.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.core.TreeNode.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.core.TreeNode.notifyChildAdded(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Fires the <see cref="E:urakawa.core.TreeNode.childAdded"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.core.TreeNode"/> at which the event occured
            </param>
            <param name="addedChild">
            The child <see cref="T:urakawa.core.TreeNode"/> that was added to <paramref name="source"/>
            </param>
        </member>
        <member name="M:urakawa.core.TreeNode.notifyChildRemoved(urakawa.core.TreeNode,urakawa.core.TreeNode,System.Int32)">
            <summary>
            Fires the <see cref="E:urakawa.core.TreeNode.childRemoved"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.core.TreeNode"/> at which the event occured, 
            i.e. the <see cref="T:urakawa.core.TreeNode"/> from which a child was removed
            </param>
            <param name="removedChild">The child that was removed</param>
            <param name="position">The position from which the child was removed</param>
        </member>
        <member name="M:urakawa.core.TreeNode.notifyPropertyAdded(urakawa.core.TreeNode,urakawa.property.Property)">
            <summary>
            Fires the <see cref="E:urakawa.core.TreeNode.propertyAdded"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.core.TreeNode"/> to which a <see cref="T:urakawa.property.Property"/> was added
            </param>
            <param name="addedProp">The <see cref="T:urakawa.property.Property"/> that was added</param>
        </member>
        <member name="M:urakawa.core.TreeNode.notifyPropertyRemoved(urakawa.core.TreeNode,urakawa.property.Property)">
            <summary>
            Fires the <see cref="E:urakawa.core.TreeNode.propertyRemoved"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.core.TreeNode"/> to which a <see cref="T:urakawa.property.Property"/> was added
            </param>
            <param name="removedProp">The <see cref="T:urakawa.property.Property"/> that was removed</param>
        </member>
        <member name="F:urakawa.core.TreeNode.mProperties">
            <summary>
            Containe the <see cref="T:urakawa.property.Property"/>s of the node
            </summary>
        </member>
        <member name="F:urakawa.core.TreeNode.mChildren">
            <summary>
            Contains the children of the node
            </summary>
        </member>
        <member name="F:urakawa.core.TreeNode.mParent">
            <summary>
            The parent <see cref="T:urakawa.core.TreeNode"/>
            </summary>
        </member>
        <member name="M:urakawa.core.TreeNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.core.TreeNode.getListOfUsedPropertyTypes">
            <summary>
            Gets a list of the <see cref="T:System.Type"/>s of <see cref="T:urakawa.property.Property"/> set for the <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getListOfProperties">
            <summary>
            Gets a list of all <see cref="T:urakawa.property.Property"/>s of this
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getListOfProperties(System.Type)">
            <summary>
            Gets a list of the <see cref="T:urakawa.property.Property"/>s of this of a given <see cref="T:System.Type"/>
            </summary>
            <param name="t">The given type</param>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getListOfProperties``1">
            <summary>
            Gets the <see cref="T:urakawa.property.Property"/>s of a the given <see cref="T:urakawa.property.Property"/> sub-type
            </summary>
            <typeparam name="T">The type of the properties to get - must sub-class <see cref="T:urakawa.property.Property"/></typeparam>
            <returns>A list of all <typeparamref name="T"/> properties of <c>this</c>, possibly an empty list</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getProperty(System.Type)">
            <summary>
            Gets the first <see cref="T:urakawa.property.Property"/> of a the given <see cref="T:urakawa.property.Property"/> sub-type
            </summary>
            <param name="t">The given <see cref="T:urakawa.property.Property"/> subtype</param>
            <returns>The first property of the given subtype - possibly null</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getProperty``1">
            <summary>
            Gets the first <see cref="T:urakawa.property.Property"/> of a the given <see cref="T:urakawa.property.Property"/> sub-type
            </summary>
            <typeparam name="T">The type of the property to get - must sub-class <see cref="T:urakawa.property.Property"/></typeparam>
            <returns>The first <typeparamref name="T"/> property of this if it exists, else <c>null</c></returns>
        </member>
        <member name="M:urakawa.core.TreeNode.addProperties(System.Collections.Generic.IList{urakawa.property.Property})">
            <summary>
            Adds a <see cref="T:urakawa.property.Property"/> to the node
            </summary>
            <param name="props">The list of <see cref="T:urakawa.property.Property"/>s to add.</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when <paramref name="props"/> is null</exception>
        </member>
        <member name="M:urakawa.core.TreeNode.addProperty(urakawa.property.Property)">
            <summary>
            Adds a <see cref="T:urakawa.property.Property"/> to the node
            </summary>
            <param name="prop">The <see cref="T:urakawa.property.Property"/> to add. </param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when <paramref name="prop"/> is null</exception>
            <exception cref="T:urakawa.exception.PropertyAlreadyHasOwnerException">Thrown when <see cref="T:urakawa.property.Property"/> is already owned by another node</exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">Thrown when the new <see cref="T:urakawa.property.Property"/> belongs to a different <see cref="T:urakawa.Presentation"/></exception>
            <exception cref="T:urakawa.exception.PropertyCanNotBeAddedException">Thrown when <c><paramref name="prop"/>.<see cref="M:urakawa.property.Property.canBeAddedTo(urakawa.core.TreeNode)"/>(this)</c> returns <c>false</c></exception>
        </member>
        <member name="M:urakawa.core.TreeNode.removeProperties(System.Type)">
            <summary>
            Remove the <see cref="T:urakawa.property.Property"/>s of a given <see cref="T:System.Type"/> from this
            </summary>
            <param name="propType">Specify the type of properties to remove</param>
            <returns>The list of removed properties</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.removeProperties">
            <summary>
            Removes all <see cref="T:urakawa.property.Property"/>s from this
            </summary>
        </member>
        <member name="M:urakawa.core.TreeNode.removeProperty(urakawa.property.Property)">
            <summary>
            Removes a given <see cref="T:urakawa.property.Property"/>
            </summary>
            <param name="prop">The <see cref="T:urakawa.property.Property"/> to remove</param>
        </member>
        <member name="M:urakawa.core.TreeNode.hasProperties">
            <summary>
            Determines if this has any <see cref="T:urakawa.property.Property"/>s
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating if this has any properties</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.hasProperties(System.Type)">
            <summary>
            Determines if this has any <see cref="T:urakawa.property.Property"/>s of a given <see cref="T:System.Type"/>
            </summary>
            <param name="t">The given type</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if this has any properties</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.hasProperty(urakawa.property.Property)">
            <summary>
            Determines if a given <see cref="T:urakawa.property.Property"/> is owned by this
            </summary>
            <param name="prop">The property</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the given property is a property of this</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.copyChildren(urakawa.core.TreeNode)">
            <summary>
            Copies the children of the current instance to a given destination <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="destinationNode">The destination <see cref="T:urakawa.core.TreeNode"/></param>
            <remarks>The children are copied deep and any existing children of the destination <see cref="T:urakawa.core.TreeNode"/>
            are not removed</remarks>
        </member>
        <member name="M:urakawa.core.TreeNode.acceptDepthFirst(urakawa.core.visitor.ITreeNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/> in depth first mode.
            </summary>
            <param name="visitor">The <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/></param>
            <remarks>
            Remark that only <see cref="M:urakawa.core.visitor.ITreeNodeVisitor.preVisit(urakawa.core.TreeNode)"/> is executed during breadth-first tree traversal,
            since there is no notion of post in breadth first traversal
            </remarks>
        </member>
        <member name="M:urakawa.core.TreeNode.acceptBreadthFirst(urakawa.core.visitor.ITreeNodeVisitor)">
            <summary>
            Accept a <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/> in breadth first mode
            </summary>
            <param name="visitor">The <see cref="T:urakawa.core.visitor.ITreeNodeVisitor"/></param>
            <remarks>HACK: Not yet implemented, does nothing!!!!</remarks>
        </member>
        <member name="M:urakawa.core.TreeNode.acceptDepthFirst(urakawa.core.visitor.PreVisitDelegate,urakawa.core.visitor.PostVisitDelegate)">
            <summary>
            Visits the <see cref="T:urakawa.core.visitor.IVisitableTreeNode"/> depth-first
            </summary>
            <param name="preVisit">The pre-visit delegate - may be null</param>
            <param name="postVisit">The post visit delegate - may be null</param>
        </member>
        <member name="M:urakawa.core.TreeNode.acceptBreadthFirst(urakawa.core.visitor.PreVisitDelegate)">
            <summary>
            Visits the <see cref="T:urakawa.core.visitor.IVisitableTreeNode"/> breadth-first
            </summary>
            <param name="preVisit">The pre-visit delegate - may be null</param>
        </member>
        <member name="M:urakawa.core.TreeNode.clear">
            <summary>
            Clears the <see cref="T:urakawa.core.TreeNode"/> removing all children and <see cref="T:urakawa.property.Property"/>s
            </summary>
        </member>
        <member name="M:urakawa.core.TreeNode.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a TreeNode xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.core.TreeNode.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a TreeNode element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.core.TreeNode.indexOf(urakawa.core.TreeNode)">
            <summary>
            Gets the index of a given child <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="node">The given child <see cref="T:urakawa.core.TreeNode"/></param>
            <returns>The index of the given child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.TreeNode.getChild(System.Int32)">
            <summary>
            Gets the child <see cref="T:urakawa.core.TreeNode"/> at a given index
            </summary>
            <param name="index">The given index</param>
            <returns>The child <see cref="T:urakawa.core.TreeNode"/> at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.TreeNode.getChildCount"/>()-1</c></exception>
        </member>
        <member name="M:urakawa.core.TreeNode.getParent">
            <summary>
            Gets the parent <see cref="T:urakawa.core.TreeNode"/> of the instance
            </summary>
            <returns>The parent</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getChildCount">
            <summary>
            Gets the number of children
            </summary>
            <returns>The number of children</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getListOfChildren">
            <summary>
            Gets a list of the child <see cref="T:urakawa.core.TreeNode"/>s of this
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.copyProtected(System.Boolean,System.Boolean)">
            <summary>
            Make a copy of the node. The copy has the same presentation and no parent.
            </summary>
            <param name="deep">If true, then copy the node's entire subtree.  
            Otherwise, just copy the node itself.</param>
            <param name="inclProperties">If true, then copy the nodes property. 
            Otherwise, the copy has no property</param>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.copy(System.Boolean,System.Boolean)">
            <summary>
            Make a copy of the node. The copy will optionally be deep and will optionally include properties.
            The copy has the same presentation and no parent.
            </summary>
            <param name="deep">If true, then copy the node's entire subtree (ie. deep copy).  
            Otherwise, just copy the node itself.</param>
            <param name="inclProperties">If true, then copy the nodes property. 
            Otherwise, the copy has no property</param>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.copy(System.Boolean)">
            <summary>
            Make a copy of the node including the properties. The copy is optionally deep. 
            The copy has the same presentation and no parent.
            </summary>
            <param name="deep">If true, then copy the node's entire subtree.  
            Otherwise, just copy the node itself.</param>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.copy">
            <summary>
            Make a deep copy of the node including properties. The copy has the same presentation and no parent.
            </summary>
            <returns>A <see cref="T:urakawa.core.TreeNode"/> containing the copied data.</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.copyProperties(urakawa.core.TreeNode)">
            <summary>
            Copies the <see cref="T:urakawa.property.Property"/>s of the current instance to a given destination <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="destinationNode">The destination <see cref="T:urakawa.core.TreeNode"/></param>
        </member>
        <member name="M:urakawa.core.TreeNode.export(urakawa.Presentation)">
            <summary>
            Creates a new TreeNode with identical content (recursively) as this node,
            but compatible with the given Presentation (factories, managers,
            channels, etc.). 
            </summary>
            <param name="destPres">The destination Presentation to which this node (and all its content, recursively) should be exported.</param>
            <returns>The exported node</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when <paramref name="destPres"/> is null</exception>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown when the facotries of <paramref name="destPres"/> can not create a node in the sub-tree beginning at <c>this</c>
            or a property associated object for one of the nodes in the sub-tree
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.exportProtected(urakawa.Presentation)">
            <summary>
            Creates a new TreeNode with identical content (recursively) as this node,
            but compatible with the given Presentation (factories, managers,
            channels, etc.). 
            </summary>
            <param name="destPres">The destination Presentation to which this node (and all its content, recursively) should be exported.</param>
            <returns>The exported node</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when <paramref name="destPres"/> is null</exception>
            <exception cref="T:urakawa.exception.FactoryCannotCreateTypeException">
            Thrown when the facotries of <paramref name="destPres"/> can not create a node in the sub-tree beginning at <c>this</c>
            or a property associated object for one of the nodes in the sub-tree
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.getNextSibling">
            <summary>
            Gets the next sibling of <c>this</c>
            </summary>
            <returns>The next sibling of <c>this</c> or <c>null</c> if no next sibling exists</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.getPreviousSibling">
            <summary>
            Gets the previous sibling of <c>this</c>
            </summary>
            <returns>The previous sibling of <c>this</c> or <c>null</c> if no next sibling exists</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.isSiblingOf(urakawa.core.TreeNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.TreeNode"/> is a sibling of <c>this</c>
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a sibling of <c>this</c>, 
            otherwise<c>false</c></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.isAncestorOf(urakawa.core.TreeNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.TreeNode"/> is an ancestor of <c>this</c>
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is an ancestor of <c>this</c>, 
            otherwise<c>false</c></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.isDescendantOf(urakawa.core.TreeNode)">
            <summary>
            Tests if a given <see cref="T:urakawa.core.TreeNode"/> is a descendant of <c>this</c>
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if <paramref localName="node"/> is a descendant of <c>this</c>, 
            otherwise<c>false</c></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is <c>null</c>
            </exception>
            <remarks>This method is equivalent to <c>node.isAncestorOf(this)</c> 
            when <paramref localName="node"/> is not <c>null</c></remarks>
        </member>
        <member name="M:urakawa.core.TreeNode.insert(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Inserts a <see cref="T:urakawa.core.TreeNode"/> child at a given index. 
            The index of any children at or after the given index are increased by one
            </summary>
            <param name="node">The new child <see cref="T:urakawa.core.TreeNode"/> to insert,
            must be between 0 and the number of children as returned by member method.
            Must be an instance of 
            <see cref="M:urakawa.core.TreeNode.getChildCount"/></param>
            <param name="insertIndex">The index at which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="insertIndex"/> is out if range, 
            that is not between 0 and <c><see cref="M:urakawa.core.TreeNode.getChildCount"/>()</c></exception>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.detach">
            <summary>
            Detaches the instance <see cref="T:urakawa.core.TreeNode"/> from it's parent's children
            </summary>
            <returns>The detached <see cref="T:urakawa.core.TreeNode"/> (i.e. <c>this</c>)</returns>
        </member>
        <member name="M:urakawa.core.TreeNode.removeChild(System.Int32)">
            <summary>
            Removes the child at a given index. 
            </summary>
            <param name="index">The given index</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not the index of a child 
            (child indexes range from 0 to <c><see cref="M:urakawa.core.TreeNode.getChildCount"/>()-1</c>)
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.removeChild(urakawa.core.TreeNode)">
            <summary>
            Removes a given <see cref="T:urakawa.core.TreeNode"/> child. 
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> child to remove</param>
            <returns>The removed child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="node"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
        </member>
        <member name="M:urakawa.core.TreeNode.insertBefore(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.TreeNode"/> child before the given child.
            </summary>
            <param name="node">The new <see cref="T:urakawa.core.TreeNode"/> child node</param>
            <param name="anchorNode">The child before which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.insertAfter(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Inserts a new <see cref="T:urakawa.core.TreeNode"/> child after the given child.
            </summary>
            <param name="node">The new <see cref="T:urakawa.core.TreeNode"/> child node</param>
            <param name="anchorNode">The child after which to insert the new child</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="anchorNode"/> 
            have null values</exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="anchorNode"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.replaceChild(urakawa.core.TreeNode,System.Int32)">
            <summary>
            Replaces the child <see cref="T:urakawa.core.TreeNode"/> at a given index with a new <see cref="T:urakawa.core.TreeNode"/>
            </summary>
            <param name="node">The new <see cref="T:urakawa.core.TreeNode"/> with which to replace</param>
            <param name="index">The index of the child <see cref="T:urakawa.core.TreeNode"/> to replace</param>
            <returns>The replaced child <see cref="T:urakawa.core.TreeNode"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paranref localName="node"/> is null</exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when index is out if range, 
            that is when <paramref localName="index"/> is not between 0 
            and <c><see cref="M:urakawa.core.TreeNode.getChildCount"/>()-1</c>c&gt;</exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.replaceChild(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Replaces an existing child <see cref="T:urakawa.core.TreeNode"/> with i new one
            </summary>
            <param name="node">The new child with which to replace</param>
            <param name="oldNode">The existing child node to replace</param>
            <returns>The replaced <see cref="T:urakawa.core.TreeNode"/> child</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="oldNode"/> 
            have null values
            </exception>
            <exception cref="T:urakawa.exception.NodeDoesNotExistException">
            Thrown when <paramref localName="oldNode"/> is not a child of the instance <see cref="T:urakawa.core.TreeNode"/></exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.appendChild(urakawa.core.TreeNode)">
            <summary>
            Appends a child <see cref="T:urakawa.core.TreeNode"/> to the end of the list of children
            </summary>
            <param name="node">The new child to append</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameters <paramref localName="node"/> and/or <paramref localName="oldNode"/> 
            have null values
            </exception>
            <exception cref="T:urakawa.exception.NodeNotDetachedException">
            Thrown when <paramref localName="node"/> is already attached as a child of a parent 
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.appendChildrenOf(urakawa.core.TreeNode)">
            <summary>
            Appends the children of a given <see cref="T:urakawa.core.TreeNode"/> to <c>this</c>, 
            leaving the given <see cref="T:urakawa.core.TreeNode"/> without children
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.Presentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.swapWith(urakawa.core.TreeNode)">
            <summary>
            Swaps <c>this</c> with a given <see cref="T:urakawa.core.TreeNode"/> 
            </summary>
            <param name="node">The given <see cref="T:urakawa.core.TreeNode"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when parameter <paramref localName="node"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when parameter <paramref localName="node"/> belongs to a different <see cref="T:urakawa.Presentation"/>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsAncestorException">
            Thrown when parameter <paramref localName="node"/> is an ancestor of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsDescendantException">
            Thrown when <paramref localName="node"/> is a descendant of <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeIsSelfException">
            Thrown when parameter <paramref localName="node"/> is identical to <c>this</c>
            </exception>
            <exception cref="T:urakawa.exception.NodeHasNoParentException">
            Thrown when <c>this</c> or <paramref name="node"/> has no parent
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.splitChildren(System.Int32,System.Boolean)">
            <summary>
            Splits <c>this</c> at the child at a given <paramref localName="index"/>, 
            producing a new <see cref="T:urakawa.core.TreeNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and leaving <c>this</c> with the children at indexes <c>0</c> to <paramref localName="index"/>-1
            </summary>
            <param name="index">The index of the child at which to split</param>
            <param name="copyProperties">
            A <see cref="T:System.Boolean"/> indicating the <see cref="T:urakawa.property.Property"/>s of <c>this</c> 
            should be copied to the new <see cref="T:urakawa.core.TreeNode"/>
            </param>
            <returns>
            The new <see cref="T:urakawa.core.TreeNode"/> with the children 
            at indexes <c><paramref localName="index"/></c> to <c>getChildCount()-1</c> 
            and optionally with a copy of the <see cref="T:urakawa.property.Property"/>s
            </returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="index"/> is out of bounds, 
            that is not between <c>0</c> and <c>getChildCount()-1</c>
            </exception>
        </member>
        <member name="M:urakawa.core.TreeNode.swapWithPreviousSibling">
            <summary>
            Swaps <c>this</c> with the previous sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no previous sibling).
            </returns>
        </member>
        <member name="M:urakawa.core.TreeNode.swapWithNextSibling">
            <summary>
            Swaps <c>this</c> with the next sibling of <c>this</c>
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> indicating if the swap was succesfull 
            (the swap is not succesfull when there is no next sibling).
            </returns>
        </member>
        <member name="M:urakawa.core.TreeNode.valueEquals(urakawa.core.TreeNode)">
            <summary>
            Compares <c>this</c> with another given <see cref="T:urakawa.core.TreeNode"/> to test for equality. 
            The comparison is deep in that any child <see cref="T:urakawa.core.TreeNode"/>s are also tested,
            but the ancestry is not tested
            </summary>
            <param name="other">The other <see cref="T:urakawa.core.TreeNode"/></param>
            <returns><c>true</c> if the <see cref="T:urakawa.core.TreeNode"/>s are equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.core.TreeNode.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.core.TreeNode"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.core.TreeNode.childAdded">
            <summary>
            Event fired after the <see cref="T:urakawa.core.TreeNode"/> has been added as a child 
            of another <see cref="T:urakawa.core.TreeNode"/> (now it's parent)
            </summary>
        </member>
        <member name="E:urakawa.core.TreeNode.childRemoved">
            <summary>
            Event fired after the <see cref="T:urakawa.core.TreeNode"/> has been removed as a child 
            of another <see cref="T:urakawa.core.TreeNode"/> (porperly it's parent)
            </summary>
        </member>
        <member name="E:urakawa.core.TreeNode.propertyAdded">
            <summary>
            Event fired after a <see cref="T:urakawa.property.Property"/> has been added to a <see cref="T:urakawa.core.TreeNode"/>
            </summary>
        </member>
        <member name="E:urakawa.core.TreeNode.propertyRemoved">
            <summary>
            Event fired after a <see cref="T:urakawa.property.Property"/> has been removed from a <see cref="T:urakawa.core.TreeNode"/>
            </summary>
        </member>
        <member name="T:urakawa.Presentation">
            <summary>
            The primary container for a document tree consisting of <see cref="T:urakawa.core.TreeNode"/>s,
            includes factories and managers for:
            <list type="bullet">
            <item><see cref="T:urakawa.property.Property"/>s</item>
            <item><see cref="T:urakawa.property.channel.Channel"/>s</item>
            <item><see cref="T:urakawa.media.IMedia"/></item>
            <item><see cref="T:urakawa.media.data.MediaData"/></item>
            <item><see cref="T:urakawa.media.data.IDataProvider"/>s</item>
            <item><see cref="T:urakawa.metadata.Metadata"/></item>
            </list>
            </summary>
        </member>
        <member name="M:urakawa.Presentation.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.Presentation.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.Presentation.notifyLanguageChanged(urakawa.Presentation,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.Presentation.languageChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.Presentation"/> whoose language has changed</param>
            <param name="newLang">The new language</param>
            <param name="prevLang">The language prior to the change</param>
        </member>
        <member name="M:urakawa.Presentation.notifyRootUriChanged(urakawa.Presentation,System.Uri,System.Uri)">
            <summary>
            Fires the <see cref="E:urakawa.Presentation.rootUriChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.Presentation"/> whoose root uri changed</param>
            <param name="newUri"></param>
            <param name="prevUri"></param>
        </member>
        <member name="M:urakawa.Presentation.notifyRootNodeChanged(urakawa.Presentation,urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Fires the <see cref="E:urakawa.Presentation.rootNodeChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.Presentation"/> whoose root node has changed</param>
            <param name="newRoot">The new root node</param>
            <param name="prevRoot">Thye root node prior to the change</param>
        </member>
        <member name="M:urakawa.Presentation.notifyMetadataAdded(urakawa.metadata.Metadata)">
            <summary>
            Fires the <see cref="E:urakawa.Presentation.metadataAdded"/> event
            </summary>
            <param name="addee">The <see cref="T:urakawa.metadata.Metadata"/> item that was added</param>
        </member>
        <member name="M:urakawa.Presentation.notifyMetadataDeleted(urakawa.metadata.Metadata)">
            <summary>
            Fires the <see cref="E:urakawa.Presentation.metadataDeleted"/> event
            </summary>
            <param name="deletee">The <see cref="T:urakawa.metadata.Metadata"/> item that was removed</param>
        </member>
        <member name="M:urakawa.Presentation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.Presentation.getProject">
            <summary>
            Gets the <see cref="T:urakawa.Project"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setProject(urakawa.Project)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with an owning <see cref="T:urakawa.Project"/>
            </summary>
            <param name="proj">The new <see cref="T:urakawa.Project"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="proj"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.Project"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getDataModelFactory">
            <summary>
            Gets the <see cref="T:urakawa.DataModelFactory"/> associated with the <see cref="T:urakawa.Presentation"/>
            via. it's owning <see cref="T:urakawa.Project"/>
            </summary>
            <returns>The <see cref="T:urakawa.DataModelFactory"/></returns>
        </member>
        <member name="M:urakawa.Presentation.setLanguage(System.String)">
            <summary>
            Sets the language of the presentation
            </summary>
            <param name="lang">The new language, can be null but not an empty string</param>
        </member>
        <member name="M:urakawa.Presentation.getLanguage">
            <summary>
            Gets the language of the presentation
            </summary>
            <returns>The language</returns>
        </member>
        <member name="M:urakawa.Presentation.cleanup">
            <summary>
            Removes any <see cref="T:urakawa.media.data.MediaData"/> and <see cref="T:urakawa.media.data.IDataProvider"/>s that are not used by any <see cref="T:urakawa.core.TreeNode"/> in the document tree
            or by any <see cref="T:urakawa.command.ICommand"/> in the <see cref="T:urakawa.undo.UndoRedoManager"/> stacks (undo/redo/transaction).
            </summary>
        </member>
        <member name="M:urakawa.Presentation.getRootNode">
            <summary>
            Gets the root <see cref="T:urakawa.core.TreeNode"/> of <c>this</c>
            </summary>
            <returns>The root</returns>
            <remarks>
            The root <see cref="T:urakawa.core.TreeNode"/> is initialized lazily:
            If the root <see cref="T:urakawa.core.TreeNode"/> has not been explicitly set using the <see cref="M:urakawa.Presentation.setRootNode(urakawa.core.TreeNode)"/> method,
            a call to <see cref="M:urakawa.Presentation.getRootNode"/> will initialize the <see cref="T:urakawa.Presentation"/> with a default <see cref="T:urakawa.core.TreeNode"/>
            as returned by <c>getTreeNodeFactory().createNode()</c>
            </remarks>
        </member>
        <member name="M:urakawa.Presentation.setRootNode(urakawa.core.TreeNode)">
            <summary>
            Sets the root <see cref="T:urakawa.core.TreeNode"/> of <c>this</c>
            </summary>
            <param name="newRoot">The new root - a <c>null</c> value is allowed</param>
            <exception cref="T:urakawa.exception.NodeHasParentException">
            The when the new root has a parent
            </exception>
            <exception cref="T:urakawa.exception.NodeInDifferentPresentationException">
            Thrown when the new root belongs to a different <see cref="T:urakawa.Presentation"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getTreeNodeFactory">
            <summary>
            Gets the <see cref="T:urakawa.core.TreeNodeFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.core.TreeNodeFactory"/> of the <see cref="T:urakawa.Presentation"/></returns>
            <remark>
            The <see cref="T:urakawa.core.TreeNodeFactory"/> of a <see cref="T:urakawa.Project"/> is initialized lazily:
            If the <see cref="T:urakawa.Presentation"/> has not been explicitly initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/> using the <see cref="M:urakawa.Presentation.setTreeNodeFactory(urakawa.core.TreeNodeFactory)"/> method, 
            a call to <see cref="M:urakawa.Presentation.getTreeNodeFactory"/> will initialize the <see cref="T:urakawa.Presentation"/> with a default <see cref="T:urakawa.core.TreeNodeFactory"/>
            as returned by <c>getDataModelFactory().createTreeNodeFactory()</c>
            </remark>
        </member>
        <member name="M:urakawa.Presentation.setTreeNodeFactory(urakawa.core.TreeNodeFactory)">
            <summary>
            Initializes the presentation with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </summary>
            <param name="fact">The <see cref="T:urakawa.core.TreeNodeFactory"/></param>
        </member>
        <member name="M:urakawa.Presentation.getPropertyFactory">
            <summary>
            Gets the <see cref="T:urakawa.property.PropertyFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.property.PropertyFactory"/> of the <see cref="T:urakawa.Presentation"/></returns>
            <remark>
            The <see cref="T:urakawa.property.PropertyFactory"/> of a <see cref="T:urakawa.Project"/> is initialized lazily:
            If the <see cref="T:urakawa.Presentation"/> has not been explicitly initialized with a <see cref="T:urakawa.property.PropertyFactory"/> using the <see cref="M:urakawa.Presentation.setPropertyFactory(urakawa.property.PropertyFactory)"/> method, 
            a call to <see cref="M:urakawa.Presentation.getPropertyFactory"/> will initialize the <see cref="T:urakawa.Presentation"/> with a default <see cref="T:urakawa.property.PropertyFactory"/>
            as returned by <c>getDataModelFactory().createPropertyFactory()</c>
            </remark>
        </member>
        <member name="M:urakawa.Presentation.setPropertyFactory(urakawa.property.PropertyFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.property.PropertyFactory"/>
            </summary>
            <param name="fact"></param>
        </member>
        <member name="M:urakawa.Presentation.getUndoRedoManager">
            <summary>
            Gets the <see cref="T:urakawa.undo.UndoRedoManager"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.undo.UndoRedoManager"/> of the <see cref="T:urakawa.Presentation"/></returns>
            <remark>
            The <see cref="T:urakawa.undo.UndoRedoManager"/> of a <see cref="T:urakawa.Project"/> is initialized lazily:
            If the <see cref="T:urakawa.Presentation"/> has not been explicitly initialized with a <see cref="T:urakawa.undo.UndoRedoManager"/> using the <see cref="M:urakawa.Presentation.setUndoRedoManager(urakawa.undo.UndoRedoManager)"/> method, 
            a call to <see cref="M:urakawa.Presentation.getUndoRedoManager"/> will initialize the <see cref="T:urakawa.Presentation"/> with a default <see cref="T:urakawa.undo.UndoRedoManager"/>
            as returned by <c>getDataModelFactory().createUndoRedoManager()</c>
            </remark>
        </member>
        <member name="M:urakawa.Presentation.setUndoRedoManager(urakawa.undo.UndoRedoManager)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> 
            </summary>
            <param name="mngr"></param>
        </member>
        <member name="M:urakawa.Presentation.getCommandFactory">
            <summary>
            Gets the <see cref="T:urakawa.command.CommandFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.command.CommandFactory"/> of the <see cref="T:urakawa.Presentation"/></returns>
            <remark>
            The <see cref="T:urakawa.command.CommandFactory"/> of a <see cref="T:urakawa.Project"/> is initialized lazily:
            If the <see cref="T:urakawa.Presentation"/> has not been explicitly initialized with a <see cref="T:urakawa.command.CommandFactory"/> using the <see cref="M:urakawa.Presentation.setCommandFactory(urakawa.command.CommandFactory)"/> method, 
            a call to <see cref="M:urakawa.Presentation.getCommandFactory"/> will initialize the <see cref="T:urakawa.Presentation"/> with a default <see cref="T:urakawa.command.CommandFactory"/>
            as returned by <c>getDataModelFactory().createCommandFactory()</c>
            </remark>
        </member>
        <member name="M:urakawa.Presentation.setCommandFactory(urakawa.command.CommandFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.command.CommandFactory"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.command.CommandFactory"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.command.CommandFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getMediaFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.IMediaFactory"/> of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.IMediaFactory"/> of the <see cref="T:urakawa.Presentation"/></returns>
            <remark>
            The <see cref="T:urakawa.media.IMediaFactory"/> of a <see cref="T:urakawa.Project"/> is initialized lazily:
            If the <see cref="T:urakawa.Presentation"/> has not been explicitly initialized with a <see cref="T:urakawa.media.IMediaFactory"/> using the <see cref="M:urakawa.Presentation.setMediaFactory(urakawa.media.IMediaFactory)"/> method, 
            a call to <see cref="M:urakawa.Presentation.getMediaFactory"/> will initialize the <see cref="T:urakawa.Presentation"/> with a default <see cref="T:urakawa.media.IMediaFactory"/>
            as returned by <c>getDataModelFactory().createMediaFactory()</c>
            </remark>
        </member>
        <member name="M:urakawa.Presentation.setMediaFactory(urakawa.media.IMediaFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.media.IMediaFactory"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.media.IMediaFactory"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.media.IMediaFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getRootUri">
            <summary>
            Gets the root <see cref="T:System.Uri"/> of the <see cref="T:urakawa.Presentation"/>
            </summary>
            <returns>The root <see cref="T:System.Uri"/></returns>
            <remarks>
            The root <see cref="T:System.Uri"/> is initialized lazily:
            If the root <see cref="T:System.Uri"/> has not been set explicitly using the <see cref="M:urakawa.Presentation.setRootUri(System.Uri)"/> method,
            
            </remarks>
        </member>
        <member name="M:urakawa.Presentation.setRootUri(System.Uri)">
            <summary>
            Sets the 
            </summary>
            <param name="newRootUri">The new base uri</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when the new uri is <c>null</c></exception>
            <exception cref="T:urakawa.exception.InvalidUriException">Thrown when the given uri is not absolute</exception>
        </member>
        <member name="M:urakawa.Presentation.getListOfMediaUsedByTreeNode(urakawa.core.TreeNode)">
            <summary>
            Gets a list of the <see cref="T:urakawa.media.IMedia"/> used by a given <see cref="T:urakawa.core.TreeNode"/>. 
            </summary>
            <param name="node">The node</param>
            <returns>The list</returns>
            <remarks>
            An <see cref="T:urakawa.media.IMedia"/> is considered to be used by a <see cref="T:urakawa.core.TreeNode"/> if the media
            is linked to the node via. a <see cref="T:urakawa.property.channel.ChannelsProperty"/>
            </remarks>
        </member>
        <member name="M:urakawa.Presentation.getListOfUsedMedia">
            <summary>
            Gets the list of <see cref="T:urakawa.media.IMedia"/> used by the <see cref="T:urakawa.core.TreeNode"/> tree of the presentation. 
            Remark that a 
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.Presentation.getChannelFactory">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.ChannelFactory"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setChannelFactory(urakawa.property.channel.ChannelFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.property.channel.ChannelFactory"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.property.channel.ChannelFactory"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.property.channel.ChannelFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.ChannelsManager"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setChannelsManager(urakawa.property.channel.ChannelsManager)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.property.channel.ChannelsManager"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataManager"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setMediaDataManager(urakawa.media.data.MediaDataManager)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.media.data.MediaDataManager"/>
            </summary>
            <param name="mngr">The new <see cref="T:urakawa.media.data.MediaDataManager"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="mngr"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.media.data.MediaDataManager"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataFactory"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setMediaDataFactory(urakawa.media.data.MediaDataFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.media.data.MediaDataFactory"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.media.data.MediaDataFactory"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.media.data.MediaDataFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getDataProviderManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderManager"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setDataProviderManager(urakawa.media.data.IDataProviderManager)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </summary>
            <param name="mngr">The new <see cref="T:urakawa.media.data.IDataProviderManager"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="mngr"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.media.data.IDataProviderManager"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getDataProviderFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProviderFactory"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setDataProviderFactory(urakawa.media.data.IDataProviderFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.media.data.IDataProviderFactory"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.media.data.IDataProviderFactory"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.media.data.IDataProviderFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.getMetadataFactory">
            <summary>
            Gets the <see cref="T:urakawa.metadata.MetadataFactory"/> of <c>this</c>
            </summary>
            <returns>The factory</returns>
            <exception cref="T:urakawa.exception.IsNotInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has not been initialized with a <see cref="T:urakawa.core.TreeNodeFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.setMetadataFactory(urakawa.metadata.MetadataFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Presentation"/> with a <see cref="T:urakawa.metadata.MetadataFactory"/>
            </summary>
            <param name="fact">The new <see cref="T:urakawa.metadata.MetadataFactory"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is null
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Presentation"/> has already been initialized with a <see cref="T:urakawa.metadata.MetadataFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.addMetadata(urakawa.metadata.Metadata)">
            <summary>
            Adds a <see cref="T:urakawa.metadata.Metadata"/> to the <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="metadata">The <see cref="T:urakawa.metadata.Metadata"/> to add</param>
        </member>
        <member name="M:urakawa.Presentation.getListOfMetadata">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:urakawa.metadata.Metadata"/>
            in the <see cref="T:urakawa.Project"/>
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> of metadata <see cref="T:urakawa.metadata.Metadata"/></returns>
        </member>
        <member name="M:urakawa.Presentation.getListOfMetadata(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:urakawa.metadata.Metadata"/>
            in the <see cref="T:urakawa.Project"/> with a given name
            </summary>
            <param name="name">The given name</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:urakawa.metadata.Metadata"/></returns>
        </member>
        <member name="M:urakawa.Presentation.deleteMetadata(System.String)">
            <summary>
            Deletes all <see cref="T:urakawa.metadata.Metadata"/>s with a given name
            </summary>
            <param name="name">The given name</param>
        </member>
        <member name="M:urakawa.Presentation.deleteMetadata(urakawa.metadata.Metadata)">
            <summary>
            Deletes a given <see cref="T:urakawa.metadata.Metadata"/>
            </summary>
            <param name="metadata">The given <see cref="T:urakawa.metadata.Metadata"/></param>
            <exception cref="T:urakawa.exception.IsNotManagerOfException">
            When <paramref name="metadata"/> does not belong to the <see cref="T:urakawa.Presentation"/>
            </exception>
        </member>
        <member name="M:urakawa.Presentation.clear">
            <summary>
            Clears the <see cref="T:urakawa.Presentation"/>,
            setting all owned members to <c>null</c>
            </summary>
        </member>
        <member name="M:urakawa.Presentation.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a Presentation xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.Presentation.xukInXukAbleFromChild(System.Xml.XmlReader,urakawa.xuk.IXukAble,urakawa.progress.ProgressHandler)">
            <summary>
            Reads an <see cref="T:urakawa.xuk.IXukAble"/> instance from one of the children of a xuk element,
            more specifically the one with matching Xuk QName
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="xukAble">The instance to read</param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.Presentation.xukInRootNode(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads the root <see cref="T:urakawa.core.TreeNode"/> of <c>this</c> from a <c>mRootNode</c> xuk xml element
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
            <remarks>The read is considered succesful even if no valid root node is found</remarks>
        </member>
        <member name="M:urakawa.Presentation.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a Presentation xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.Presentation.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a Presentation element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.Presentation.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a Presentation element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.Presentation.valueEquals(urakawa.Presentation)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="E:urakawa.Presentation.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.Presentation"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.Presentation.languageChanged">
            <summary>
            Event fired after the language of the <see cref="T:urakawa.Presentation"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.Presentation.rootUriChanged">
            <summary>
            Fired when the base <see cref="T:System.Uri"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.Presentation.rootNodeChanged">
            <summary>
            Event fired after the root <see cref="T:urakawa.core.TreeNode"/> of the <see cref="T:urakawa.Presentation"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.Presentation.metadataAdded">
            <summary>
            Event fired after a <see cref="T:urakawa.metadata.Metadata"/> item has been added to the <see cref="T:urakawa.Presentation"/>
            </summary>
        </member>
        <member name="E:urakawa.Presentation.metadataDeleted">
            <summary>
            Event fired after a <see cref="T:urakawa.metadata.Metadata"/> item has been removed from the <see cref="T:urakawa.Presentation"/>
            </summary>
        </member>
        <member name="T:urakawa.events.media.data.NameChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.data.MediaData.nameChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.NameChangedEventArgs.#ctor(urakawa.media.data.MediaData,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.MediaData"/> and the new+previous name of the <see cref="T:urakawa.media.data.MediaData"/>
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.MediaData"/> of the event</param>
            <param name="newNameValue">The new name after the change</param>
            <param name="prevNameValue">The name prior to the change</param>
        </member>
        <member name="F:urakawa.events.media.data.NameChangedEventArgs.NewName">
            <summary>
            The new name after the change
            </summary>
        </member>
        <member name="F:urakawa.events.media.data.NameChangedEventArgs.PreviousName">
            <summary>
            The name prior to the change
            </summary>
        </member>
        <member name="T:urakawa.events.metadata.NameChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.metadata.Metadata.nameChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.metadata.NameChangedEventArgs.#ctor(urakawa.metadata.Metadata,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.metadata.Metadata"/> of the event
            and the new+previous name
            </summary>
            <param name="source">The source <see cref="T:urakawa.metadata.Metadata"/> of the event</param>
            <param name="newNM">The new name</param>
            <param name="prevName">The name prior to the change</param>
        </member>
        <member name="F:urakawa.events.metadata.NameChangedEventArgs.NewName">
            <summary>
            The new name
            </summary>
        </member>
        <member name="F:urakawa.events.metadata.NameChangedEventArgs.PreviousName">
            <summary>
            The name prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.PropertyAlreadyHasOwnerException">
            <summary>
            Thrown when trying to assign to a <see cref="T:urakawa.core.TreeNode"/> a <see cref="T:urakawa.property.Property"/> 
            that is already to another <see cref="T:urakawa.core.TreeNode"/>
            </summary>
        </member>
        <member name="M:urakawa.exception.PropertyAlreadyHasOwnerException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.PropertyAlreadyHasOwnerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsNotInitializedException">
            <summary>
            Exception thrown when an object is being used before it has been initialized
            </summary>
        </member>
        <member name="M:urakawa.exception.IsNotInitializedException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.ChannelDoesNotExistException">
            <summary>
            This exception should be thrown when trying to remove a Channel
            whose localName does not exist in the list of current channels.
            </summary>
        </member>
        <member name="M:urakawa.exception.ChannelDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.ChannelDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.undo.UndoRedoManager">
            <summary>
            The command manager.
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyTransactionStarted">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.transactionStarted"/> event
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyTransactionEnded">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.transactionEnded"/> event
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyTransactionCancelled">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.transactionCancelled"/> event
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyCommandDone(urakawa.command.ICommand)">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.commandDone"/> event
            </summary>
            <param name="doneCmd">The <see cref="T:urakawa.command.ICommand"/> that was done</param>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyCommandUnDone(urakawa.command.ICommand)">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.commandUnDone"/> event
            </summary>
            <param name="unDoneCmd">The <see cref="T:urakawa.command.ICommand"/> that was un-done</param>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.notifyCommandReDone(urakawa.command.ICommand)">
            <summary>
            Fires the <see cref="E:urakawa.undo.UndoRedoManager.commandReDone"/> event
            </summary>
            <param name="reDoneCmd">The <see cref="T:urakawa.command.ICommand"/> that was re-done</param>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.getListOfUndoStackCommands">
            <summary>
            Gets a list of the <see cref="T:urakawa.command.ICommand"/>s currently in the undo stack
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.getListOfRedoStackCommands">
            <summary>
            Gets a list of the <see cref="T:urakawa.command.ICommand"/>s currently in the redo stack
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.getListOfCommandsInCurrentTransactions">
            <summary>
            Gets a list of the <see cref="T:urakawa.command.ICommand"/>s in the currently active transactions.
            </summary>
            <returns>The list - empty if no transactions are currently active</returns>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.getListOfUsedMediaData">
            <summary>
            Gets a list of all <see cref="T:urakawa.media.data.MediaData"/> used by the undo/redo manager associated <see cref="T:urakawa.command.ICommand"/>s,
            here a <see cref="T:urakawa.command.ICommand"/> is considered associated with the manager if it is in the undo or redo stacks 
            or if it is part of the currently active transaction
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.#ctor">
            <summary>
            Create an empty command manager.
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.getUndoShortDescription">
            <summary>
            Get the name of the next exception command.
            </summary>
            <exception cref="T:urakawa.exception.CannotUndoException">Thrown when there is no command to exception.</exception>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.undo">
            <summary>
            Undo the last executed command.
            </summary>
            <exception cref="T:urakawa.exception.CannotUndoException">Thrown when there is no command to undo.</exception>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.getRedoShortDescription">
            <summary>
            Get the name of the next redo command.
            </summary>
            <exception cref="T:urakawa.exception.CannotRedoException">Thrown when there is no command to redo.</exception>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.redo">
            <summary>
            Redo the last unexecuted command.
            </summary>
            <exception cref="T:urakawa.exception.CannotRedoException">Thrown when there is no command to redo.</exception>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.execute(urakawa.command.ICommand)">
            <summary>
            Execute and register the given command in the exception history and clear the redo history.
            </summary>
            <param name="command">The command to execute</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when a null command is given.</exception>
            <exception cref="T:urakawa.exception.IrreversibleCommandDuringActiveUndoRedoTransactionException"></exception>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.pushCommand(urakawa.command.ICommand)">
            <summary>
            Pushes a <see cref="T:urakawa.command.ICommand"/> into the undo stack or appends it to the currently active transaction, 
            if one such exists
            </summary>
            <param name="command">The command</param>
            <exception cref="T:urakawa.exception.IrreversibleCommandDuringActiveUndoRedoTransactionException">
            When trying to push a irreversible <see cref="T:urakawa.command.ICommand"/> during an active transaction
            </exception>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.canUndo">
            <summary>
            Return true if the exception is history is non-empty.
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.canRedo">
            <summary>
            Return true if the redo is history is non-empty.
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.startTransaction(System.String,System.String)">
            <summary>
            Starts a transaction: marks the current level in the history as the point where the transaction begins.
            Any following call to <see cref="M:urakawa.undo.UndoRedoManager.execute(urakawa.command.ICommand)"/> will push the a <see cref="T:urakawa.command.ICommand"/> into the history and execute it normally.
            After the call, <see cref="M:urakawa.undo.UndoRedoManager.isTransactionActive"/> must return true. 
            Transactions can be nested, so programmers must make sure to start and end/cancel transactions in pairs 
            (e.g. a call to <see cref="M:urakawa.undo.UndoRedoManager.endTransaction"/> for each <see cref="M:urakawa.undo.UndoRedoManager.startTransaction(System.String,System.String)"/>).
            A transaction can be canceled (rollback), and all <see cref="T:urakawa.command.ICommand"/>s un-executed 
            by calling <see cref="M:urakawa.undo.UndoRedoManager.cancelTransaction"/>.
            </summary>
            <param name="shortDesc">
            A short human-readable decription of the transaction, 
            if <c>null</c> a default short description will be generated based on the short descriptions of the <see cref="T:urakawa.command.ICommand"/>s in the transaction
            </param>
            <param name="longDesc">
            A long human-readable decription of the transaction, 
            if <c>null</c> a default long description will be generated based on the long descriptions of the <see cref="T:urakawa.command.ICommand"/>s in the transaction
            </param>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.endTransaction">
            <summary>
            Ends the active transaction: 
            Wraps any <see cref="T:urakawa.command.ICommand"/>s executed since the latest <see cref="M:urakawa.undo.UndoRedoManager.startTransaction(System.String,System.String)"/> call
            in a <see cref="T:urakawa.command.CompositeCommand"/> and pushes this to the undo stack.
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.cancelTransaction">
            <summary>
            Cancels the active transaction:
            Any <see cref="T:urakawa.command.ICommand"/>s executed since the latest <see cref="M:urakawa.undo.UndoRedoManager.startTransaction(System.String,System.String)"/> call
            are un-executed
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.isTransactionActive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating is there is a currently active undo/redo transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.flushCommands">
            <summary>
            Clears the manager of commands, clearing the undo and redo stacks
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.clear">
            <summary>
            Clearing the <see cref="T:urakawa.undo.UndoRedoManager"/>, killing all active transactions
            and flushing <see cref="T:urakawa.command.ICommand"/>s from the undo and redo stacks
            </summary>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a UndoRedoManager xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.undo.UndoRedoManager.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a UndoRedoManager element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.undo.UndoRedoManager"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.transactionStarted">
            <summary>
            Event fired after a transaction has started
            </summary>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.transactionEnded">
            <summary>
            Event fired after a transaction has ended
            </summary>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.transactionCancelled">
            <summary>
            Event fired after a transaction has been cancelled
            </summary>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.commandDone">
            <summary>
            Event fired after a command has been done/executed via the <see cref="T:urakawa.undo.UndoRedoManager"/>
            </summary>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.commandUnDone">
            <summary>
            Event fired after a command has been undone <see cref="T:urakawa.undo.UndoRedoManager"/>
            </summary>
        </member>
        <member name="E:urakawa.undo.UndoRedoManager.commandReDone">
            <summary>
            Event fired after a command has been done/executed via the <see cref="T:urakawa.undo.UndoRedoManager"/>
            </summary>
        </member>
        <member name="T:urakawa.media.ExternalVideoMedia">
            <summary>
            VideoMedia is the video object.
            It is time-based, comes from an external source, and has a visual presence.
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.notifyClipChanged(urakawa.media.ExternalVideoMedia,urakawa.media.timing.Time,urakawa.media.timing.Time,urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Fires the <see cref="E:urakawa.media.ExternalVideoMedia.clipChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.ExternalVideoMedia"/> whoose clip has changed</param>
            <param name="newCB">The new clip begin value</param>
            <param name="newCE">The new clip begin value</param>
            <param name="prevCB">The clip begin value prior to the change</param>
            <param name="prevCE">The clip end value prior to the change</param>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.notifySizeChanged(urakawa.media.ExternalVideoMedia,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fires the <see cref="E:urakawa.media.ExternalVideoMedia.sizeChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.ExternalVideoMedia"/> whoose size has changed</param>
            <param name="newHeight">The new height of the <see cref="T:urakawa.media.ExternalVideoMedia"/></param>
            <param name="newWidth">The new width of the <see cref="T:urakawa.media.ExternalVideoMedia"/></param>
            <param name="prevHeight">The height of the <see cref="T:urakawa.media.ExternalVideoMedia"/> prior to the change</param>
            <param name="prevWidth">The width of the <see cref="T:urakawa.media.ExternalVideoMedia"/> prior to the change</param>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.isContinuous">
            <summary>
            This always returns true, because
            video media is always considered continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.isDiscrete">
            <summary>
            This always returns false, because
            video media is never considered discrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.isSequence">
            <summary>
            This always returns false, because
            a single media object is never considered to be a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.copyProtected">
            <summary>
            Copy function which returns an <see cref="T:urakawa.media.ExternalVideoMedia"/> object
            </summary>
            <returns>a copy of this</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.copy">
            <summary>
            Copy function which returns an <see cref="T:urakawa.media.ExternalVideoMedia"/> object
            </summary>
            <returns>a copy of this</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the external video media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external video media</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.export(urakawa.Presentation)">
            <summary>
            Exports the external video media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external video media</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.getWidth">
            <summary>
            Return the video width
            </summary>
            <returns>The width</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.getHeight">
            <summary>
            Return the video height
            </summary>
            <returns>The height</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.setWidth(System.Int32)">
            <summary>
            Sets the video width
            </summary>
            <param name="width">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.setHeight(System.Int32)">
            <summary>
            Sets the video height
            </summary>
            <param name="height">The new height</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.setSize(System.Int32,System.Int32)">
            <summary>
            Sets the video size
            </summary>
            <param name="height">The new height</param>
            <param name="width">The new width</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the new width or height is negative
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a VideoMedia xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a VideoMedia element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the write was succesful</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.getDuration">
            <summary>
            Gets the duration of <c>this</c>
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.getClipBegin">
            <summary>
            Gets the clip begin <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>Clip begin</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.getClipEnd">
            <summary>
            Gets the clip end <see cref="T:urakawa.media.timing.Time"/> of <c>this</c>
            </summary>
            <returns>Clip end</returns>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.setClipBegin(urakawa.media.timing.Time)">
            <summary>
            Sets the clip begin <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="beginPoint">The new clip begin <see cref="T:urakawa.media.timing.Time"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="beginPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="beginPoint"/> is beyond clip end of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.setClipEnd(urakawa.media.timing.Time)">
            <summary>
            Sets the clip end <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="endPoint">The new clip end <see cref="T:urakawa.media.timing.Time"/></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref localName="endPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref localName="endPoint"/> is before clip begin of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.split(urakawa.media.timing.Time)">
            <summary>
            Splits <c>this</c> at a given split point in <see cref="T:urakawa.media.timing.Time"/>. 
            The retains the clip between clip begin and the split point and a new <see cref="T:urakawa.media.IVideoMedia"/>
            is created consisting of the clip from the split point to clip end
            </summary>
            <param name="splitPoint">The split point</param>
            <returns>The new <see cref="T:urakawa.media.IVideoMedia"/> containing the latter prt of the clip</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="splitPoint"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="splitPoint"/> is not between clip begin and clip end
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalVideoMedia.valueEquals(urakawa.media.IMedia)">
            <summary>
            Conpares <c>this</c> with a given other <see cref="T:urakawa.media.IMedia"/> for equality
            </summary>
            <param name="other">The other <see cref="T:urakawa.media.IMedia"/></param>
            <returns><c>true</c> if equal, otherwise <c>false</c></returns>
        </member>
        <member name="E:urakawa.media.ExternalVideoMedia.clipChanged">
            <summary>
            Event fired after the clip (clip begin or clip end) of the <see cref="T:urakawa.media.ExternalAudioMedia"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.media.ExternalVideoMedia.sizeChanged">
            <summary>
            Event fired after the size (height or width) of the <see cref="T:urakawa.media.ExternalVideoMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.events.undo.TransactionCancelledEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.undo.UndoRedoManager.transactionCancelled"/> command
            </summary>
        </member>
        <member name="M:urakawa.events.undo.TransactionCancelledEventArgs.#ctor(urakawa.undo.UndoRedoManager)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.undo.UndoRedoManager"/>
            </summary>
            <param name="source">The source <see cref="T:urakawa.undo.UndoRedoManager"/></param>
        </member>
        <member name="T:urakawa.events.presentation.RootNodeChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.Presentation.rootNodeChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.presentation.RootNodeChangedEventArgs.#ctor(urakawa.Presentation,urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Presentation"/> of the event 
            and the previous+new root node
            </summary>
            <param name="source">The source <see cref="T:urakawa.Presentation"/> of the event </param>
            <param name="newRoot">The new root node</param>
            <param name="prevRoot">The root node prior to the change</param>
        </member>
        <member name="F:urakawa.events.presentation.RootNodeChangedEventArgs.NewRootNode">
            <summary>
            The new root node
            </summary>
        </member>
        <member name="F:urakawa.events.presentation.RootNodeChangedEventArgs.PreviousRootNode">
            <summary>
            The root node prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.ProgressCancelledException">
            <summary>
            Thrown when a progress event emitting operation has been cancelled
            </summary>
        </member>
        <member name="M:urakawa.exception.ProgressCancelledException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.ProgressCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IrreversibleCommandDuringActiveUndoRedoTransactionException">
            <summary>
            Thrown when trying to execute an irreversible command while an undo/redo transaction is active
            </summary>
        </member>
        <member name="M:urakawa.exception.IrreversibleCommandDuringActiveUndoRedoTransactionException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IrreversibleCommandDuringActiveUndoRedoTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.InvalidUriException">
            <summary>
            Thrown when a given <see cref="T:System.Uri"/> is invalid
            </summary>
        </member>
        <member name="M:urakawa.exception.InvalidUriException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.InvalidUriException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IncompatibleManagerOrFactoryException">
            <summary>
            Thrown if a manager or factory is incompatible with another manager or factory 
            </summary>
        </member>
        <member name="M:urakawa.exception.IncompatibleManagerOrFactoryException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IncompatibleManagerOrFactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.core.visitor.PreVisitDelegate">
            <summary>
            Delegate for pre-visit
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> being visited</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the children of <paramref localName="node"/>
            should be visited</returns>
        </member>
        <member name="T:urakawa.core.visitor.PostVisitDelegate">
            <summary>
            Delegate for post-visit
            </summary>
            <param name="node">The <see cref="T:urakawa.core.TreeNode"/> being visited</param>
        </member>
        <member name="T:urakawa.property.channel.ChannelFactory">
            <summary>
            The actual implementation to be implemented by the implementation team ;)
            All method bodies must be completed for realizing the required business logic.
            -
            This is the DEFAULT implementation for the API/Toolkit:
            end-users should feel free to use this class as such,
            or they can sub-class it in order to specialize the instance creation process.
            -
            In addition, an end-user has the possibility to implement the
            singleton factory pattern, so that only one instance of the factory
            is used throughout the application life
            (by adding a method like "static Factory getFactory()").
            <seealso cref="T:urakawa.property.channel.Channel"/> 
            <seealso cref="T:urakawa.property.channel.Channel"/>
            <seealso cref="T:urakawa.property.channel.ChannelsManager"/>
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ChannelFactory.getChannelsManager">
            <summary>
            Gets the <see cref="T:urakawa.property.channel.ChannelsManager"/> assigned the <see cref="T:urakawa.property.channel.Channel"/>s created
            by the <see cref="T:urakawa.property.channel.ChannelFactory"/>
            </summary>
            <returns>The <see cref="T:urakawa.property.channel.ChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.property.channel.ChannelFactory.createChannel(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:urakawa.property.channel.Channel"/> matching a given QName.
            </summary>
            <param name="localName">The local part of the QName</param>
            <param name="namespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.property.channel.Channel"/> or <c>null</c> is the given QName is not supported</returns>
            <remarks>
            The only supported QName is <c><see cref="F:urakawa.ToolkitSettings.XUK_NS"/>:Channel</c> which matches <see cref="T:urakawa.property.channel.Channel"/>
            </remarks>
        </member>
        <member name="M:urakawa.property.channel.ChannelFactory.createChannel">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.Channel"/> instance
            </summary>
            <returns>The instance</returns>
        </member>
        <member name="T:urakawa.Project">
            <summary>
            Represents a projects - part of the facade API, provides methods for opening and saving XUK files
            </summary>
        </member>
        <member name="M:urakawa.Project.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.Project.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.Project.notifyPresentationAdded(urakawa.Project,urakawa.Presentation)">
            <summary>
            Fires the <see cref="E:urakawa.Project.presentationAdded"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.Project"/> to which a <see cref="T:urakawa.Presentation"/> was added
            </param>
            <param name="addedPres">The <see cref="T:urakawa.Presentation"/> that was added</param>
        </member>
        <member name="M:urakawa.Project.notifyPresentationRemoved(urakawa.Project,urakawa.Presentation)">
            <summary>
            Fires the <see cref="E:urakawa.Project.presentationRemoved"/> event
            </summary>
            <param name="source">
            The source, that is the <see cref="T:urakawa.Project"/> to which a <see cref="T:urakawa.Presentation"/> was added
            </param>
            <param name="removedPres">The <see cref="T:urakawa.Presentation"/> that was added</param>
        </member>
        <member name="M:urakawa.Project.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.Project.getDataModelFactory">
            <summary>
            Gets the <see cref="T:urakawa.DataModelFactory"/> of the <see cref="T:urakawa.Project"/>
            </summary>
            <returns>The factory</returns>
            <remarks>
            The <see cref="T:urakawa.DataModelFactory"/> of a <see cref="T:urakawa.Project"/> is initialized lazily,
            in that if the <see cref="T:urakawa.DataModelFactory"/> has not been explicitly initialized
            using the <see cref="M:urakawa.Project.setDataModelFactory(urakawa.DataModelFactory)"/>, then calling <see cref="M:urakawa.Project.getDataModelFactory"/>
            will initialize the <see cref="T:urakawa.Project"/> with a newly created <see cref="T:urakawa.DataModelFactory"/>.
            </remarks>
        </member>
        <member name="M:urakawa.Project.setDataModelFactory(urakawa.DataModelFactory)">
            <summary>
            Initializes the <see cref="T:urakawa.Project"/> with a <see cref="T:urakawa.DataModelFactory"/>
            </summary>
            <param name="fact">The factory with which to initialize - must not be <c>null</c></param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="fact"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyInitializedException">
            Thrown when the <see cref="T:urakawa.Project"/> has already been initialized with a <see cref="T:urakawa.DataModelFactory"/>
            </exception>
        </member>
        <member name="M:urakawa.Project.openXUK(System.Uri)">
            <summary>
            Opens an XUK file and loads the project from this
            </summary>
            <param name="fileUri">The <see cref="T:System.Uri"/> of the source XUK file</param>
        </member>
        <member name="M:urakawa.Project.saveXUK(System.Uri)">
            <summary>
            Saves the <see cref="T:urakawa.Project"/> to a XUK file
            </summary>
            <param name="fileUri">The <see cref="T:System.Uri"/> of the destination XUK file</param>
        </member>
        <member name="M:urakawa.Project.getPresentation(System.Int32)">
            <summary>
            Gets the <see cref="T:urakawa.Presentation"/> of the <see cref="T:urakawa.Project"/> at a given index
            </summary>
            <param name="index">The index of the <see cref="T:urakawa.Presentation"/> to get</param>
            <returns>The presentation at the given index</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="index"/> is not in <c>[0;this.getNumberOfPresentations()-1]</c>
            </exception>
        </member>
        <member name="M:urakawa.Project.getListOfPresentations">
            <summary>
            Gets a list of the <see cref="T:urakawa.Presentation"/>s in the <see cref="T:urakawa.Project"/>
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.Project.setPresentation(urakawa.Presentation,System.Int32)">
            <summary>
            Sets the <see cref="T:urakawa.Presentation"/> at a given index
            </summary>
            <param name="newPres">The <see cref="T:urakawa.Presentation"/> to set</param>
            <param name="index">The given index</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newPres"/> is <c>null</c></exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="index"/> is not in <c>[0;this.getNumberOfPresentations()]</c>
            </exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when <paramref name="newPres"/> already exists in <c>this</c> with another <paramref name="index"/>
            </exception>
        </member>
        <member name="M:urakawa.Project.addPresentation(urakawa.Presentation)">
            <summary>
            Adds a <see cref="T:urakawa.Presentation"/> to the <see cref="T:urakawa.Project"/>
            </summary>
            <param name="newPres">The <see cref="T:urakawa.Presentation"/> to add</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newPres"/> is <c>null</c></exception>
            <exception cref="T:urakawa.exception.IsAlreadyManagerOfException">
            Thrown when <paramref name="newPres"/> already exists in <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.Project.addNewPresentation">
            <summary>
            Adds a newly created <see cref="T:urakawa.Presentation"/> to the <see cref="T:urakawa.Project"/>,
            as returned by <c><see cref="M:urakawa.Project.getDataModelFactory"/>().<see cref="M:urakawa.DataModelFactory.createPresentation"/>()</c>
            </summary>
            <returns>The newly created and added <see cref="T:urakawa.Presentation"/></returns>
        </member>
        <member name="M:urakawa.Project.getNumberOfPresentations">
            <summary>
            Gets the number of <see cref="T:urakawa.Presentation"/>s in the <see cref="T:urakawa.Project"/>
            </summary>
            <returns>The number of <see cref="T:urakawa.Presentation"/>s</returns>
        </member>
        <member name="M:urakawa.Project.removePresentation(System.Int32)">
            <summary>
            Removes the <see cref="T:urakawa.Presentation"/> at a given index
            </summary>
            <param name="index">The given index</param>
            <returns>The removed <see cref="T:urakawa.Presentation"/></returns>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="index"/> is not in <c>[0;this.getNumberOfPresentations()-1]</c>
            </exception>
        </member>
        <member name="M:urakawa.Project.removeAllPresentations">
            <summary>
            Removes all <see cref="T:urakawa.Presentation"/>s from the <see cref="T:urakawa.Project"/>
            </summary>
        </member>
        <member name="M:urakawa.Project.clear">
            <summary>
            Clears the <see cref="T:urakawa.Project"/>, removing all <see cref="T:urakawa.Presentation"/>s
            </summary>
        </member>
        <member name="M:urakawa.Project.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a Project xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.Project.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a Project element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.Project.valueEquals(urakawa.Project)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="E:urakawa.Project.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.Project"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.Project.presentationAdded">
            <summary>
            Event fired after a <see cref="T:urakawa.Presentation"/> has been added to the <see cref="T:urakawa.Project"/>
            </summary>
        </member>
        <member name="E:urakawa.Project.presentationRemoved">
            <summary>
            Event fired after a <see cref="T:urakawa.Presentation"/> has been added to the <see cref="T:urakawa.Project"/>
            </summary>
        </member>
        <member name="T:urakawa.media.data.MediaDataFactory">
            <summary>
            <para>Factory for creating <see cref="T:urakawa.media.data.MediaData"/>.</para>
            <para>Supports creation of the following <see cref="T:urakawa.media.data.MediaData"/> types:
            <list type="ul">
            <item><see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.getMediaDataManager">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataManager"/> associated with <c>this</c>
            (via the <see cref="T:urakawa.Presentation"/> associated with <c>this</c>.
            Convenience for <c>getPresentation().getMediaDataManager()</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.MediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createMediaData(System.String,System.String)">
            <summary>
            Creates an instance of a <see cref="T:urakawa.media.data.MediaData"/> of type matching a given XUK QName
            </summary>
            <param name="xukLocalName">The local name part of the QName</param>
            <param name="xukNamespaceUri">The namespace uri part of the QName</param>
            <returns>The created <see cref="T:urakawa.media.data.MediaData"/> instance or <c>null</c> if the given QName is supported</returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createMediaData(System.Type)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.MediaData"/> instance of a given <see cref="T:System.Type"/>
            </summary>
            <param name="mt">The given <see cref="T:System.Type"/></param>
            <returns>
            The created <see cref="T:urakawa.media.data.MediaData"/> instance 
            or <c>null</c> if the given media <see cref="T:System.Type"/> is not supported
            </returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createAudioMediaData">
            <summary>
            Creates a <see cref="T:urakawa.media.data.audio.AudioMediaData"/> of default type (which is <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/>)
            </summary>
            <returns>The created <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/></returns>
        </member>
        <member name="M:urakawa.media.data.MediaDataFactory.createWavAudioMediaData">
            <summary>
            Creates a <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/></returns>
        </member>
        <member name="T:urakawa.media.data.audio.codec.WavAudioMediaData">
            <summary>
            Implementation of <see cref="T:urakawa.media.data.audio.AudioMediaData"/> that supports sequences of RIFF WAVE PCM audio data clips
            </summary>
        </member>
        <member name="T:urakawa.media.data.audio.AudioMediaData">
            <summary>
            Abstract base class for audio <see cref="T:urakawa.media.data.MediaData"/>.
            Implements PCM format accessors (number of channels, bit depth, sample rate) 
            and leaves all other methods abstract
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.notifyPCMFormatChanged(urakawa.media.data.audio.AudioMediaData,urakawa.media.data.audio.PCMFormatInfo,urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Fires the <see cref="E:urakawa.media.data.audio.AudioMediaData.pcmFormatChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> whoose <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> has changed</param>
            <param name="newFormat">The new value</param>
            <param name="prevFormat">The value prior to the change</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.notifyAudioDataInserted(urakawa.media.data.audio.AudioMediaData,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Fires the <see cref="E:urakawa.media.data.audio.AudioMediaData.audioDataInserted"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> into which audio data was inserted</param>
            <param name="insertPoint">The insert point at which audio data was inserted</param>
            <param name="duration">The duration of the inserted audio data</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.notifyAudioDataRemoved(urakawa.media.data.audio.AudioMediaData,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Fires the <see cref="E:urakawa.media.data.audio.AudioMediaData.audioDataRemoved"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> from which audio data was removed</param>
            <param name="fromPoint">The point at which audio data was removed</param>
            <param name="duration">The duration of the removed audio data</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.isPCMFormatChangeOk(urakawa.media.data.audio.PCMFormatInfo,System.String@)">
            <summary>
            Determines if a PCM Format change is ok
            </summary>
            <param name="newFormat">The new PCM Format value - assumed not to be <c>null</c></param>
            <param name="failReason">The <see cref="T:System.String"/> to which a failure reason must be written in case the change is not ok</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the change is ok</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getMediaDataFactory">
            <summary>
            Gets the <see cref="T:urakawa.media.data.MediaDataFactory"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getPCMFormat">
            <summary>
            Gets (a copy of) the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> of the audio media data 
            </summary>
            <returns>The PCMFormatInfo</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.setPCMFormat(urakawa.media.data.audio.PCMFormatInfo)">
            <summary>
            Sets the PCMFormat of <c>this</c>
            </summary>
            <param name="newFormat">The new PCM format</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="newFormat"/> is null
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the <see cref="T:urakawa.media.data.MediaDataManager"/> enforces a single PCM Format different from the new value
            or when audio data in a different format has already been added to the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.setNumberOfChannels(System.UInt16)">
            <summary>
            Sets the number of channels of the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> of the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
            <param name="numberOfChannels">The new number of channels</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="numberOfChannels"/> is less than <c>1</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the <see cref="T:urakawa.media.data.MediaDataManager"/> enforces a single PCM Format with a different number of channels from the new value
            or when audio data with a different number of channels has already been added to the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.setSampleRate(System.UInt32)">
            <summary>
            Sets the sample rate of the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> of the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
            <param name="sampleRate">The new  sample rate</param>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the <see cref="T:urakawa.media.data.MediaDataManager"/> enforces a single PCM Format with a different sample rate from the new value
            or when audio data with a different sample rate has already been added to the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.setBitDepth(System.UInt16)">
            <summary>
            Sets the number of channels of the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> of the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
            <param name="bitDepth">The new bit depth</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when <paramref name="bitDepth"/> is less than <c>1</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the <see cref="T:urakawa.media.data.MediaDataManager"/> enforces a single PCM Format with a different bit depth from the new value
            or when audio data with a different bit depth has already been added to the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getPCMLength(urakawa.media.timing.TimeDelta)">
            <summary>
            Gets the count in bytes of PCM data of the audio media data of a given duration
            </summary>
            <param name="duration">The duration</param>
            <returns>The count in bytes</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getPCMLength">
            <summary>
            Gets the count in bytes of the PCM data of the audio media data
            </summary>
            <returns>The count in bytes</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getAudioDuration">
            <summary>
            Gets the intrinsic duration of the audio data
            </summary>
            <returns>The duration as an <see cref="T:urakawa.media.timing.TimeDelta"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getAudioData">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> giving access to all audio data as raw PCM
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getAudioData(urakawa.media.timing.Time)">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> giving access to the audio data after a given <see cref="T:urakawa.media.timing.Time"/> 
            as raw PCM
            </summary>
            <returns>The input <see cref="T:System.IO.Stream"/></returns>
            <remarks>
            Make sure to close any audio <see cref="T:System.IO.Stream"/> returned by this method when no longer needed.
            Failing to do so may cause <see cref="T:urakawa.exception.InputStreamsOpenException"/> when trying to added data to or delete
            the <see cref="T:urakawa.media.data.IDataProvider"/>s used by the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> instance
            </remarks>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all audio between given clip begin and end <see cref="T:urakawa.media.timing.Time"/>s
            as raw PCM data
            </summary>
            <param name="clipBegin">The given clip begin <see cref="T:urakawa.media.timing.Time"/></param>
            <param name="clipEnd">The given clip end <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
            <remarks>
            Make sure to close any audio <see cref="T:System.IO.Stream"/> returned by this method when no longer needed.
            Failing to do so may cause <see cref="T:urakawa.exception.InputStreamsOpenException"/> when trying to added data to or delete
            the <see cref="T:urakawa.media.data.IDataProvider"/>s used by the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> instance
            </remarks>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.appendAudioData(System.IO.Stream,urakawa.media.timing.TimeDelta)">
            <summary>
            Appends audio of a given duration to <c>this</c>
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the input raw PCM audio data</param>
            <param name="duration">The duration of the audio to add</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.appendAudioDataFromRiffWave(System.IO.Stream)">
            <summary>
            Appends audio data from a RIFF Wave file
            </summary>
            <param name="riffWaveStream">The RIFF Wave file</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.appendAudioDataFromRiffWave(System.String)">
            <summary>
            Appends audio data from a RIFF Wave file
            </summary>
            <param name="path">The path of the RIFF Wave file</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.insertAudioData(System.IO.Stream,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Inserts audio data of a given duration at a given insert point
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the audio data as RAW PCM</param>
            <param name="insertPoint">The insert point</param>
            <param name="duration">The duration</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.insertAudioDataFromRiffWave(System.IO.Stream,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Inserts audio data from a RIFF Wave file at a given insert point and of a given duration
            </summary>
            <param name="riffWaveStream">The RIFF Wave file</param>
            <param name="insertPoint">The insert point</param>
            <param name="duration">The duration</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.insertAudioDataFromRiffWave(System.String,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Inserts audio data from a RIFF Wave file at a given insert point and of a given duration
            </summary>
            <param name="path">The path of the RIFF Wave file</param>
            <param name="insertPoint">The insert point</param>
            <param name="duration">The duration</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.replaceAudioData(System.IO.Stream,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Replaces with audio of a given duration at a given replace point
            </summary>
            <param name="pcmData">A <see cref="T:System.IO.Stream"/> providing read access to the input raw PCM audio data</param>
            <param name="replacePoint">The given replace point</param>
            <param name="duration">The duration of the audio to replace</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.replaceAudioDataFromRiffWave(System.IO.Stream,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Replaces with audio from a RIFF Wave file of a given duration at a given replace point
            </summary>
            <param name="riffWaveStream">The RIFF Wave file</param>
            <param name="replacePoint">The given replace point</param>
            <param name="duration">The duration of the audio to replace</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.replaceAudioDataFromRiffWave(System.String,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Replaces with audio from a RIFF Wave file of a given duration at a given replace point
            </summary>
            <param name="path">The path of the RIFF Wave file</param>
            <param name="replacePoint">The given replace point</param>
            <param name="duration">The duration of the audio to replace</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.removeAudioData(urakawa.media.timing.Time)">
            <summary>
            Removes all audio after a given clip begin <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="clipBegin">The clip begin</param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.removeAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Removes all audio between given clip begin and end <see cref="T:urakawa.media.timing.Time"/>
            </summary>
            <param name="clipBegin">The givne clip begin <see cref="T:urakawa.media.timing.Time"/></param>
            <param name="clipEnd">The givne clip end <see cref="T:urakawa.media.timing.Time"/></param>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.audioMediaDataCopy">
            <summary>
            Part of technical solution to make copy method return correct type. 
            In implementing classes this method should return a copy of the class instances
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.protectedCopy">
            <summary>
            Part of technical solution to make copy method return correct type. 
            In implementing classes this method should return a copy of the class instances
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.copy">
            <summary>
            Gets a copy of <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.split(urakawa.media.timing.Time)">
            <summary>
            Splits the audio media data at a given split point in time,
            <c>this</c> retaining the audio before the split point,
            creating a new <see cref="T:urakawa.media.data.audio.AudioMediaData"/> containing the audio after the split point
            </summary>
            <param name="splitPoint">The given split point</param>
            <returns>A audio media data containing the audio after the split point</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given split point is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given split point is negative or is beyond the duration of <c>this</c>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.mergeWith(urakawa.media.data.audio.AudioMediaData)">
            <summary>
            Merges <c>this</c> with a given other <see cref="T:urakawa.media.data.audio.AudioMediaData"/>,
            appending the audio data of the other <see cref="T:urakawa.media.data.audio.AudioMediaData"/> to <c>this</c>,
            leaving the other <see cref="T:urakawa.media.data.audio.AudioMediaData"/> without audio data
            </summary>
            <param name="other">The given other AudioMediaData</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="other"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the PCM format of <c>this</c> is not compatible with that of <paramref name="other"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.AudioMediaData.valueEquals(urakawa.media.data.MediaData)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>		
        </member>
        <member name="E:urakawa.media.data.audio.AudioMediaData.pcmFormatChanged">
            <summary>
            Event fired after the <see cref="T:urakawa.media.data.audio.PCMFormatInfo"/> of the <see cref="T:urakawa.media.data.audio.AudioMediaData"/> has changed
            </summary>
        </member>
        <member name="E:urakawa.media.data.audio.AudioMediaData.audioDataInserted">
            <summary>
            Event fired after audio data has been inserted into the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
        </member>
        <member name="E:urakawa.media.data.audio.AudioMediaData.audioDataRemoved">
            <summary>
            Event fired after audio data has been removed from the <see cref="T:urakawa.media.data.audio.AudioMediaData"/>
            </summary>
        </member>
        <member name="F:urakawa.media.data.audio.codec.WavAudioMediaData.mWavClips">
            <summary>
            Stores the <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip"/>s of <c>this</c>
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.#ctor">
            <summary>
            Constructor associating the newly constructed <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/> 
            with a given <see cref="T:urakawa.media.data.MediaDataManager"/> 
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.isPCMFormatChangeOk(urakawa.media.data.audio.PCMFormatInfo,System.String@)">
            <summary>
            Determines if a PCM Format change is ok
            </summary>
            <param name="newFormat">The new PCM Format value - assumed not to be <c>null</c></param>
            <param name="failReason">The <see cref="T:System.String"/> to which a failure reason must be written in case the change is not ok</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the change is ok</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.createWavClipFromRawPCMStream(System.IO.Stream)">
            <summary>
            Gets a <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip"/> from a RAW PCM audio <see cref="T:System.IO.Stream"/>, 
            reading all data from the current position in the stream till it's end
            </summary>
            <param name="pcmData">The raw PCM stream</param>
            <returns>The <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.createWavClipFromRawPCMStream(System.IO.Stream,urakawa.media.timing.TimeDelta)">
            <summary>
            Gets a <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip"/> from a RAW PCM audio <see cref="T:System.IO.Stream"/> of a given duration
            </summary>
            <param name="pcmData">The raw PCM data stream</param>
            <param name="duration">The duration</param>
            <returns>The <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.forceSingleDataProvider">
            <summary>
            Forces the PCM data to be stored in a single <see cref="T:urakawa.media.data.IDataProvider"/>.
            </summary>
            <remarks>
            This effectively copies the data, 
            since the <see cref="T:urakawa.media.data.IDataProvider"/>(s) previously used to store the PCM data are left untouched
            </remarks>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.audioMediaDataCopy">
            <summary>
            Creates a copy of <c>this</c>, including copies of all <see cref="T:urakawa.media.data.IDataProvider"/>s used by <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.copy">
            <summary>
            Creates a copy of <c>this</c>, including copies of all <see cref="T:urakawa.media.data.IDataProvider"/>s used by <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.protectedExport(urakawa.Presentation)">
            <summary>
            Exports <c>this</c> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The given destination presentation</param>
            <returns>The exported wav audio media data</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.export(urakawa.Presentation)">
            <summary>
            Exports <c>this</c> to a given destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The given destination presentation</param>
            <returns>The exported wav audio media data</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.delete">
            <summary>
            Deletes the <see cref="T:urakawa.media.data.MediaData"/>, detaching it from it's manager 
            and clearing the list of clips making up the wave audio media
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.getListOfUsedDataProviders">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of the <see cref="T:urakawa.media.data.IDataProvider"/>s
            used to store the Wav audio data
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> providing read access to all audio between given clip begin and end <see cref="T:urakawa.media.timing.Time"/>s
            as raw PCM data
            </summary>
            <param name="clipBegin">The given clip begin <see cref="T:urakawa.media.timing.Time"/></param>
            <param name="clipEnd">The given clip end <see cref="T:urakawa.media.timing.Time"/></param>
            <returns>The <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.appendAudioData(System.IO.Stream,urakawa.media.timing.TimeDelta)">
            <summary>
            Appends audio of a given duration from a given source PCM data <see cref="T:System.IO.Stream"/> to the wav audio media data
            </summary>
            <param name="pcmData">The source PCM data stream</param>
            <param name="duration">The duration of the audio to append 
            - if <c>null</c>, all audio data from <paramref name="pcmData"/> is added</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.insertAudioData(System.IO.Stream,urakawa.media.timing.Time,urakawa.media.timing.TimeDelta)">
            <summary>
            Inserts audio of a given duration from a given source PCM data <see cref="T:System.IO.Stream"/> to the wav audio media data
            at a given point
            </summary>
            <param name="pcmData">The source PCM data stream</param>
            <param name="insertPoint">The insert point</param>
            <param name="duration">The duration of the aduio to append</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.getAudioDuration">
            <summary>
            Gets the intrinsic duration of the audio data
            </summary>
            <returns>The duration as an <see cref="T:urakawa.media.timing.TimeDelta"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.removeAudioData(urakawa.media.timing.Time)">
            <summary>
            Removes all audio after a given clip begin point
            </summary>
            <param name="clipBegin">The given clip begin point</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.removeAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Removes the audio between given clip begin and end points
            </summary>
            <param name="clipBegin">The given clip begin point</param>
            <param name="clipEnd">The given clip end point</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.clear">
            <summary>
            Clears the <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/>, removing all <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip"/>s
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a WavAudioMediaData xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a WavAudioMediaData element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.mergeWith(urakawa.media.data.audio.AudioMediaData)">
            <summary>
            Merges <c>this</c> with a given other <see cref="T:urakawa.media.data.audio.AudioMediaData"/>,
            appending the audio data of the other <see cref="T:urakawa.media.data.audio.AudioMediaData"/> to <c>this</c>,
            leaving the other <see cref="T:urakawa.media.data.audio.AudioMediaData"/> without audio data
            </summary>
            <param name="other">The given other AudioMediaData</param>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when <paramref name="other"/> is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.InvalidDataFormatException">
            Thrown when the PCM format of <c>this</c> is not compatible with that of <paramref name="other"/>
            </exception>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.split(urakawa.media.timing.Time)">
            <summary>
            Splits the audio media data at a given split point in time,
            <c>this</c> retaining the audio before the split point,
            creating a new <see cref="T:urakawa.media.data.audio.codec.WavAudioMediaData"/> containing the audio after the split point
            </summary>
            <param name="splitPoint">The given split point</param>
            <returns>A audio media data containing the audio after the split point</returns>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">
            Thrown when the given split point is <c>null</c>
            </exception>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            Thrown when the given split point is negative or is beyond the duration of <c>this</c>
            </exception>
        </member>
        <member name="T:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip">
            <summary>
            Represents a RIFF WAVE PCM audio data clip
            </summary>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.#ctor(urakawa.media.data.IDataProvider)">
            <summary>
            Constructor setting the <see cref="T:urakawa.media.data.IDataProvider"/>, 
            clip begin and clip end will in this case be initialized to <c>null</c>,
            which means beginning/end if the RIFF WAVE PCM data
            </summary>
            <param name="clipDataProvider">The <see cref="T:urakawa.media.data.IDataProvider"/></param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.#ctor(urakawa.media.data.IDataProvider,urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Constructor setting the <see cref="T:urakawa.media.data.IDataProvider"/> and clip begin/end values
            </summary>
            <param name="clipDataProvider">The <see cref="T:urakawa.media.data.IDataProvider"/> - can not be <c>null</c></param>
            <param name="clipBegin">The clip begin <see cref="T:urakawa.media.timing.Time"/> - can not be <c>null</c></param>
            <param name="clipEnd">
            The clip end <see cref="T:urakawa.media.timing.Time"/>
            - a <c>null</c> value ties clip end to the end of the underlying wave audio</param>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.getMediaDuration">
            <summary>
            Gets the duration of the underlying RIFF wav file 
            </summary>
            <returns>The duration</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.copy">
            <summary>
            Creates a copy of the wav clip
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.export(urakawa.Presentation)">
            <summary>
            Exports the clip to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination <see cref="T:urakawa.Presentation"/></param>
            <returns>The exported clip</returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.getDataProvider">
            <summary>
            Gets the <see cref="T:urakawa.media.data.IDataProvider"/> storing the RIFF WAVE PCM audio data of <c>this</c>
            </summary>
            <returns>The <see cref="T:urakawa.media.data.IDataProvider"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.getAudioData">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the raw PCM audio data
            </summary>
            <returns>The raw PCM audio data <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time)">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the raw PCM audio data
            after a given sub-clip begin time
            </summary>
            <param name="subClipBegin"></param>
            <returns>The raw PCM audio data <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)"/>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.getAudioData(urakawa.media.timing.Time,urakawa.media.timing.Time)">
            <summary>
            Gets an input <see cref="T:System.IO.Stream"/> providing read access to the raw PCM audio data
            between given sub-clip begin and end times
            </summary>
            <param name="subClipBegin">The beginning of the sub-clip</param>
            <param name="subClipEnd">The end of the sub-clip</param>
            <returns>The raw PCM audio data <see cref="T:System.IO.Stream"/></returns>
            <remarks>
            <para>Sub-clip times must be in the interval <c>[0;this.getAudioDuration()]</c>.</para>
            <para>
            The sub-clip is
            relative to clip begin of the WavClip, that if <c>this.getClipBegin()</c>
            returns <c>00:00:10</c>, <c>this.getClipEnd()</c> returns <c>00:00:50</c>, 
            <c>x</c> and <c>y</c> is <c>00:00:05</c> and <c>00:00:30</c> respectively, 
            then <c>this.getAudioData(x, y)</c> will get the audio in the underlying wave audio between
            <c>00:00:15</c> and <c>00:00:40</c>
            </para>
            </remarks>
        </member>
        <member name="M:urakawa.media.data.audio.codec.WavAudioMediaData.WavClip.valueEquals(urakawa.media.data.audio.codec.WavAudioMediaData.WavClip)">
            <summary>
            Determines of <c>this</c> has the same value as a given other instance
            </summary>
            <param name="other">The other instance</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result</returns>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsNullException">
            <summary>
            Some methods forbid passing NULL values.
            This exception should be raised when NULL values are passed.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsNullException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsNullException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.InputStreamIsTooShortException">
            <summary>
            Thrown when an input <see cref="T:System.IO.Stream"/> is shorter than excepted,
            that is there are too few <see cref="T:System.Byte"/>s between the current <see cref="P:System.IO.Stream.Position"/> 
            and the end of the <see cref="T:System.IO.Stream"/> (<see cref="P:System.IO.Stream.Length"/>)
            </summary>
        </member>
        <member name="M:urakawa.exception.InputStreamIsTooShortException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.InputStreamIsTooShortException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.CannotExecuteException">
            <summary>
            Thrown when a <see cref="T:urakawa.command.ICommand"/> cannot execute
            </summary>
        </member>
        <member name="M:urakawa.exception.CannotExecuteException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.CannotExecuteException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.command.CompositeCommand">
            <summary>
            A composite command made of a series of sub commands. Useful for merging small commands into one such as:
            user typing text letter by letter (the exception/redo would work on full word or sentence, not for each character.)
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.notifyChanged(urakawa.events.DataModelChangedEventArgs)">
            <summary>
            Fires the <see cref="E:urakawa.command.CompositeCommand.changed"/> event 
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.notifyCommandAdded(urakawa.command.ICommand,System.Int32)">
            <summary>
            Fires the <see cref="E:urakawa.command.CompositeCommand.commandAdded"/> event
            </summary>
            <param name="addedCmd">
            The <see cref="T:urakawa.command.ICommand"/> that was added
            </param>
            <param name="index">The index of the added <see cref="T:urakawa.command.ICommand"/></param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.notifyExecuted">
            <summary>
            Fires the <see cref="E:urakawa.command.CompositeCommand.executed"/> event
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.notifyUnExecuted">
            <summary>
            Fires the <see cref="E:urakawa.command.CompositeCommand.unExecuted"/> event
            </summary>
        </member>
        <member name="F:urakawa.command.CompositeCommand.ShortDescriptionFormatString">
            <summary>
            Format string for the short description of the composite command. 
            Format parameter {0:0} is replaced by the number of commands, 
            and format parameter {1} is replaced by the short descriptions of the first and last command in the composite command.
            Only used when the short description has not been explicitly set using <see cref="M:urakawa.command.CompositeCommand.setShortDescription(System.String)"/>.
            </summary>
        </member>
        <member name="F:urakawa.command.CompositeCommand.LongDescriptionFormatString">
            <summary>
            Format string for the short description of the composite command. 
            Format parameter {0:0} is replaced by the number of commands, 
            and format parameter {1} is replaced by the long descriptions of the sub-commands in the composite command.
            Only used when the short description has not been explicitly set using <see cref="M:urakawa.command.CompositeCommand.setLongDescription(System.String)"/>.
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.#ctor">
            <summary>
            Create an empty composite command.
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.setLongDescription(System.String)">
            <summary>
            Sets the long humanly-readable description of the composite command
            </summary>
            <param name="desc">The long description</param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.setShortDescription(System.String)">
            <summary>
            Sets the long humanly-readable description of the composite command
            </summary>
            <param name="desc">The long description</param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.insert(urakawa.command.ICommand,System.Int32)">
            <summary>
            Insert the given command as a child of this node, at the given index. Does NOT replace the existing child,
            but increments (+1) the indices of the all children which index &gt;= insertIndex. If insertIndex == children.size
            (no following children), then the given node is appended at the end of the existing children list.
            </summary>
            <param name="command">Cannot be null.</param>
            <param name="index">Must be within bounds [0 .. children.size]</param>
            <exception cref="T:urakawa.exception.MethodParameterIsOutOfBoundsException">Thrown when the index is out of bounds.</exception>
            <exception cref="T:urakawa.exception.MethodParameterIsNullException">Thrown when a null command is given.</exception>
        </member>
        <member name="M:urakawa.command.CompositeCommand.append(urakawa.command.ICommand)">
            <summary>
            Appends the given command as a child of this node, at the given index. Does NOT replace the existing child,
            but increments (+1) the indices of the all children which index >= insertIndex. If insertIndex == children.size
            (no following children), then the given node is appended at the end of the existing children list.
            </summary>
            <param name="command">Cannot be null.</param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.getListOfCommands">
            <summary>
            Gets a list of the <see cref="T:urakawa.command.ICommand"/>s making up the composite command
            </summary>
            <returns>The list</returns>
        </member>
        <member name="M:urakawa.command.CompositeCommand.getCount">
            <summary>
            Gets the number of <see cref="T:urakawa.command.ICommand"/>s in <c>this</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.command.CompositeCommand.unExecute">
            <summary>
            Execute the reverse command by executing the reverse commands for all the contained commands.
            The commands are undone in reverse order.
            </summary>
            <exception cref="T:urakawa.exception.CannotUndoException">Thrown when the command cannot be reversed; either because
            the composite command is empty or one of its contained command cannot be undone. In the latter case, the original
            exception is passed as the inner exception of the thrown exception.</exception>
        </member>
        <member name="M:urakawa.command.CompositeCommand.getLongDescription">
            <summary>
            Return the provided exception string.
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.execute">
            <summary>
            Execute all contained commands in order.
            </summary>
            <exception cref="T:urakawa.exception.CannotRedoException">Thrown when the command cannot be executed; either because
            the composite command is empty or one of its contained command cannot be executed. In the latter case, the original
            exception is passed as the inner exception of the thrown exception.</exception>
        </member>
        <member name="M:urakawa.command.CompositeCommand.getShortDescription">
            <summary>
            Return the provided redo string.
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.canUnExecute">
            <summary>
            The composite command is reversible if it contains commmands, and all of its contained command are.
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.canExecute">
            <summary>
            The composite command can execute if it contains commmands, and all the contained commands can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.command.CompositeCommand.getListOfUsedMediaData">
            <summary>
            Gets a list of all <see cref="T:urakawa.media.data.MediaData"/> used by sub-commands of the composite command
            </summary>
            <returns></returns>
        </member>
        <member name="M:urakawa.command.CompositeCommand.clear">
            <summary>
            Clears the <see cref="T:urakawa.command.CompositeCommand"/> clearing the descriptions and the list of <see cref="T:urakawa.command.ICommand"/>s
            </summary>
        </member>
        <member name="M:urakawa.command.CompositeCommand.xukInAttributes(System.Xml.XmlReader)">
            <summary>
            Reads the attributes of a CompositeCommand xuk element.
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.xukInChild(System.Xml.XmlReader,urakawa.progress.ProgressHandler)">
            <summary>
            Reads a child of a CompositeCommand xuk element. 
            </summary>
            <param name="source">The source <see cref="T:System.Xml.XmlReader"/></param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.xukOutAttributes(System.Xml.XmlWriter,System.Uri)">
            <summary>
            Writes the attributes of a CompositeCommand element
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
        </member>
        <member name="M:urakawa.command.CompositeCommand.xukOutChildren(System.Xml.XmlWriter,System.Uri,urakawa.progress.ProgressHandler)">
            <summary>
            Write the child elements of a CompositeCommand element.
            </summary>
            <param name="destination">The destination <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/> used to make written <see cref="T:System.Uri"/>s relative, 
            if <c>null</c> absolute <see cref="T:System.Uri"/>s are written
            </param>
            <param name="handler">The handler for progress</param>
        </member>
        <member name="E:urakawa.command.CompositeCommand.changed">
            <summary>
            Event fired after the <see cref="T:urakawa.command.CompositeCommand"/> has changed. 
            The event fire before any change specific event 
            </summary>
        </member>
        <member name="E:urakawa.command.CompositeCommand.commandAdded">
            <summary>
            Event fired after a <see cref="T:urakawa.command.ICommand"/> has been added to the <see cref="T:urakawa.command.CompositeCommand"/>
            </summary>
        </member>
        <member name="E:urakawa.command.CompositeCommand.executed">
            <summary>
            Event fired after the <see cref="T:urakawa.command.CompositeCommand"/> has been executed
            </summary>
        </member>
        <member name="E:urakawa.command.CompositeCommand.unExecuted">
            <summary>
            Event fired after the <see cref="T:urakawa.command.CompositeCommand"/> has been un-executed
            </summary>
        </member>
        <member name="T:urakawa.events.core.PropertyRemovedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.core.TreeNode.propertyRemoved"/> event
            </summary>
        </member>
        <member name="F:urakawa.events.core.PropertyRemovedEventArgs.RemovedProperty">
            <summary>
            The <see cref="T:urakawa.property.Property"/> that was removed
            </summary>
        </member>
        <member name="M:urakawa.events.core.PropertyRemovedEventArgs.#ctor(urakawa.core.TreeNode,urakawa.property.Property)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.core.TreeNode"/> of the event
            and the <see cref="T:urakawa.property.Property"/> that was removed
            </summary>
            <param name="notfr">The source <see cref="T:urakawa.core.TreeNode"/> of the event</param>
            <param name="removee">The <see cref="T:urakawa.property.Property"/> that was removed</param>
        </member>
        <member name="T:urakawa.events.core.ChildAddedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.core.TreeNode.childAdded"/> event
            </summary>
        </member>
        <member name="F:urakawa.events.core.ChildAddedEventArgs.AddedChild">
            <summary>
            The child <see cref="T:urakawa.core.TreeNode"/> that was added
            </summary>
        </member>
        <member name="M:urakawa.events.core.ChildAddedEventArgs.#ctor(urakawa.core.TreeNode,urakawa.core.TreeNode)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.core.TreeNode"/> of the event
            and the child <see cref="T:urakawa.core.TreeNode"/> that was added
            </summary>
            <param name="notfr">The source <see cref="T:urakawa.core.TreeNode"/> of the event</param>
            <param name="child">The child <see cref="T:urakawa.core.TreeNode"/> that was added</param>
        </member>
        <member name="T:urakawa.events.project.PresentationRemovedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.Project.presentationRemoved"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.project.PresentationRemovedEventArgs.#ctor(urakawa.Project,urakawa.Presentation)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.Project"/> of the event
            and the removed <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="source">The source <see cref="T:urakawa.Project"/> of the event</param>
            <param name="removee">The removed <see cref="T:urakawa.Presentation"/></param>
        </member>
        <member name="F:urakawa.events.project.PresentationRemovedEventArgs.RemovedPresentation">
            <summary>
            The removed <see cref="T:urakawa.Presentation"/>
            </summary>
        </member>
        <member name="T:urakawa.exception.XukException">
            <summary>
            Thrown when errors occur during xukIn/Out
            </summary>
        </member>
        <member name="M:urakawa.exception.XukException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.XukException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.OutputStreamOpenException">
            <summary>
            Thrown when trying to open a second output <see cref="T:System.IO.Stream"/> 
            from a <see cref="T:urakawa.media.data.IDataProvider"/>
            </summary>
        </member>
        <member name="M:urakawa.exception.OutputStreamOpenException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param localName="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.OutputStreamOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param localName="msg">The message</param>
            <param localName="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.NodeIsDescendantException">
            <summary>
            Exception thrown when a node belongs to a different presentation than expected
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeIsDescendantException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeIsDescendantException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.MethodParameterIsOutOfBoundsException">
            <summary>
            Some methods have parameters of numeric type (float, int, uint, etc.).
            This exception should be thrown when values are out of allowed bounds.
            </summary>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsOutOfBoundsException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.MethodParameterIsOutOfBoundsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.IsAlreadyManagerOfException">
            <summary>
            Thrown when a given <see cref="T:System.Object"/> is already managed by the manager
            </summary>
        </member>
        <member name="M:urakawa.exception.IsAlreadyManagerOfException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.IsAlreadyManagerOfException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.exception.FactoryIsMissingException">
            <summary>
            Exception thrown when a factory is missing
            </summary>
        </member>
        <member name="M:urakawa.exception.FactoryIsMissingException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.FactoryIsMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:urakawa.media.ExternalTextMedia">
            <summary>
            An implementation of <see cref="T:urakawa.media.ITextMedia"/> based on text storage in an external file/uri
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.notifyTextChanged(urakawa.media.ExternalTextMedia,System.String,System.String)">
            <summary>
            Fires the <see cref="E:urakawa.media.ExternalTextMedia.textChanged"/> event
            </summary>
            <param name="source">The source, that is the <see cref="T:urakawa.media.ExternalTextMedia"/> whoose text was changed</param>
            <param name="newText">The new text value</param>
            <param name="prevText">Thye text value prior to the change</param>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.#ctor">
            <summary>
            Constructor setting the <see cref="T:urakawa.media.IMediaFactory"/> that created the instance
            </summary>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.isContinuous">
            <summary>
            Determines if <c>this</c> is a continuous media (wich it is not)
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.isDiscrete">
            <summary>
            Determines if <c>this</c> is a descrete media (which it is)
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.isSequence">
            <summary>
            Determines if <c>this</c>is a sequence media (which it is not)
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.copy">
            <summary>
            Creates a copy of <c>this</c>
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.exportProtected(urakawa.Presentation)">
            <summary>
            Exports the external text media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external text media</returns>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.export(urakawa.Presentation)">
            <summary>
            Exports the external text media to a destination <see cref="T:urakawa.Presentation"/>
            </summary>
            <param name="destPres">The destination presentation</param>
            <returns>The exported external text media</returns>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.getText">
            <summary>
            Gets the text of the <c>this</c>
            </summary>
            <returns>The text - if the plaintext file could not be found, <see cref="F:System.String.Empty"/> is returned</returns>
            <exception cref="T:urakawa.exception.CannotReadFromExternalFileException">
            Thrown if the file referenced by <see cref="M:urakawa.media.ExternalMedia.getSrc"/> is not accessible
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.getText(System.Net.ICredentials)">
            <summary>
            Gets the text of the <c>this</c> using given <see cref="T:System.Net.ICredentials"/>
            </summary>
            <param name="credits">The given credentisals</param>
            <returns>The text - if the plaintext file could not be found, <see cref="F:System.String.Empty"/> is returned</returns>
            <exception cref="T:urakawa.exception.CannotReadFromExternalFileException">
            Thrown if the file referenced by <see cref="M:urakawa.media.ExternalMedia.getSrc"/> is not accessible
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.setText(System.String)">
            <summary>
            Sets the text of <c>this</c>
            </summary>
            <param name="text">The new text</param>
            <exception cref="T:urakawa.exception.CannotWriteToExternalFileException">
            Thrown when the text could not be written to the <see cref="T:System.Uri"/> (as returned by <see cref="M:urakawa.media.ExternalMedia.getSrc"/>)
            using the <see cref="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])"/> method.
            </exception>
        </member>
        <member name="M:urakawa.media.ExternalTextMedia.setText(System.String,System.Net.ICredentials)">
            <summary>
            Sets the text of <c>this</c> using given <see cref="T:System.Net.ICredentials"/>
            </summary>
            <param name="text">The new text</param>
            <param name="credits">The given credentisals</param>
            <exception cref="T:urakawa.exception.CannotWriteToExternalFileException">
            Thrown when the text could not be written to the <see cref="T:System.Uri"/> (as returned by <see cref="M:urakawa.media.ExternalMedia.getSrc"/>)
            using the <see cref="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])"/> method.
            </exception>
        </member>
        <member name="E:urakawa.media.ExternalTextMedia.textChanged">
            <summary>
            Event fired after the text of the <see cref="T:urakawa.media.ExternalTextMedia"/> has changed
            </summary>
        </member>
        <member name="T:urakawa.media.data.utilities.SequenceStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> that supports reading from a sequence of source <see cref="T:System.IO.Stream"/>s
            as if they were one.
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Constructor supplying the sequence of source <see cref="T:System.IO.Stream"/>s
            </summary>
            <param name="ss">
            The sequence of source <see cref="T:System.IO.Stream"/>s. 
            Must contain at least one source <see cref="T:System.IO.Stream"/>
            </param>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.Flush">
            <summary>
            Does nothing since a <see cref="T:urakawa.media.data.utilities.SubStream"/> is read-only
            </summary>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current <see cref="T:urakawa.media.data.utilities.SequenceStream"/> and 
            advances the position within the stream by the number of bytes read
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between 
            <c><paramref name="offset"/></c> and <c>(<paramref name="offset"/> + <paramref name="count"/> - 1)</c> 
            replaced by the bytes read from the current <see cref="T:urakawa.media.data.utilities.SequenceStream"/>.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> 
            at which to begin storing the data read from the current <see cref="T:urakawa.media.data.utilities.SequenceStream"/>.
            </param>
            <param name="count">The maximum number of bytes to be read from the current <see cref="T:urakawa.media.data.utilities.SequenceStream"/>.</param>
            <returns>The number of <see cref="T:System.Byte"/>s read</returns>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utilities.SequenceStream.Position"/> within the current stream.
            </summary>
            <param name="offset">
            A byte <paramref name="offset"/> relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>The new <see cref="P:urakawa.media.data.utilities.SequenceStream.Position"/> within the current stream.</returns>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.SetLength(System.Int64)">
            <summary>
            Sets the <see cref="P:urakawa.media.data.utilities.SequenceStream.Length"/> of the <see cref="T:urakawa.media.data.utilities.SequenceStream"/>.
            Since a <see cref="T:urakawa.media.data.utilities.SequenceStream"/> is read-only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">The new <see cref="P:urakawa.media.data.utilities.SequenceStream.Length"/> </param>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            Since a <see cref="T:urakawa.media.data.utilities.SequenceStream"/> is read only, 
            calling this method will thorw an <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="buffer">
            An array of <see cref="T:System.Byte"/>s. 
            This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin copying <see cref="T:System.Byte"/>s 
            to the current stream.
            </param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to be written to the current stream.</param>
        </member>
        <member name="M:urakawa.media.data.utilities.SequenceStream.Close">
            <summary>
            Closes the <see cref="T:urakawa.media.data.utilities.SequenceStream"/> including all it's source <see cref="T:System.IO.Stream"/>s
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SequenceStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SequenceStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SequenceStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing - always returns <c>false</c>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SequenceStream.Length">
            <summary>
            Gets the count in <see cref="T:System.Byte"/>s of the current <see cref="T:urakawa.media.data.utilities.SequenceStream"/>
            </summary>
        </member>
        <member name="P:urakawa.media.data.utilities.SequenceStream.Position">
            <summary>
            Gets or sets the position within the current <see cref="T:urakawa.media.data.utilities.SequenceStream"/>. 
            </summary>
        </member>
        <member name="T:urakawa.property.channel.ManagedAudioChannel">
            <summary>
            A <see cref="T:urakawa.property.channel.Channel"/> that only accepts <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/>
            </summary>
        </member>
        <member name="M:urakawa.property.channel.ManagedAudioChannel.canAccept(urakawa.media.IMedia)">
            <summary>
            Determines if a given <see cref="T:urakawa.media.IMedia"/> can be accepted by the channel,
            which it can if it is a <see cref="T:urakawa.media.data.audio.ManagedAudioMedia"/>
            </summary>
            <param name="m">The given media</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the given media can be accepted</returns>
        </member>
        <member name="T:urakawa.events.media.TextChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.ITextMedia.textChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.media.TextChangedEventArgs.#ctor(urakawa.media.ITextMedia,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.IMedia"/> of the event
            and the new+previous text values
            </summary>
            <param name="src">The source <see cref="T:urakawa.media.IMedia"/> of the event</param>
            <param name="newTxt">The new text value</param>
            <param name="prevTxt">The text value prior to the change</param>
        </member>
        <member name="F:urakawa.events.media.TextChangedEventArgs.SourceTextMedia">
            <summary>
            The source <see cref="T:urakawa.media.IMedia"/> of the event
            </summary>
        </member>
        <member name="F:urakawa.events.media.TextChangedEventArgs.NewText">
            <summary>
            The new text value
            </summary>
        </member>
        <member name="F:urakawa.events.media.TextChangedEventArgs.PreviousText">
            <summary>
            The text value prior to the change
            </summary>
        </member>
        <member name="T:urakawa.DataModelFactory">
            <summary>
            Factory creating the data model objects, includes creator methods for:
            <list type="ul">
            <item><see cref="T:urakawa.Presentation"/></item>
            <item><see cref="T:urakawa.metadata.MetadataFactory"/></item>
            <item><see cref="T:urakawa.command.CommandFactory"/></item>
            <item><see cref="T:urakawa.undo.UndoRedoManager"/></item>
            <item><see cref="T:urakawa.core.TreeNodeFactory"/></item>
            <item><see cref="T:urakawa.property.PropertyFactory"/></item>
            <item><see cref="T:urakawa.property.channel.ChannelFactory"/></item>
            <item><see cref="T:urakawa.property.channel.ChannelsManager"/></item>
            <item><see cref="T:urakawa.media.MediaFactory"/></item>
            <item><see cref="T:urakawa.media.data.MediaDataFactory"/></item>
            <item><see cref="T:urakawa.media.data.MediaDataManager"/></item>
            <item><see cref="T:urakawa.media.data.FileDataProviderFactory"/></item>
            <item><see cref="T:urakawa.media.data.FileDataProviderManager"/></item>
            </list>
            </summary>
        </member>
        <member name="M:urakawa.DataModelFactory.create``1">
            <summary>
            Creates a default <typeparamref name="T"/> object by calling <see cref="M:urakawa.DataModelFactory.create``1(System.String,System.String)"/> 
            using <c><see cref="F:urakawa.ToolkitSettings.XUK_NS"/>:typeof(<typeparamref name="T"/>).Name</c> as Xuk QName
            </summary>
            <typeparam name="T">The object type to create</typeparam>
            <returns>The created <typeparamref name="T"/> instance</returns>
        </member>
        <member name="M:urakawa.DataModelFactory.create``1(System.String,System.String)">
            <summary>
            Creates a <typeparamref name="T"/> matching a given Xuk QName
            </summary>
            <typeparam name="T">The object type to create</typeparam>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <typeparamref name="T"/> instance</returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createPresentation">
            <summary>
            Creates a <see cref="T:urakawa.Presentation"/> of default type (that is <see cref="T:urakawa.Presentation"/>
            </summary>
            <returns>The created <see cref="T:urakawa.Presentation"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createPresentation(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.Presentation"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.Presentation"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMetadataFactory">
            <summary>
            Creates a <see cref="T:urakawa.metadata.MetadataFactory"/> of default type (that is <see cref="T:urakawa.metadata.MetadataFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.metadata.MetadataFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMetadataFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.metadata.MetadataFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.metadata.MetadataFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createCommandFactory">
            <summary>
            Creates a <see cref="T:urakawa.command.CommandFactory"/> of default type (that is <see cref="T:urakawa.command.CommandFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.command.CommandFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createCommandFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.command.CommandFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.command.CommandFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createUndoRedoManager">
            <summary>
            Creates a <see cref="T:urakawa.undo.UndoRedoManager"/> of default type (that is <see cref="T:urakawa.undo.UndoRedoManager"/>
            </summary>
            <returns>The created <see cref="T:urakawa.undo.UndoRedoManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createUndoRedoManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.undo.UndoRedoManager"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.undo.UndoRedoManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createTreeNodeFactory">
            <summary>
            Creates a <see cref="T:urakawa.core.TreeNodeFactory"/> of default type (that is <see cref="T:urakawa.core.TreeNodeFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.core.TreeNodeFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createTreeNodeFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.core.TreeNodeFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.core.TreeNodeFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createPropertyFactory">
            <summary>
            Creates a <see cref="T:urakawa.property.PropertyFactory"/> of default type (that is <see cref="T:urakawa.property.PropertyFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.property.PropertyFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createPropertyFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.PropertyFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.property.PropertyFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createChannelFactory">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.ChannelFactory"/> of default type (that is <see cref="T:urakawa.property.channel.ChannelFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.property.channel.ChannelFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createChannelFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.ChannelFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.property.channel.ChannelFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createChannelsManager">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.ChannelsManager"/> of default type (that is <see cref="T:urakawa.property.channel.ChannelsManager"/>
            </summary>
            <returns>The created <see cref="T:urakawa.property.channel.ChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createChannelsManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.property.channel.ChannelsManager"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.property.channel.ChannelsManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMediaFactory">
            <summary>
            Creates a <see cref="T:urakawa.media.IMediaFactory"/> of default type (that is <see cref="T:urakawa.media.MediaFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.MediaFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMediaFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.IMediaFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.media.IMediaFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMediaDataFactory">
            <summary>
            Creates a <see cref="T:urakawa.media.data.MediaDataFactory"/> of default type (that is <see cref="T:urakawa.media.data.MediaDataFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.data.MediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMediaDataFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.MediaDataFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.media.data.MediaDataFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMediaDataManager">
            <summary>
            Creates a <see cref="T:urakawa.media.data.MediaDataManager"/> of default type (that is <see cref="T:urakawa.media.data.MediaDataManager"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.data.MediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createMediaDataManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.MediaDataManager"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.media.data.MediaDataManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createDataProviderFactory">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProviderFactory"/> of default type (that is <see cref="T:urakawa.media.data.FileDataProviderFactory"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createDataProviderFactory(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProviderFactory"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.media.data.IDataProviderFactory"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createDataProviderManager">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProviderManager"/> of default type (that is <see cref="T:urakawa.media.data.FileDataProviderManager"/>
            </summary>
            <returns>The created <see cref="T:urakawa.media.data.IDataProviderManager"/></returns>
        </member>
        <member name="M:urakawa.DataModelFactory.createDataProviderManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:urakawa.media.data.IDataProviderManager"/> of type matching a given Xuk QName
            </summary>
            <param name="localName">The local name part of the given Xuk QName</param>
            <param name="namespaceUri">The namespace uri part of the given Xuk QName</param>
            <returns>The created <see cref="T:urakawa.media.data.IDataProviderManager"/></returns>
        </member>
        <member name="T:urakawa.events.media.data.MediaDataChangedEventArgs">
            <summary>
            Arguments of the <see cref="E:urakawa.media.data.IManagedMedia.mediaDataChanged"/> event
            </summary>
        </member>
        <member name="M:urakawa.events.media.data.MediaDataChangedEventArgs.#ctor(urakawa.media.data.IManagedMedia,urakawa.media.data.MediaData,urakawa.media.data.MediaData)">
            <summary>
            Constructor setting the source <see cref="T:urakawa.media.data.IManagedMedia"/>, 
            the new <see cref="T:urakawa.media.data.MediaData"/> and the <see cref="T:urakawa.media.data.MediaData"/> prior to the change
            </summary>
            <param name="source">The source <see cref="T:urakawa.media.data.IManagedMedia"/></param>
            <param name="newMD">The new <see cref="T:urakawa.media.data.MediaData"/></param>
            <param name="prevMD">The <see cref="T:urakawa.media.data.MediaData"/> prior to the change</param>
        </member>
        <member name="F:urakawa.events.media.data.MediaDataChangedEventArgs.SourceManagedMedia">
            <summary>
            The source <see cref="T:urakawa.media.data.IManagedMedia"/>
            </summary>
        </member>
        <member name="F:urakawa.events.media.data.MediaDataChangedEventArgs.NewMediaData">
            <summary>
            The new <see cref="T:urakawa.media.data.MediaData"/>
            </summary>
        </member>
        <member name="F:urakawa.events.media.data.MediaDataChangedEventArgs.PreviousMediaData">
            <summary>
            The <see cref="T:urakawa.media.data.MediaData"/> prior to the change
            </summary>
        </member>
        <member name="T:urakawa.events.LanguageChangedEventArgs">
            <summary>
            Arguments of various <c>languageChanged</c>
            </summary>
        </member>
        <member name="M:urakawa.events.LanguageChangedEventArgs.#ctor(System.Object,System.String,System.String)">
            <summary>
            Constructor setting the source <see cref="T:System.Object"/> of the event
            and the previous+new language
            </summary>
            <param name="src">The source <see cref="T:System.Object"/> of the event</param>
            <param name="newLang">The new language</param>
            <param name="prevLanguage">The language prior to the change</param>
        </member>
        <member name="F:urakawa.events.LanguageChangedEventArgs.Newlanguage">
            <summary>
            The new language
            </summary>
        </member>
        <member name="F:urakawa.events.LanguageChangedEventArgs.PreviousLanguage">
            <summary>
            The language prior to the change
            </summary>
        </member>
        <member name="T:urakawa.exception.NodeDoesNotExistException">
            <summary>
            Exception thrown when a node does not exists in a child collection
            </summary>
        </member>
        <member name="M:urakawa.exception.NodeDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor setting the message of the exception
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:urakawa.exception.NodeDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor setting the message and inner <see cref="T:System.Exception"/> of the exception
            </summary>
            <param name="msg">The message</param>
            <param name="inner">The inner exception</param>
        </member>
    </members>
</doc>
