<!-- ad:DockablePane -->
<Grid
  x:Class="Tobi.Plugin.AudioPane.AudioPaneView"
  xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="PresentationOptions"
  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:UI="clr-namespace:Tobi.Common.UI;assembly=Tobi.Common"
    xmlns:XAML="clr-namespace:Tobi.Common.UI.XAML;assembly=Tobi.Common"
    xmlns:Common="clr-namespace:Tobi.Common;assembly=Tobi.Common"
  xmlns:AudioPane="clr-namespace:Tobi.Plugin.AudioPane"
  Loaded="OnPaneLoaded"
  
  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
  >
  <Grid.Resources>

    <!-- All the following is required to Re-Style the ScrollViewer, see 
             http://msdn2.microsoft.com/en-us/library/aa970847(VS.85).aspx
             http://msdn2.microsoft.com/en-us/library/ms742173(VS.85).aspx
             for the default Stles that the ScrollViewer has out of the box
         -->
    <!-- XAML:BoolToOppositeBoolConverter x:Key="oppositeConverter" / -->
    <!--<BooleanToVisibilityConverter x:Key="boolToVisConverter"/>-->

    <SolidColorBrush x:Key="HorizontalNormalBrush" Color="blue" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="red" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="magenta" />

    <SolidColorBrush x:Key="VerticalScrollBarBorderBackground" Color="black" />
    <SolidColorBrush x:Key="NormalBrush" Color="#333333" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#666666" />
    <SolidColorBrush x:Key="GlyphBrush" Color="silver" />
    <SolidColorBrush x:Key="PressedBrush" Color="black" />

    <!-- SrollViewer ScrollBar Repeat Buttons (at each end) -->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="OverridesDefaultStyle" Value="true"/>
      <Setter Property="Focusable" Value="false"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Border
          Name="Border"
          Margin="0"
          CornerRadius="0"
          Background="{StaticResource NormalBrush}"
          BorderBrush="{StaticResource NormalBorderBrush}"
          BorderThickness="0">
              <Path
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Fill="{StaticResource GlyphBrush}"
            Data="{Binding Path=Content,
				RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background"
Value="{StaticResource PressedBrush}" />
              </Trigger>
              <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground"
Value="{StaticResource DisabledForegroundBrush}"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!-- SrollViewer ScrollBar Repeat Buttons (The part in the middle, 
             not the thumb the long area between the buttons ) -->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="OverridesDefaultStyle" Value="true"/>
      <Setter Property="IsTabStop" Value="false"/>
      <Setter Property="Focusable" Value="false"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Border Background="Transparent" />
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!-- ScrollViewer ScrollBar Thumb, that part that can be dragged
            up/down or left/right Buttons -->
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="OverridesDefaultStyle" Value="true"/>
      <Setter Property="IsTabStop" Value="false"/>
      <Setter Property="Focusable" Value="false"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Thumb}">
            <Border
          CornerRadius="3"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="1" />
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <System:Double x:Key="scrollthickness">14</System:Double>

    <ControlTemplate x:Key="VerticalScrollBar"
  TargetType="{x:Type ScrollBar}">
      <Grid >
        <Grid.RowDefinitions>
          <RowDefinition MaxHeight="{StaticResource scrollthickness}"/>
          <RowDefinition Height="0.00001*"/>
          <RowDefinition MaxHeight="{StaticResource scrollthickness}"/>
        </Grid.RowDefinitions>
        <Border
      Grid.RowSpan="3"
      CornerRadius="2"
      Background="{StaticResource VerticalScrollBarBorderBackground}" />
        <RepeatButton
      Grid.Row="0"
      Style="{StaticResource ScrollBarLineButton}"
      Height="{StaticResource scrollthickness}"
      Command="ScrollBar.LineUpCommand"
      Content="M 0 4 L 8 4 L 4 0 Z" />
        <Track
      Name="PART_Track"
      Grid.Row="1"
      IsDirectionReversed="true">
          <Track.DecreaseRepeatButton>
            <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageUpCommand" />
          </Track.DecreaseRepeatButton>
          <Track.Thumb>
            <Thumb
          Style="{StaticResource ScrollBarThumb}"
          Margin="1,0,1,0"
          Background="{StaticResource HorizontalNormalBrush}"
          BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
          </Track.Thumb>
          <Track.IncreaseRepeatButton>
            <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageDownCommand" />
          </Track.IncreaseRepeatButton>
        </Track>
        <RepeatButton
      Grid.Row="3"
      Style="{StaticResource ScrollBarLineButton}"
      Height="{StaticResource scrollthickness}"
      Command="ScrollBar.LineDownCommand"
      Content="M 0 0 L 4 4 L 8 0 Z"/>
      </Grid>
    </ControlTemplate>
    <!-- HorizontalScrollBar Template using the previously created Templates -->
    <ControlTemplate x:Key="HorizontalScrollBar"
  TargetType="{x:Type ScrollBar}">
      <Grid >
        <Grid.ColumnDefinitions>
          <ColumnDefinition MaxWidth="{StaticResource scrollthickness}"/>
          <ColumnDefinition Width="0.00001*"/>
          <ColumnDefinition MaxWidth="{StaticResource scrollthickness}"/>
        </Grid.ColumnDefinitions>
        <Border
      Grid.ColumnSpan="3"
      CornerRadius="3"
      Background="{StaticResource VerticalScrollBarBorderBackground}" />
        <RepeatButton
      Grid.Column="0"
      Style="{StaticResource ScrollBarLineButton}"
      Width="{StaticResource scrollthickness}"
      Command="ScrollBar.LineLeftCommand"
      Content="M 4 0 L 4 8 L 0 4 Z" />
        <Track
      Name="PART_Track"
      Grid.Column="1"
      IsDirectionReversed="False">
          <Track.DecreaseRepeatButton>
            <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageLeftCommand" />
          </Track.DecreaseRepeatButton>
          <Track.Thumb>
            <Thumb
          Style="{StaticResource ScrollBarThumb}"
          Margin="0,1,0,1"
          Background="{StaticResource NormalBrush}"
          BorderBrush="{StaticResource NormalBorderBrush}" />
          </Track.Thumb>
          <Track.IncreaseRepeatButton>
            <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageRightCommand" />
          </Track.IncreaseRepeatButton>
        </Track>
        <RepeatButton
      Grid.Column="3"
      Style="{StaticResource ScrollBarLineButton}"
      Width="{StaticResource scrollthickness}"
      Command="ScrollBar.LineRightCommand"
      Content="M 0 0 L 4 4 L 0 8 Z"/>
      </Grid>
    </ControlTemplate>
    <!-- Style for overall  ScrollBar -->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="OverridesDefaultStyle" Value="true"/>
      <Style.Triggers>
        <Trigger Property="Orientation" Value="Horizontal">
          <Setter Property="Width" Value="Auto"/>
          <Setter Property="Height" Value="{StaticResource scrollthickness}" />
          <Setter Property="Template"
  Value="{StaticResource HorizontalScrollBar}" />
        </Trigger>
        <Trigger Property="Orientation" Value="Vertical">
          <Setter Property="Width" Value="{StaticResource scrollthickness}"/>
          <Setter Property="Height" Value="Auto" />
          <Setter Property="Template"
  Value="{StaticResource VerticalScrollBar}" />
        </Trigger>
      </Style.Triggers>
    </Style>

    <!-- Style for overall  ScrollViewer -->
    <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
      <Setter Property="OverridesDefaultStyle" Value="True"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ScrollViewer}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>

              <ScrollContentPresenter Grid.Column="1"/>

              <ScrollBar Name="PART_VerticalScrollBar"
            Value="{TemplateBinding VerticalOffset}"
            Maximum="{TemplateBinding ScrollableHeight}"
            ViewportSize="{TemplateBinding ViewportHeight}"
            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
              
              <ScrollBar Name="PART_HorizontalScrollBar"
            Orientation="Horizontal"
            Grid.Row="1"
            Grid.Column="1"
            Value="{TemplateBinding HorizontalOffset}"
            Maximum="{TemplateBinding ScrollableWidth}"
            ViewportSize="{TemplateBinding ViewportWidth}"
            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <System:Double x:Key="columnPeakMeterWidth">50.0</System:Double>

    <GridLength x:Key="columnPeakMeterGridWidth">50.0</GridLength>

    <Storyboard x:Key="splitterPeakMeterExpand">

      <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                     Storyboard.TargetName="columnContentPeakMeter"
                                     Storyboard.TargetProperty="(UIElement.Visibility)">
        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
      </ObjectAnimationUsingKeyFrames>

      <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                     Storyboard.TargetName="columnPeakMeter"
                                     Storyboard.TargetProperty="(ColumnDefinition.Width)">
        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource columnPeakMeterWidth}"/>
      </ObjectAnimationUsingKeyFrames>

    </Storyboard>

  </Grid.Resources>

  <Grid.Triggers>
    <EventTrigger RoutedEvent="Control.MouseLeftButtonDown" SourceName="splitterPeakMeter">
      <BeginStoryboard Storyboard="{StaticResource splitterPeakMeterExpand}"/>
    </EventTrigger>
  </Grid.Triggers>

  <!-- Regions:RegionManager.RegionManager="{Binding Path=(Regions:RegionManager.RegionManager), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=OneWay}"  -->

  <!-- ad:DockableContent Title="Audio Waveform and PeakMeter" DockableStyle="DockableToBorders" -->


  <Grid.ColumnDefinitions>
    <!-- ColumnDefinition Width="100"/>
      <ColumnDefinition Width="Auto"/ -->
    <ColumnDefinition Width="*"/>
    <ColumnDefinition Width="Auto"/>
    <ColumnDefinition Width="{StaticResource columnPeakMeterGridWidth}" x:Name="columnPeakMeter"/>
  </Grid.ColumnDefinitions>
  <Grid.RowDefinitions>
    <RowDefinition Height="*"/>
    <RowDefinition Height="Auto"/>
    <RowDefinition Height="Auto"/>
    <RowDefinition Height="Auto"/>
  </Grid.RowDefinitions>

  <!-- GridSplitter Grid.Column="1" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="5"/ -->
  <GridSplitter
    Grid.Column="1" Grid.Row="0"
     Focusable="False"
    x:Name="splitterPeakMeter"
     HorizontalAlignment="Center" VerticalAlignment="Stretch">

    <!-- GridSplitter.Triggers -->

    <!-- EventTrigger RoutedEvent="Control.MouseDoubleClick">
        <BeginStoryboard>
          <Storyboard>
          <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                         Storyboard.TargetName="columnPeakMeter"
                                         Storyboard.TargetProperty="(ColumnDefinition.Width)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static GridLength.Auto}"/>
          </ObjectAnimationUsingKeyFrames>

          <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                         Storyboard.TargetName="columnContentPeakMeter"
                                         Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
          </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </BeginStoryboard>
      </EventTrigger -->

    <!-- DataTrigger Binding="{Binding ElementName=columnContentPeakMeter, Path=Visibility}" Value="Collapsed">
          <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        </DataTrigger -->

    <!-- EventTrigger RoutedEvent="Control.MouseEnter">
        <BeginStoryboard>

          <Storyboard>
            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                           Storyboard.TargetProperty="(Control.Background)">
              <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </ObjectAnimationUsingKeyFrames -->

    <!-- ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                           Storyboard.TargetName="columnContentPeakMeter"
                                           Storyboard.TargetProperty="(UIElement.Visibility)">
              <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>

            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                           Storyboard.TargetName="columnPeakMeter"
                                           Storyboard.TargetProperty="(ColumnDefinition.Width)">
              <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static GridLength.Auto}"/>
            </ObjectAnimationUsingKeyFrames -->
    <!-- /Storyboard>
        </BeginStoryboard>
      </EventTrigger>
      <EventTrigger RoutedEvent="Control.MouseLeave">
        <BeginStoryboard>

          <Storyboard>
            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000"
                                           Storyboard.TargetProperty="Background">
              <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
    </GridSplitter.Triggers -->


  </GridSplitter>

  <DockPanel Grid.Column="0" Grid.Row="0"
             HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

    <WindowsFormsHost x:Name="WinFormHost"
                      DockPanel.Dock="Left"
                      Focusable="False"/>
    

    <!-- Grid DockPanel.Dock="Top">

      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>

      <Button Click="OnOpenFile"
              Grid.Row="1" Grid.Column="0">Play WAV file...</Button>

      <TextBox Text="{Binding Path=FilePath, Mode=OneWay}"
               IsEnabled="False"
               Grid.Row="1" Grid.Column="1"/>
    </Grid -->

    <!--Style="{StaticResource FavsScrollViewer}"-->
    <ScrollViewer x:Name="WaveFormScroll"
                  RenderTransformOrigin="0.5,0.5"
                  
                  DockPanel.Dock="Bottom"
                  VerticalScrollBarVisibility="Auto"
                  HorizontalScrollBarVisibility="Visible"
                
             CanContentScroll="True"
                IsDeferredScrollingEnabled="False"
                  Focusable="False"
                  
                  VerticalAlignment="Stretch"
                  ScrollChanged="OnWaveFormScrollChanged"
                  
            IsEnabled="{Binding IsWaveFormLoading, Converter={XAML:BoolToOppositeBoolConverter}}"
      
      Background="{StaticResource NormalBrush}"
      >

      <!-- Background="{Binding Converter={XAML:ColorToBrushConverter}, Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_Back, Mode=OneWay}" -->
      <!--SizeChanged="OnWaveFormCanvasSizeChanged"-->
      <Canvas x:Name="WaveFormCanvas"
              
              SizeChanged="OnWaveFormCanvasSizeChanged"
              
               MouseDown="OnWaveFormMouseDown"
               MouseMove="OnWaveFormMouseMove"
               MouseUp="OnWaveFormMouseUp"
               MouseLeave="OnWaveFormMouseLeave"
               MouseEnter="OnWaveFormMouseEnter"

              Background="{Binding Converter={XAML:ColorToBrushConverter}, Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_Back, Mode=OneWay}"
                  VerticalAlignment="Stretch"
                  HorizontalAlignment="Left"
              
              
              SnapsToDevicePixels="True"
              
              ClipToBounds="True"
              
            IsEnabled="{Binding CanManipulateWaveForm, Mode=OneWay}"
              >

        <!--Width="{Binding ElementName=WaveFormImage, Path=Width, Mode=OneWay}"-->
        <Canvas.Width>
          <MultiBinding Converter="{AudioPane:MillisecondsPerPixelToPixelWidthConverter}">

            <Binding ElementName="ZoomSlider" Path="Value" Mode="OneWay"/>

            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type AudioPane:AudioPaneView}}"
                     Path="DataContext"/>

          </MultiBinding>
        </Canvas.Width>
        
        <!--IsEnabled="{Binding IsWaveFormLoading, Converter={XAML:BoolToOppositeBoolConverter}}"-->
       <!--
        VerticalAlignment="Stretch"
        HorizontalAlignment="Stretch" -->
        <Image x:Name="WaveFormImage"

               Stretch="Fill"
               Canvas.ZIndex="0"
               Height="{Binding ElementName=WaveFormCanvas, Path=ActualHeight, Mode=OneWay}"
               Canvas.Left="0"
               Canvas.Top="0"
               RenderOptions.EdgeMode="Unspecified"
               SnapsToDevicePixels="True"
               RenderOptions.BitmapScalingMode="Fant">

          <Image.Width>
            <!--UpdateSourceTrigger="PropertyChanged"-->
            <MultiBinding Converter="{AudioPane:MillisecondsPerPixelToPixelWidthConverter}">
              
              <Binding ElementName="ZoomSlider" Path="Value" Mode="OneWay"/>
              
              <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type AudioPane:AudioPaneView}}"
                       Path="DataContext"/>
            
            </MultiBinding>
          </Image.Width>
        </Image>

        <Path x:Name="WaveFormTimeRangePath"
              Canvas.ZIndex="1"
              StrokeThickness="1"
              RenderOptions.EdgeMode="Aliased"
              SnapsToDevicePixels="True">
          <Path.Fill>
            <SolidColorBrush Color="{Binding Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_Phrases, Mode=OneWay}"/>
          </Path.Fill>
          <Path.Stroke>
            <SolidColorBrush Color="{Binding Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_Phrases, Mode=OneWay}"/>
          </Path.Stroke>
        </Path>

        <Rectangle
          x:Name="WaveFormTimeSelectionRectBackup"
          Canvas.ZIndex="2"
              StrokeThickness="1"
              Stroke="{Binding Path=ColorSelectionContourBrush, Mode=OneWay}"
          
          RenderOptions.EdgeMode="Aliased"
          SnapsToDevicePixels="True"
                   Canvas.Top="0"
                   Canvas.Left="0"
                   Width="0"
          Visibility="Hidden"
               Height="{Binding ElementName=WaveFormCanvas, Path=ActualHeight, Mode=OneWay}">
          <!--StrokeDashCap="Flat"
          StrokeDashArray="{Binding Source={x:Static DashStyles.Dot}, Path=Dashes}"-->
          <Rectangle.StrokeDashArray>
            <System:Double>4</System:Double>
          </Rectangle.StrokeDashArray>
          <Rectangle.Fill>
            <SolidColorBrush Opacity="0.20" Color="{Binding Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_Selection, Mode=OneWay}"/>
          </Rectangle.Fill>
        </Rectangle>
        
        <Rectangle
          x:Name="WaveFormTimeSelectionRect"
          Canvas.ZIndex="3"
              StrokeThickness="1"
              Stroke="{Binding Path=ColorSelectionContourBrush, Mode=OneWay}"
          
          RenderOptions.EdgeMode="Aliased"
          SnapsToDevicePixels="True"
                   Canvas.Top="0"
                   Canvas.Left="0"
                   Width="0"
          Visibility="Hidden"
               Height="{Binding ElementName=WaveFormCanvas, Path=ActualHeight, Mode=OneWay}">
          <Rectangle.StrokeDashArray>
            <System:Double>2</System:Double>
          </Rectangle.StrokeDashArray>
          <Rectangle.Fill>
            <SolidColorBrush Opacity="0.35" Color="{Binding Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_Selection, Mode=OneWay}"/>
          </Rectangle.Fill>
        </Rectangle>

        <Path x:Name="WaveFormPlayHeadPath"
              Canvas.ZIndex="4"
              StrokeThickness="1.2"
              RenderOptions.EdgeMode="Unspecified"
              SnapsToDevicePixels="True">
          <Path.Stroke>
            <SolidColorBrush Color="{Binding Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_CursorBorder, Mode=OneWay}"/>
          </Path.Stroke>
          <Path.Fill>
            <SolidColorBrush Color="{Binding Source={x:Static AudioPane:Settings.Default}, Path=AudioWaveForm_Color_CursorFill, Mode=OneWay}"/>
          </Path.Fill>
        </Path>
      </Canvas>
    </ScrollViewer>
  </DockPanel>
  <DockPanel Grid.Column="0" Grid.Row="0" LastChildFill="true"
             Visibility="{Binding Path=IsWaveFormLoading,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}"
             Focusable="False"
             
               VerticalAlignment="Bottom">
    <Button Content="Cancel"
            DockPanel.Dock="Right"
            Click="OnWaveFormCancelButtonClick"
            
                x:Name="WaveFormCancelButton"
               VerticalAlignment="Bottom"/>
  <ProgressBar 
    Height="{Binding ElementName=WaveFormCancelButton, Mode=OneWay, Path=ActualHeight}"
                x:Name="WaveFormProgress"
                Focusable="False"
               Orientation="Horizontal"
               IsIndeterminate="True"
               Value="0"
               Minimum="0"
               Maximum="100"

               VerticalAlignment="Bottom"
               />
  </DockPanel>
  <Grid
    x:Name="columnContentPeakMeter"
    Grid.Column="2" Grid.Row="0"
        HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
    MinWidth="{StaticResource columnPeakMeterWidth}">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width=".50*"/>
      <ColumnDefinition Width=".50*"/>
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>

    <TextBlock x:Name="PeakOverloadLabelCh1"
               Grid.Row="0" Grid.Column="0"
               Text="{Binding Path=PeakOverloadCountCh1, Mode=OneWay}"
               TextAlignment="Center"
        HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
               FontWeight="Normal"
               MouseDown="OnResetPeakOverloadCountCh1"/>

    <TextBlock x:Name="PeakOverloadLabelCh2"
               Grid.Row="0" Grid.Column="1"
               Text="{Binding Path=PeakOverloadCountCh2, Mode=OneWay}"
               TextAlignment="Center"
        HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
               FontWeight="Normal"
               MouseDown="OnResetPeakOverloadCountCh2"/>

    <Canvas x:Name="PeakMeterCanvas"
            SizeChanged="OnPeakMeterCanvasSizeChanged"
            Background="Black"
                
                  VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch"
                
            Grid.Row="1" Grid.Column="0"
            Grid.ColumnSpan="2">

      <Rectangle
        Canvas.ZIndex="0"
            StrokeThickness="0"
            Stroke="Green"
        RenderOptions.EdgeMode="Aliased"
        SnapsToDevicePixels="True"
                 Canvas.Top="0"
                 Canvas.Left="0"
                 Width="{Binding ElementName=PeakMeterCanvas, Path=ActualWidth, Mode=OneWay}"
                 Height="{Binding ElementName=PeakMeterCanvas, Path=ActualHeight, Mode=OneWay}">
        <Rectangle.Fill>
          <LinearGradientBrush x:Name="PeakMeterCanvasBackgroundBrush"
            PresentationOptions:Freeze="true"
                               StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="Red" Offset="0.0" />
            <GradientStop Color="Orange" Offset="0.15" />
            <GradientStop Color="Yellow" Offset="0.20" />
            <GradientStop Color="LimeGreen" Offset="0.65" />
            <GradientStop Color="Green" Offset="1.0" />
          </LinearGradientBrush>
        </Rectangle.Fill>
      </Rectangle>

      <Rectangle
        x:Name="PeakMeterCanvasOpaqueMask"
        Visibility="Visible"
        Canvas.ZIndex="2"
            StrokeThickness="0"
            Stroke="Lime"
        RenderOptions.EdgeMode="Aliased"
        SnapsToDevicePixels="True"
                 Canvas.Top="0"
                 Canvas.Left="0"
                 Width="{Binding ElementName=PeakMeterCanvas, Path=ActualWidth, Mode=OneWay}"
                 Height="{Binding ElementName=PeakMeterCanvas, Path=ActualHeight, Mode=OneWay}">
        <Rectangle.Fill>
          <SolidColorBrush Color="Black" PresentationOptions:Freeze="true"/>
        </Rectangle.Fill>
      </Rectangle>

      <Line
        x:Name="PeakMeterLinePeakDropCh1"
        Visibility="Visible"
        Canvas.ZIndex="4"
        
            StrokeThickness="1.3"
            Stroke="LimeGreen"
        
        RenderOptions.EdgeMode="Aliased"
        SnapsToDevicePixels="True"

        X1="0"
        Y1="0"
        
        X2="{Binding ElementName=PeakMeterCanvas, Path=ActualWidth, Mode=OneTime}"
        Y2="0"

                 Canvas.Top="0"
                 Canvas.Left="0"
        ></Line>

      <Line
        x:Name="PeakMeterLinePeakDropCh2"
        Visibility="Visible"
        Canvas.ZIndex="4"
        
            StrokeThickness="1.3"
            Stroke="LimeGreen"
        
        RenderOptions.EdgeMode="Aliased"
        SnapsToDevicePixels="True"

        X1="0"
        Y1="0"
        
        X2="{Binding ElementName=PeakMeterCanvas, Path=ActualWidth, Mode=OneTime}"
        Y2="0"

                 Canvas.Top="0"
                 Canvas.Left="0"
        ></Line>
      <Line
        x:Name="PeakMeterLinePeakFixedCh1"
        Visibility="Visible"
        Canvas.ZIndex="3"
        
            StrokeThickness="1"
            Stroke="OrangeRed"
        
        RenderOptions.EdgeMode="Aliased"
        SnapsToDevicePixels="True"

        X1="0"
        Y1="0"
        
        X2="{Binding ElementName=PeakMeterCanvas, Path=ActualWidth, Mode=OneTime}"
        Y2="0"

                 Canvas.Top="0"
                 Canvas.Left="0"
        ></Line>

      <Line
        x:Name="PeakMeterLinePeakFixedCh2"
        Visibility="Visible"
        Canvas.ZIndex="3"
        
            StrokeThickness="1"
            Stroke="OrangeRed"
        
        RenderOptions.EdgeMode="Aliased"
        SnapsToDevicePixels="True"

        X1="0"
        Y1="0"
        
        X2="{Binding ElementName=PeakMeterCanvas, Path=ActualWidth, Mode=OneTime}"
        Y2="0"

                 Canvas.Top="0"
                 Canvas.Left="0"
        ></Line>
      
      <Path x:Name="PeakMeterPathCh1"
            Canvas.ZIndex="1"
            StrokeThickness="0"
            RenderOptions.EdgeMode="Aliased"
            SnapsToDevicePixels="True"
                >
        <Path.Fill>
          <SolidColorBrush Color="Black" PresentationOptions:Freeze="true"/>
        </Path.Fill>
        <Path.Stroke>
          <SolidColorBrush Color="Black" PresentationOptions:Freeze="true"/>
        </Path.Stroke>
      </Path>


      <Path x:Name="PeakMeterPathCh2"
          Canvas.ZIndex="1"
          StrokeThickness="0"
            RenderOptions.EdgeMode="Aliased"
            SnapsToDevicePixels="True"
                >
        <Path.Fill>
          <SolidColorBrush Color="Black" PresentationOptions:Freeze="true"/>
        </Path.Fill>
        <Path.Stroke>
          <SolidColorBrush Color="Black" PresentationOptions:Freeze="true"/>
        </Path.Stroke>
      </Path>
    </Canvas>
  </Grid>


  <TextBlock Text=""
             
             x:Name="FocusCollapsed"
    Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
             Width="Auto"
             VerticalAlignment="Center"
             HorizontalAlignment="Stretch"
             
             KeyDown="OnToolbarToggleVisibleKeyboard"
             MouseDown="OnToolbarToggleVisible"
             
   Visibility="{Binding Source={x:Static AudioPane:Settings.Default}, Path=Audio_ButtonBarVisible,
              Converter={XAML:BooleanToOppositeVisibilityConverter}, Mode=OneWay}"
          
             Style="{StaticResource VisibilityTogglerStyleHeight}"
          />

  <Border
          BorderThickness="1,1,1,1"
          BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        
      Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
          
          Margin="0,0,0,0"
          Padding="0,0,0,0"
          
    Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
           DockPanel.Dock="Bottom"
          
   Visibility="{Binding Source={x:Static AudioPane:Settings.Default}, Path=Audio_ButtonBarVisible,
              Converter={XAML:BooleanToVisibilityConverter}, Mode=OneWay}"
    
          
        Focusable="False"
                HorizontalAlignment="Stretch"
           VerticalAlignment="Bottom">
    
  <UI:WrapPanelLastChildFill
    LastChildFill="True"
      Orientation="Horizontal"
      Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"

           KeyboardNavigation.DirectionalNavigation="Cycle"

    >

    <TextBlock 
  Focusable="True"
             x:Name="FocusExpanded"
  Text=""
               Height="Auto"
               VerticalAlignment="Stretch"
               HorizontalAlignment="Center"
               
             KeyDown="OnToolbarToggleVisibleKeyboard"
               MouseDown="OnToolbarToggleVisible"
               
             Style="{StaticResource VisibilityTogglerStyleWidth}"
          />
    <!-- StackPanel
      
        Orientation="Horizontal"
                    HorizontalAlignment="Left"
        Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" -->

    
    <UI:ButtonRichCommand
        RichCommand="{Binding UrakawaSession.UndoCommand}"
        Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToVisibilityConverter}}"
        />

    <UI:ButtonRichCommand
        RichCommand="{Binding UrakawaSession.RedoCommand}"
        Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToVisibilityConverter}}"
        />

      
    <Separator
      Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToVisibilityConverter}}"
      />


    <UI:TwoStateButtonRichCommand
  
      RichCommandOne="{Binding CommandStopMonitor}"
      RichCommandTwo="{Binding CommandStartMonitor}"
      InputBindingManager="{Binding InputBindingManager}"
            RichCommandActive="{Binding IsMonitoring, Mode=OneWay}"
      Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToVisibilityConverter}}"
      />

      <UI:TwoStateButtonRichCommand
  
        RichCommandOne="{Binding CommandStopRecord}"
        RichCommandTwo="{Binding CommandStartRecord}"
        InputBindingManager="{Binding InputBindingManager}"
              RichCommandActive="{Binding IsRecording, Mode=OneWay}"/>

    <UI:ButtonRichCommand
        RichCommand="{Binding CommandStopRecordAndContinue}"
        Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
        />

    <Separator/>

    <UI:ButtonRichCommand
        RichCommand="{Binding CommandInsertFile}"/>

    <UI:ButtonRichCommand
        RichCommand="{Binding CommandGenTTS}"
        Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
        />

 
    <UI:ButtonRichCommand
      RichCommand="{Binding CommandDeleteAudioSelection}"/>

    <Separator/>

      <!-- UI:ButtonRichCommand RichCommand="{Binding CommandAudioSettings}" / -->

      <!-- UI:ToggleButtonRichCommand RichCommand="{Binding CommandAutoPlay}"
            IsChecked="{Binding IsAutoPlay, Mode=OneWay}"/ -->

    <UI:ButtonRichCommand RichCommand="{Binding CommandPlayPreviewLeft}"
                                 />

    <UI:TwoStateButtonRichCommand
      RichCommandOne="{Binding CommandPause}"
      RichCommandTwo="{Binding CommandPlay}"
      InputBindingManager="{Binding InputBindingManager}"
            RichCommandActive="{Binding IsPlaying, Mode=OneWay}"/>


    <UI:ButtonRichCommand RichCommand="{Binding CommandPlayPreviewRight}"
                                 />
    <Separator/>

    <UI:ButtonRichCommand RichCommand="{Binding CommandGotoBegining}"
                                 />

    <UI:ButtonRichCommand  RichCommand="{Binding CommandStepBack}"
                           Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
                                  />

    <UI:RepeatButtonRichCommand RichCommand="{Binding CommandRewind}"
                                 />

    <UI:RepeatButtonRichCommand RichCommand="{Binding CommandFastForward}"
                                 />

    <UI:ButtonRichCommand  RichCommand="{Binding CommandStepForward}"
                           Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
                                  />

    <UI:ButtonRichCommand RichCommand="{Binding CommandGotoEnd}"
                                 />

    <Separator/>

    <UI:ButtonRichCommand RichCommand="{Binding CommandSelectAll}"
                                 />

    <UI:ButtonRichCommand RichCommand="{Binding CommandSelectLeft}"
                                 />
    <UI:ButtonRichCommand RichCommand="{Binding CommandSelectRight}"
                                 />


    <UI:ButtonRichCommand RichCommand="{Binding CommandSelectPreviousChunk}"
                          Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
                                 />
    <UI:ButtonRichCommand RichCommand="{Binding CommandSelectNextChunk}"
                          Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
                                 />

    <!-- UI:ButtonRichCommand RichCommand="{Binding CommandBeginSelection}" />
    <UI:ButtonRichCommand RichCommand="{Binding CommandEndSelection}" / -->
    
    <UI:ButtonRichCommand RichCommand="{Binding CommandClearSelection}"
                                 />

    <Separator/>
    <!--ToolTip="{x:Static AudioPane:Tobi_Plugin_AudioPane_Lang.CmdAudioAutoPlay_LongDesc}"-->
    <CheckBox Control.IsTabStop="true"
                IsChecked="{Binding IsAutoPlay, Mode=TwoWay}"
                Content="{x:Static AudioPane:Tobi_Plugin_AudioPane_Lang.AudioAutoPlay}"
                IsThreeState="False"
              ToolTip="{Binding Source={x:Static AudioPane:Settings_KeyGestures.Default}, Path=Keyboard_Audio_AutoPlay, Mode=OneWay}"
              VerticalAlignment="Center"
    Margin="2,0,2,0"
              Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
              />


    <Separator
      Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
      />
    
    <!-- UI:ButtonRichCommand RichCommand="{Binding CommandOpenFile}"/ -->

      <!-- UI:ButtonRichCommand RichCommand="{Binding CommandRefresh}" / -->
      

    <UI:ButtonRichCommand RichCommand="{Binding CommandZoomFitFull}"
                                 />
    <UI:ButtonRichCommand RichCommand="{Binding CommandZoomSelection}"
                                 />

    <!-- /StackPanel -->

    <!-- DockPanel Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
             
                 HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 LastChildFill="True"
             
            Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" -->

    <!-- TickPlacement="BottomRight" DockPanel.Dock="Bottom" -->
    <Slider x:Name="ZoomSlider"
              Focusable="False"
            
            Thumb.DragCompleted="OnZoomSliderDragCompleted"
            Thumb.DragStarted="OnZoomSliderDragStarted"
            
            IsMoveToPointEnabled="True"
            
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            
            TickPlacement="None"
            TickFrequency="5"
            
            Value="5"
            Minimum="1"
            Maximum="30"
            LargeChange="5"
            SmallChange="1"
            
            Delay="1000"
            Interval="1000"
            
            Margin="3"
            IsEnabled="{Binding CanManipulateWaveForm, Mode=OneWay}"/>
<!-- 
            Value="1000"
            Minimum="800"
            Maximum="8000"
            LargeChange="500"
            SmallChange="200"
            
            TickFrequency="500"
            Delay="1000"
            Interval="1000"
            
-->
  </UI:WrapPanelLastChildFill>
  </Border>

  <StatusBar
    
    Focusable="True"
    Margin="0, 0, 0, 0"
           KeyboardNavigation.DirectionalNavigation="Cycle"
    
    Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="2"
    
    HorizontalAlignment="Stretch"

    Visibility="{Binding Path=IsSimpleMode, Mode=OneWay, Converter={XAML:BooleanToOppositeVisibilityConverter}}"
    >

    <!-- LastChildFill="True" -->

    <StatusBarItem DockPanel.Dock="Left" Focusable="True">
    <TextBlock 
    x:Name="FocusStartStatusBar" Text="{Binding StatusBarMessage}" Focusable="True" 
    Margin="0, 0, 0, 0" 
                    HorizontalAlignment="Left"/>
    </StatusBarItem>

    <StatusBarItem DockPanel.Dock="Left">
      <Separator/>
    </StatusBarItem>

    <StatusBarItem Focusable="True" 
    DockPanel.Dock="Right">
    <StackPanel
      
    Margin="0, 0, 11, 0"
        Orientation="Horizontal"
                    HorizontalAlignment="Right"
        Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">

      <TextBlock
                 Focusable="True" VerticalAlignment="Center"
                 Text="{Binding PlaybackRateString, Mode=OneWay}"

                 />

      <TextBlock
        
                 Visibility="{Binding Path=PcmFormatStringVisible,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}"
        Foreground="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        VerticalAlignment="Center" Text=" | "/>
      
      <TextBlock 
                 Visibility="{Binding Path=PcmFormatStringVisible,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}" 
                 Focusable="True" VerticalAlignment="Center" Text="{Binding PcmFormatString, Mode=OneWay}"/>

      <TextBlock
        
                 Visibility="{Binding Path=TimeStringCurrentVisible,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}"
        Foreground="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        VerticalAlignment="Center" Text=" | "/>

      <TextBlock
        
                 Visibility="{Binding Path=TimeStringCurrentVisible,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}"
                 Focusable="True"
        FontWeight="Normal"
        VerticalAlignment="Center" Text="{Binding TimeStringCurrent, Mode=OneWay}"/>

      <TextBlock
                 Visibility="{Binding Path=TimeStringSelectionVisible,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}"
        Foreground="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        VerticalAlignment="Center" Text=" | "/>

      <TextBlock Focusable="True"
        FontWeight="Normal"
                 Visibility="{Binding Path=TimeStringSelectionVisible,
                            Converter={XAML:BooleanToVisibilityConverter},
                            Mode=OneWay}" 
        VerticalAlignment="Center" Text="{Binding TimeStringSelection, Mode=OneWay}"/>

      <TextBlock
        
        Foreground="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        VerticalAlignment="Center" Text=" | "/>

      <TextBlock 
                 Focusable="True"
        FontWeight="Normal"
        VerticalAlignment="Center" Text="{Binding TotalDocumentAudioDurationString, Mode=OneWay}"/>

      <TextBlock
        
        Foreground="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        VerticalAlignment="Center" Text=" | "/>

      <TextBlock
                 Focusable="True"
        FontWeight="Normal"
        VerticalAlignment="Center" Text="{Binding TotalSessionAudioDurationString, Mode=OneWay}"/>
    
    </StackPanel>
      
    </StatusBarItem>

    <StatusBarItem>
      <Separator/>
    </StatusBarItem>
  </StatusBar>

</Grid >

<!-- /ad:DockableContent -->
<!-- /ad:DockablePane -->
