<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AudioWaveformEditor" xml:space="preserve">
    <value>Audio waveform editor.</value>
  </data>
  <data name="Audio_AutoPlay" xml:space="preserve">
    <value>_Toggle autoplay</value>
  </data>
  <data name="Audio_AutoPlay_" xml:space="preserve">
    <value>Switch autoplay on/off</value>
  </data>
  <data name="Audio_BeginSelection" xml:space="preserve">
    <value>_Begin selection</value>
  </data>
  <data name="Audio_BeginSelection_" xml:space="preserve">
    <value>Begin audio waveform selection</value>
  </data>
  <data name="Audio_ClearSelection" xml:space="preserve">
    <value>_Clear selection</value>
  </data>
  <data name="Audio_ClearSelection_" xml:space="preserve">
    <value>Clear the current audio selection</value>
  </data>
  <data name="Audio_Delete" xml:space="preserve">
    <value>_Delete audio selection</value>
  </data>
  <data name="Audio_Delete_" xml:space="preserve">
    <value>Delete the audio in the waveform selection</value>
  </data>
  <data name="Audio_EndSelection" xml:space="preserve">
    <value>_End selection</value>
  </data>
  <data name="Audio_EndSelection_" xml:space="preserve">
    <value>End audio waveform selection</value>
  </data>
  <data name="Audio_FastForward" xml:space="preserve">
    <value>_Step forward</value>
  </data>
  <data name="Audio_FastForward_" xml:space="preserve">
    <value>Jump forward by a pre-defined time increment</value>
  </data>
  <data name="Audio_FitFull" xml:space="preserve">
    <value>_Fit into view</value>
  </data>
  <data name="Audio_FitFull_" xml:space="preserve">
    <value>Fit the entire audio waveform into view</value>
  </data>
  <data name="Audio_Focus" xml:space="preserve">
    <value>Audio pane focus</value>
  </data>
  <data name="Audio_FocusStatusBar" xml:space="preserve">
    <value>Status bar focus</value>
  </data>
  <data name="Audio_GotoBegin" xml:space="preserve">
    <value>_Go to begin</value>
  </data>
  <data name="Audio_GotoBegin_" xml:space="preserve">
    <value>Rewind to the begining of the audio stream</value>
  </data>
  <data name="Audio_GotoEnd" xml:space="preserve">
    <value>_Go to end</value>
  </data>
  <data name="Audio_GotoEnd_" xml:space="preserve">
    <value>Fast Forward to the end of the audio stream</value>
  </data>
  <data name="Audio_InsertFile" xml:space="preserve">
    <value>_Insert audio file</value>
  </data>
  <data name="Audio_InsertFile_" xml:space="preserve">
    <value>Inserts a local WAV file (PCM 16 bits)</value>
  </data>
  <data name="Audio_OpenFile" xml:space="preserve">
    <value>_Open audio file</value>
  </data>
  <data name="Audio_OpenFile_" xml:space="preserve">
    <value>Open a local WAV file (PCM 16 bits)</value>
  </data>
  <data name="Audio_Pause" xml:space="preserve">
    <value>_Pause</value>
  </data>
  <data name="Audio_Pause_" xml:space="preserve">
    <value>Pause playback</value>
  </data>
  <data name="Audio_Play" xml:space="preserve">
    <value>Pla_y</value>
  </data>
  <data name="Audio_PlayPreviewLeft" xml:space="preserve">
    <value>Preview _before</value>
  </data>
  <data name="Audio_PlayPreviewLeft_" xml:space="preserve">
    <value>Preview the audio just before the current cursor position</value>
  </data>
  <data name="Audio_PlayPreviewRight" xml:space="preserve">
    <value>Preview _after</value>
  </data>
  <data name="Audio_PlayPreviewRight_" xml:space="preserve">
    <value>Preview the audio right after the current cursor position</value>
  </data>
  <data name="Audio_PlayRateDown" xml:space="preserve">
    <value>_Descrease playback rate</value>
  </data>
  <data name="Audio_PlayRateDown_" xml:space="preserve">
    <value>Turn the playback speed down</value>
  </data>
  <data name="Audio_PlayRateReset" xml:space="preserve">
    <value>_Reset playback rate</value>
  </data>
  <data name="Audio_PlayRateReset_" xml:space="preserve">
    <value>Restore the normal playback speed</value>
  </data>
  <data name="Audio_PlayRateUp" xml:space="preserve">
    <value>_Increase playback rate</value>
  </data>
  <data name="Audio_PlayRateUp_" xml:space="preserve">
    <value>Turn the playback speed up</value>
  </data>
  <data name="Audio_Play_" xml:space="preserve">
    <value>Start playback</value>
  </data>
  <data name="Audio_Reload" xml:space="preserve">
    <value>_Reload audio</value>
  </data>
  <data name="Audio_Reload_" xml:space="preserve">
    <value>Reload the audio waveform data</value>
  </data>
  <data name="Audio_Rewind" xml:space="preserve">
    <value>_Step backwards</value>
  </data>
  <data name="Audio_Rewind_" xml:space="preserve">
    <value>Jump back by a pre-defined time increment</value>
  </data>
  <data name="Audio_SelectNextChunk" xml:space="preserve">
    <value>Select next phrase</value>
  </data>
  <data name="Audio_SelectNextChunk_" xml:space="preserve">
    <value>Select the entire audio phrase following the current one</value>
  </data>
  <data name="Audio_SelectPreviousChunk" xml:space="preserve">
    <value>Select previous phrase</value>
  </data>
  <data name="Audio_SelectPreviousChunk_" xml:space="preserve">
    <value>Select the entire audio phrase preceding the current one</value>
  </data>
  <data name="Audio_Settings" xml:space="preserve">
    <value>Audio se_ttings</value>
  </data>
  <data name="Audio_Settings_" xml:space="preserve">
    <value>Settings for the audio player and recorder</value>
  </data>
  <data name="Audio_ShowOptions" xml:space="preserve">
    <value>Show audio options</value>
  </data>
  <data name="Audio_StartMonitor" xml:space="preserve">
    <value>St_art monitoring</value>
  </data>
  <data name="Audio_StartMonitor_" xml:space="preserve">
    <value>Start monitoring audio input</value>
  </data>
  <data name="Audio_StartRecord" xml:space="preserve">
    <value>St_art recording</value>
  </data>
  <data name="Audio_StartRecord_" xml:space="preserve">
    <value>Start recording audio</value>
  </data>
  <data name="Audio_StepBack" xml:space="preserve">
    <value>_Back one phrase</value>
  </data>
  <data name="Audio_StepBack_" xml:space="preserve">
    <value>Step back one phrase</value>
  </data>
  <data name="Audio_StepForward" xml:space="preserve">
    <value>_Forward one phrase</value>
  </data>
  <data name="Audio_StepForward_" xml:space="preserve">
    <value>Step forward one phrase</value>
  </data>
  <data name="Audio_StopMonitor" xml:space="preserve">
    <value>St_op monitoring</value>
  </data>
  <data name="Audio_StopMonitor_" xml:space="preserve">
    <value>Stop the audio input monitoring</value>
  </data>
  <data name="Audio_StopRecord" xml:space="preserve">
    <value>St_op recording</value>
  </data>
  <data name="Audio_StopRecord_" xml:space="preserve">
    <value>Stop the current recording</value>
  </data>
  <data name="Audio_ZoomSelection" xml:space="preserve">
    <value>_Zoom on selection</value>
  </data>
  <data name="Audio_ZoomSelection_" xml:space="preserve">
    <value>Zoom waveform selection into view</value>
  </data>
  <data name="Audio_ZoomSlider" xml:space="preserve">
    <value>Audio waveform zoom</value>
  </data>
  <data name="ComboLabel_Playback" xml:space="preserve">
    <value>Playback:</value>
  </data>
  <data name="ComboLabel_Recording" xml:space="preserve">
    <value>Recording:</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="LoadingWaveform" xml:space="preserve">
    <value>Loading Waveform</value>
  </data>
  <data name="Monitoring" xml:space="preserve">
    <value>Monitoring</value>
  </data>
  <data name="MonitoringStopped" xml:space="preserve">
    <value>Monitoring Stopped</value>
  </data>
  <data name="NoDocument" xml:space="preserve">
    <value>No document</value>
  </data>
  <data name="PlaybackEnded" xml:space="preserve">
    <value>Playback Ended</value>
  </data>
  <data name="PlaybackStopped" xml:space="preserve">
    <value>Playback Stopped</value>
  </data>
  <data name="PlaybackX" xml:space="preserve">
    <value>Playback x{0}</value>
  </data>
  <data name="Playing" xml:space="preserve">
    <value>Playing</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready.</value>
  </data>
  <data name="Recording" xml:space="preserve">
    <value>Recording</value>
  </data>
  <data name="RecordingStopped" xml:space="preserve">
    <value>Recording Stopped</value>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>_Select all</value>
  </data>
  <data name="SelectAll_" xml:space="preserve">
    <value>Select all content</value>
  </data>
  <data name="TheAudioWaveformEditorAndDisplay" xml:space="preserve">
    <value>The audio waveform editor and display.</value>
  </data>
  <data name="WaveformLoaded" xml:space="preserve">
    <value>Waveform Loaded</value>
  </data>
</root>